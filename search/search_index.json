{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages http_server","title":"http_server"},{"location":"http_server--index/","text":"No package doc string provided for http_server. Public Types \u00b6 primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart primitive URLEncode class URL interface SyncHandler class SyncHandlerWrapper interface Status primitive StatusContinue primitive StatusSwitchingProtocols primitive StatusOK primitive StatusCreated primitive StatusAccepted primitive StatusNonAuthoritativeInfo primitive StatusNoContent primitive StatusResetContent primitive StatusPartialContent primitive StatusMultipleChoices primitive StatusMovedPermanently primitive StatusFound primitive StatusSeeOther primitive StatusNotModified primitive StatusUseProxy primitive StatusTemporaryRedirect primitive StatusBadRequest primitive StatusUnauthorized primitive StatusPaymentRequired primitive StatusForbidden primitive StatusNotFound primitive StatusMethodNotAllowed primitive StatusNotAcceptable primitive StatusProxyAuthRequired primitive StatusRequestTimeout primitive StatusConflict primitive StatusGone primitive StatusLengthRequired primitive StatusPreconditionFailed primitive StatusRequestEntityTooLarge primitive StatusRequestURITooLong primitive StatusUnsupportedMediaType primitive StatusRequestedRangeNotSatisfiable primitive StatusExpectationFailed primitive StatusTeapot primitive StatusPreconditionRequired primitive StatusTooManyRequests primitive StatusRequestHeaderFieldsTooLarge primitive StatusUnavailableForLegalReasons primitive StatusInternalServerError primitive StatusNotImplemented primitive StatusBadGateway primitive StatusServiceUnavailable primitive StatusGatewayTimeout primitive StatusHTTPVersionNotSupported primitive StatusNetworkAuthenticationRequired interface Session interface ServerNotify class ServerConfig actor Server interface Response primitive Responses interface ResponseBuilder interface ResponseBuilderHeaders interface ResponseBuilderBody class BuildableResponse primitive TooLarge primitive UnknownMethod primitive InvalidURI primitive InvalidVersion primitive InvalidContentLength primitive InvalidTransferCoding primitive InvalidChunk type RequestParseError primitive NeedMore type ParseReturn primitive Chunked interface HTTP11RequestHandler class HTTP11RequestParser primitive CompareCaseInsensitive type RequestID primitive RequestIDs primitive HTTP11 primitive HTTP10 primitive HTTP09 type Version interface Request class BuildableRequest primitive MimeTypes interface Method primitive CONNECT primitive GET primitive DELETE primitive HEAD primitive OPTIONS primitive PATCH primitive POST primitive PUT primitive TRACE primitive Methods type Header class Headers interface Handler interface HandlerFactory interface HandlerWithoutContext primitive SimpleHandlerFactory","title":"Package"},{"location":"http_server--index/#public-types","text":"primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart primitive URLEncode class URL interface SyncHandler class SyncHandlerWrapper interface Status primitive StatusContinue primitive StatusSwitchingProtocols primitive StatusOK primitive StatusCreated primitive StatusAccepted primitive StatusNonAuthoritativeInfo primitive StatusNoContent primitive StatusResetContent primitive StatusPartialContent primitive StatusMultipleChoices primitive StatusMovedPermanently primitive StatusFound primitive StatusSeeOther primitive StatusNotModified primitive StatusUseProxy primitive StatusTemporaryRedirect primitive StatusBadRequest primitive StatusUnauthorized primitive StatusPaymentRequired primitive StatusForbidden primitive StatusNotFound primitive StatusMethodNotAllowed primitive StatusNotAcceptable primitive StatusProxyAuthRequired primitive StatusRequestTimeout primitive StatusConflict primitive StatusGone primitive StatusLengthRequired primitive StatusPreconditionFailed primitive StatusRequestEntityTooLarge primitive StatusRequestURITooLong primitive StatusUnsupportedMediaType primitive StatusRequestedRangeNotSatisfiable primitive StatusExpectationFailed primitive StatusTeapot primitive StatusPreconditionRequired primitive StatusTooManyRequests primitive StatusRequestHeaderFieldsTooLarge primitive StatusUnavailableForLegalReasons primitive StatusInternalServerError primitive StatusNotImplemented primitive StatusBadGateway primitive StatusServiceUnavailable primitive StatusGatewayTimeout primitive StatusHTTPVersionNotSupported primitive StatusNetworkAuthenticationRequired interface Session interface ServerNotify class ServerConfig actor Server interface Response primitive Responses interface ResponseBuilder interface ResponseBuilderHeaders interface ResponseBuilderBody class BuildableResponse primitive TooLarge primitive UnknownMethod primitive InvalidURI primitive InvalidVersion primitive InvalidContentLength primitive InvalidTransferCoding primitive InvalidChunk type RequestParseError primitive NeedMore type ParseReturn primitive Chunked interface HTTP11RequestHandler class HTTP11RequestParser primitive CompareCaseInsensitive type RequestID primitive RequestIDs primitive HTTP11 primitive HTTP10 primitive HTTP09 type Version interface Request class BuildableRequest primitive MimeTypes interface Method primitive CONNECT primitive GET primitive DELETE primitive HEAD primitive OPTIONS primitive PATCH primitive POST primitive PUT primitive TRACE primitive Methods type Header class Headers interface Handler interface HandlerFactory interface HandlerWithoutContext primitive SimpleHandlerFactory","title":"Public Types"},{"location":"http_server-BuildableRequest/","text":"BuildableRequest \u00b6 [Source] A HTTP Request that is created with trn refcap in order to be mutable, and then, when done, be consumed into a val reference. This is the way, the HTTP11RequestParser is handling this class and so should you. class val BuildableRequest is Request val Implements \u00b6 Request val Constructors \u00b6 create \u00b6 [Source] new trn create( method': Method val = reference, uri': URL val = reference, version': ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference, transfer_coding': (Chunked val | None val) = reference, content_length': (USize val | None val) = reference) : BuildableRequest trn^ Parameters \u00b6 method': Method val = reference uri': URL val = reference version': (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference transfer_coding': ( Chunked val | None val) = reference content_length': ( USize val | None val) = reference Returns \u00b6 BuildableRequest trn^ Public Functions \u00b6 method \u00b6 [Source] The Request Method. See: https://tools.ietf.org/html/rfc2616#section-5.1.1 fun box method() : Method val Returns \u00b6 Method val set_method \u00b6 [Source] fun ref set_method( method': Method val) : BuildableRequest ref Parameters \u00b6 method': Method val Returns \u00b6 BuildableRequest ref uri \u00b6 [Source] The request URI See: https://tools.ietf.org/html/rfc2616#section-5.1.2 fun box uri() : URL val Returns \u00b6 URL val set_uri \u00b6 [Source] fun ref set_uri( uri': URL val) : BuildableRequest ref Parameters \u00b6 uri': URL val Returns \u00b6 BuildableRequest ref version \u00b6 [Source] The HTTP version as given on the Request Line. See: https://tools.ietf.org/html/rfc2616#section-3.1 and https://tools.ietf.org/html/rfc2616#section-5.1 fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) set_version \u00b6 [Source] fun ref set_version( v: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : BuildableRequest ref Parameters \u00b6 v: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 BuildableRequest ref header \u00b6 [Source] Case insensitive lookup of header value in this request. Returns None if no header with name exists in this request. fun box header( name: String val) : (String val | None val) Parameters \u00b6 name: String val Returns \u00b6 ( String val | None val) headers \u00b6 [Source] fun box headers() : Iterator[(String val , String val)] ref Returns \u00b6 Iterator [( String val , String val)] ref add_header \u00b6 [Source] Add a header with name and value to this request. If a header with this name already exists, the given value will be appended to it, with a separating comma. fun ref add_header( name: String val, value: String val) : BuildableRequest ref Parameters \u00b6 name: String val value: String val Returns \u00b6 BuildableRequest ref set_header \u00b6 [Source] Set a header in this request to the given value. If a header with this name already exists, the previous value will be overwritten. fun ref set_header( name: String val, value: String val) : BuildableRequest ref Parameters \u00b6 name: String val value: String val Returns \u00b6 BuildableRequest ref clear_headers \u00b6 [Source] Remove all previously set headers from this request. fun ref clear_headers() : BuildableRequest ref Returns \u00b6 BuildableRequest ref transfer_coding \u00b6 [Source] If Chunked the request body is encoded with Chunked Transfer-Encoding: See: https://tools.ietf.org/html/rfc2616#section-3.6.1 If None , no Transfer-Encoding is applied. A Content-Encoding might be applied to the body. fun box transfer_coding() : (Chunked val | None val) Returns \u00b6 ( Chunked val | None val) set_transfer_coding \u00b6 [Source] fun ref set_transfer_coding( te: (Chunked val | None val)) : BuildableRequest ref Parameters \u00b6 te: ( Chunked val | None val) Returns \u00b6 BuildableRequest ref content_length \u00b6 [Source] The content-length of the body of the request, counted in number of bytes. If the content-length is None , the request either has no content-length set or it's transfer-encoding is Chunked : https://tools.ietf.org/html/rfc2616#section-3.6.1 fun box content_length() : (USize val | None val) Returns \u00b6 ( USize val | None val) set_content_length \u00b6 [Source] fun ref set_content_length( cl: USize val) : BuildableRequest ref Parameters \u00b6 cl: USize val Returns \u00b6 BuildableRequest ref has_body \u00b6 [Source] Returns true if either we have Chunked Transfer-Encoding or a given Content-Length. In those cases we can expect a body. fun box has_body() : Bool val Returns \u00b6 Bool val","title":"class BuildableRequest"},{"location":"http_server-BuildableRequest/#buildablerequest","text":"[Source] A HTTP Request that is created with trn refcap in order to be mutable, and then, when done, be consumed into a val reference. This is the way, the HTTP11RequestParser is handling this class and so should you. class val BuildableRequest is Request val","title":"BuildableRequest"},{"location":"http_server-BuildableRequest/#implements","text":"Request val","title":"Implements"},{"location":"http_server-BuildableRequest/#constructors","text":"","title":"Constructors"},{"location":"http_server-BuildableRequest/#create","text":"[Source] new trn create( method': Method val = reference, uri': URL val = reference, version': ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference, transfer_coding': (Chunked val | None val) = reference, content_length': (USize val | None val) = reference) : BuildableRequest trn^","title":"create"},{"location":"http_server-BuildableRequest/#parameters","text":"method': Method val = reference uri': URL val = reference version': (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference transfer_coding': ( Chunked val | None val) = reference content_length': ( USize val | None val) = reference","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns","text":"BuildableRequest trn^","title":"Returns"},{"location":"http_server-BuildableRequest/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-BuildableRequest/#method","text":"[Source] The Request Method. See: https://tools.ietf.org/html/rfc2616#section-5.1.1 fun box method() : Method val","title":"method"},{"location":"http_server-BuildableRequest/#returns_1","text":"Method val","title":"Returns"},{"location":"http_server-BuildableRequest/#set_method","text":"[Source] fun ref set_method( method': Method val) : BuildableRequest ref","title":"set_method"},{"location":"http_server-BuildableRequest/#parameters_1","text":"method': Method val","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_2","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#uri","text":"[Source] The request URI See: https://tools.ietf.org/html/rfc2616#section-5.1.2 fun box uri() : URL val","title":"uri"},{"location":"http_server-BuildableRequest/#returns_3","text":"URL val","title":"Returns"},{"location":"http_server-BuildableRequest/#set_uri","text":"[Source] fun ref set_uri( uri': URL val) : BuildableRequest ref","title":"set_uri"},{"location":"http_server-BuildableRequest/#parameters_2","text":"uri': URL val","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_4","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#version","text":"[Source] The HTTP version as given on the Request Line. See: https://tools.ietf.org/html/rfc2616#section-3.1 and https://tools.ietf.org/html/rfc2616#section-5.1 fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"version"},{"location":"http_server-BuildableRequest/#returns_5","text":"(( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Returns"},{"location":"http_server-BuildableRequest/#set_version","text":"[Source] fun ref set_version( v: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : BuildableRequest ref","title":"set_version"},{"location":"http_server-BuildableRequest/#parameters_3","text":"v: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_6","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#header","text":"[Source] Case insensitive lookup of header value in this request. Returns None if no header with name exists in this request. fun box header( name: String val) : (String val | None val)","title":"header"},{"location":"http_server-BuildableRequest/#parameters_4","text":"name: String val","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_7","text":"( String val | None val)","title":"Returns"},{"location":"http_server-BuildableRequest/#headers","text":"[Source] fun box headers() : Iterator[(String val , String val)] ref","title":"headers"},{"location":"http_server-BuildableRequest/#returns_8","text":"Iterator [( String val , String val)] ref","title":"Returns"},{"location":"http_server-BuildableRequest/#add_header","text":"[Source] Add a header with name and value to this request. If a header with this name already exists, the given value will be appended to it, with a separating comma. fun ref add_header( name: String val, value: String val) : BuildableRequest ref","title":"add_header"},{"location":"http_server-BuildableRequest/#parameters_5","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_9","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#set_header","text":"[Source] Set a header in this request to the given value. If a header with this name already exists, the previous value will be overwritten. fun ref set_header( name: String val, value: String val) : BuildableRequest ref","title":"set_header"},{"location":"http_server-BuildableRequest/#parameters_6","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_10","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#clear_headers","text":"[Source] Remove all previously set headers from this request. fun ref clear_headers() : BuildableRequest ref","title":"clear_headers"},{"location":"http_server-BuildableRequest/#returns_11","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#transfer_coding","text":"[Source] If Chunked the request body is encoded with Chunked Transfer-Encoding: See: https://tools.ietf.org/html/rfc2616#section-3.6.1 If None , no Transfer-Encoding is applied. A Content-Encoding might be applied to the body. fun box transfer_coding() : (Chunked val | None val)","title":"transfer_coding"},{"location":"http_server-BuildableRequest/#returns_12","text":"( Chunked val | None val)","title":"Returns"},{"location":"http_server-BuildableRequest/#set_transfer_coding","text":"[Source] fun ref set_transfer_coding( te: (Chunked val | None val)) : BuildableRequest ref","title":"set_transfer_coding"},{"location":"http_server-BuildableRequest/#parameters_7","text":"te: ( Chunked val | None val)","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_13","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#content_length","text":"[Source] The content-length of the body of the request, counted in number of bytes. If the content-length is None , the request either has no content-length set or it's transfer-encoding is Chunked : https://tools.ietf.org/html/rfc2616#section-3.6.1 fun box content_length() : (USize val | None val)","title":"content_length"},{"location":"http_server-BuildableRequest/#returns_14","text":"( USize val | None val)","title":"Returns"},{"location":"http_server-BuildableRequest/#set_content_length","text":"[Source] fun ref set_content_length( cl: USize val) : BuildableRequest ref","title":"set_content_length"},{"location":"http_server-BuildableRequest/#parameters_8","text":"cl: USize val","title":"Parameters"},{"location":"http_server-BuildableRequest/#returns_15","text":"BuildableRequest ref","title":"Returns"},{"location":"http_server-BuildableRequest/#has_body","text":"[Source] Returns true if either we have Chunked Transfer-Encoding or a given Content-Length. In those cases we can expect a body. fun box has_body() : Bool val","title":"has_body"},{"location":"http_server-BuildableRequest/#returns_16","text":"Bool val","title":"Returns"},{"location":"http_server-BuildableResponse/","text":"BuildableResponse \u00b6 [Source] Build your own HTTP Responses (minus the body) and turn them into immutable things to send around. This class can be serialized in the following ways: to Array[U8]: BuildableResponse.array() to ByteArrays: BuildableResponse.to_bytes() or by using it as a ByteSeqIter. This class exists if you want to use the verbose API of Session and brings lots of convenience, like getters and setters for all common properties. If you are looking for a more efficient way to build responses, use a ResponseBuilder as it is returned from Responses.builder() , this class is not introspectable and only allows adding properties the way they are put on the serialized form in the request. E.g. you must first set the status and then the headers, not the other way around. But it makes for a more efficient API. class val BuildableResponse is Response val, ByteSeqIter val Implements \u00b6 Response val ByteSeqIter val Constructors \u00b6 create \u00b6 [Source] new trn create( status': Status val = reference, version': ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference, transfer_coding': (Chunked val | None val) = reference, content_length': (USize val | None val) = reference) : BuildableResponse trn^ Parameters \u00b6 status': Status val = reference version': (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference transfer_coding': ( Chunked val | None val) = reference content_length': ( USize val | None val) = reference Returns \u00b6 BuildableResponse trn^ Public Functions \u00b6 version \u00b6 [Source] fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) set_version \u00b6 [Source] fun ref set_version( v: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : BuildableResponse ref Parameters \u00b6 v: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 BuildableResponse ref status \u00b6 [Source] fun box status() : Status val Returns \u00b6 Status val set_status \u00b6 [Source] fun ref set_status( s: Status val) : BuildableResponse ref Parameters \u00b6 s: Status val Returns \u00b6 BuildableResponse ref header \u00b6 [Source] fun box header( name: String val) : (String val | None val) Parameters \u00b6 name: String val Returns \u00b6 ( String val | None val) headers \u00b6 [Source] fun box headers() : Iterator[(String val , String val)] ref Returns \u00b6 Iterator [( String val , String val)] ref add_header \u00b6 [Source] fun ref add_header( name: String val, value: String val) : BuildableResponse ref Parameters \u00b6 name: String val value: String val Returns \u00b6 BuildableResponse ref set_header \u00b6 [Source] fun ref set_header( name: String val, value: String val) : BuildableResponse ref Parameters \u00b6 name: String val value: String val Returns \u00b6 BuildableResponse ref clear_headers \u00b6 [Source] fun ref clear_headers() : BuildableResponse ref Returns \u00b6 BuildableResponse ref transfer_coding \u00b6 [Source] fun box transfer_coding() : (Chunked val | None val) Returns \u00b6 ( Chunked val | None val) set_transfer_coding \u00b6 [Source] fun ref set_transfer_coding( c: (Chunked val | None val)) : BuildableResponse ref Parameters \u00b6 c: ( Chunked val | None val) Returns \u00b6 BuildableResponse ref content_length \u00b6 [Source] fun box content_length() : (USize val | None val) Returns \u00b6 ( USize val | None val) set_content_length \u00b6 [Source] fun ref set_content_length( cl: (USize val | None val)) : BuildableResponse ref Parameters \u00b6 cl: ( USize val | None val) Returns \u00b6 BuildableResponse ref array \u00b6 [Source] fun box array() : Array[U8 val] iso^ Returns \u00b6 Array [ U8 val] iso^ to_bytes \u00b6 [Source] fun box to_bytes() : ByteArrays val Returns \u00b6 ByteArrays val values \u00b6 [Source] Make this a very inefficient ByteSeqIter. Rather use array() if you care about performance. fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref Returns \u00b6 Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"class BuildableResponse"},{"location":"http_server-BuildableResponse/#buildableresponse","text":"[Source] Build your own HTTP Responses (minus the body) and turn them into immutable things to send around. This class can be serialized in the following ways: to Array[U8]: BuildableResponse.array() to ByteArrays: BuildableResponse.to_bytes() or by using it as a ByteSeqIter. This class exists if you want to use the verbose API of Session and brings lots of convenience, like getters and setters for all common properties. If you are looking for a more efficient way to build responses, use a ResponseBuilder as it is returned from Responses.builder() , this class is not introspectable and only allows adding properties the way they are put on the serialized form in the request. E.g. you must first set the status and then the headers, not the other way around. But it makes for a more efficient API. class val BuildableResponse is Response val, ByteSeqIter val","title":"BuildableResponse"},{"location":"http_server-BuildableResponse/#implements","text":"Response val ByteSeqIter val","title":"Implements"},{"location":"http_server-BuildableResponse/#constructors","text":"","title":"Constructors"},{"location":"http_server-BuildableResponse/#create","text":"[Source] new trn create( status': Status val = reference, version': ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference, transfer_coding': (Chunked val | None val) = reference, content_length': (USize val | None val) = reference) : BuildableResponse trn^","title":"create"},{"location":"http_server-BuildableResponse/#parameters","text":"status': Status val = reference version': (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference transfer_coding': ( Chunked val | None val) = reference content_length': ( USize val | None val) = reference","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns","text":"BuildableResponse trn^","title":"Returns"},{"location":"http_server-BuildableResponse/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-BuildableResponse/#version","text":"[Source] fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"version"},{"location":"http_server-BuildableResponse/#returns_1","text":"(( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Returns"},{"location":"http_server-BuildableResponse/#set_version","text":"[Source] fun ref set_version( v: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : BuildableResponse ref","title":"set_version"},{"location":"http_server-BuildableResponse/#parameters_1","text":"v: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_2","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#status","text":"[Source] fun box status() : Status val","title":"status"},{"location":"http_server-BuildableResponse/#returns_3","text":"Status val","title":"Returns"},{"location":"http_server-BuildableResponse/#set_status","text":"[Source] fun ref set_status( s: Status val) : BuildableResponse ref","title":"set_status"},{"location":"http_server-BuildableResponse/#parameters_2","text":"s: Status val","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_4","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#header","text":"[Source] fun box header( name: String val) : (String val | None val)","title":"header"},{"location":"http_server-BuildableResponse/#parameters_3","text":"name: String val","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_5","text":"( String val | None val)","title":"Returns"},{"location":"http_server-BuildableResponse/#headers","text":"[Source] fun box headers() : Iterator[(String val , String val)] ref","title":"headers"},{"location":"http_server-BuildableResponse/#returns_6","text":"Iterator [( String val , String val)] ref","title":"Returns"},{"location":"http_server-BuildableResponse/#add_header","text":"[Source] fun ref add_header( name: String val, value: String val) : BuildableResponse ref","title":"add_header"},{"location":"http_server-BuildableResponse/#parameters_4","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_7","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#set_header","text":"[Source] fun ref set_header( name: String val, value: String val) : BuildableResponse ref","title":"set_header"},{"location":"http_server-BuildableResponse/#parameters_5","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_8","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#clear_headers","text":"[Source] fun ref clear_headers() : BuildableResponse ref","title":"clear_headers"},{"location":"http_server-BuildableResponse/#returns_9","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#transfer_coding","text":"[Source] fun box transfer_coding() : (Chunked val | None val)","title":"transfer_coding"},{"location":"http_server-BuildableResponse/#returns_10","text":"( Chunked val | None val)","title":"Returns"},{"location":"http_server-BuildableResponse/#set_transfer_coding","text":"[Source] fun ref set_transfer_coding( c: (Chunked val | None val)) : BuildableResponse ref","title":"set_transfer_coding"},{"location":"http_server-BuildableResponse/#parameters_6","text":"c: ( Chunked val | None val)","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_11","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#content_length","text":"[Source] fun box content_length() : (USize val | None val)","title":"content_length"},{"location":"http_server-BuildableResponse/#returns_12","text":"( USize val | None val)","title":"Returns"},{"location":"http_server-BuildableResponse/#set_content_length","text":"[Source] fun ref set_content_length( cl: (USize val | None val)) : BuildableResponse ref","title":"set_content_length"},{"location":"http_server-BuildableResponse/#parameters_7","text":"cl: ( USize val | None val)","title":"Parameters"},{"location":"http_server-BuildableResponse/#returns_13","text":"BuildableResponse ref","title":"Returns"},{"location":"http_server-BuildableResponse/#array","text":"[Source] fun box array() : Array[U8 val] iso^","title":"array"},{"location":"http_server-BuildableResponse/#returns_14","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"http_server-BuildableResponse/#to_bytes","text":"[Source] fun box to_bytes() : ByteArrays val","title":"to_bytes"},{"location":"http_server-BuildableResponse/#returns_15","text":"ByteArrays val","title":"Returns"},{"location":"http_server-BuildableResponse/#values","text":"[Source] Make this a very inefficient ByteSeqIter. Rather use array() if you care about performance. fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref","title":"values"},{"location":"http_server-BuildableResponse/#returns_16","text":"Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"Returns"},{"location":"http_server-CONNECT/","text":"CONNECT \u00b6 [Source] primitive val CONNECT is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : CONNECT val^ Returns \u00b6 CONNECT val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive CONNECT"},{"location":"http_server-CONNECT/#connect","text":"[Source] primitive val CONNECT is Method val","title":"CONNECT"},{"location":"http_server-CONNECT/#implements","text":"Method val","title":"Implements"},{"location":"http_server-CONNECT/#constructors","text":"","title":"Constructors"},{"location":"http_server-CONNECT/#create","text":"[Source] new val create() : CONNECT val^","title":"create"},{"location":"http_server-CONNECT/#returns","text":"CONNECT val^","title":"Returns"},{"location":"http_server-CONNECT/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-CONNECT/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-CONNECT/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-CONNECT/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-CONNECT/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-CONNECT/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-CONNECT/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-CONNECT/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-CONNECT/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-CONNECT/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-CONNECT/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-Chunked/","text":"Chunked \u00b6 [Source] primitive val Chunked Constructors \u00b6 create \u00b6 [Source] new val create() : Chunked val^ Returns \u00b6 Chunked val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: Chunked val) : Bool val Parameters \u00b6 that: Chunked val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Chunked val) : Bool val Parameters \u00b6 that: Chunked val Returns \u00b6 Bool val","title":"primitive Chunked"},{"location":"http_server-Chunked/#chunked","text":"[Source] primitive val Chunked","title":"Chunked"},{"location":"http_server-Chunked/#constructors","text":"","title":"Constructors"},{"location":"http_server-Chunked/#create","text":"[Source] new val create() : Chunked val^","title":"create"},{"location":"http_server-Chunked/#returns","text":"Chunked val^","title":"Returns"},{"location":"http_server-Chunked/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Chunked/#eq","text":"[Source] fun box eq( that: Chunked val) : Bool val","title":"eq"},{"location":"http_server-Chunked/#parameters","text":"that: Chunked val","title":"Parameters"},{"location":"http_server-Chunked/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-Chunked/#ne","text":"[Source] fun box ne( that: Chunked val) : Bool val","title":"ne"},{"location":"http_server-Chunked/#parameters_1","text":"that: Chunked val","title":"Parameters"},{"location":"http_server-Chunked/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-CompareCaseInsensitive/","text":"CompareCaseInsensitive \u00b6 [Source] primitive val CompareCaseInsensitive Constructors \u00b6 create \u00b6 [Source] new val create() : CompareCaseInsensitive val^ Returns \u00b6 CompareCaseInsensitive val^ Public Functions \u00b6 apply \u00b6 [Source] Returns true if both strings compare equal when compared case insensitively fun box apply( left: String val, right: String val) : Bool val Parameters \u00b6 left: String val right: String val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: CompareCaseInsensitive val) : Bool val Parameters \u00b6 that: CompareCaseInsensitive val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CompareCaseInsensitive val) : Bool val Parameters \u00b6 that: CompareCaseInsensitive val Returns \u00b6 Bool val","title":"primitive CompareCaseInsensitive"},{"location":"http_server-CompareCaseInsensitive/#comparecaseinsensitive","text":"[Source] primitive val CompareCaseInsensitive","title":"CompareCaseInsensitive"},{"location":"http_server-CompareCaseInsensitive/#constructors","text":"","title":"Constructors"},{"location":"http_server-CompareCaseInsensitive/#create","text":"[Source] new val create() : CompareCaseInsensitive val^","title":"create"},{"location":"http_server-CompareCaseInsensitive/#returns","text":"CompareCaseInsensitive val^","title":"Returns"},{"location":"http_server-CompareCaseInsensitive/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-CompareCaseInsensitive/#apply","text":"[Source] Returns true if both strings compare equal when compared case insensitively fun box apply( left: String val, right: String val) : Bool val","title":"apply"},{"location":"http_server-CompareCaseInsensitive/#parameters","text":"left: String val right: String val","title":"Parameters"},{"location":"http_server-CompareCaseInsensitive/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-CompareCaseInsensitive/#eq","text":"[Source] fun box eq( that: CompareCaseInsensitive val) : Bool val","title":"eq"},{"location":"http_server-CompareCaseInsensitive/#parameters_1","text":"that: CompareCaseInsensitive val","title":"Parameters"},{"location":"http_server-CompareCaseInsensitive/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-CompareCaseInsensitive/#ne","text":"[Source] fun box ne( that: CompareCaseInsensitive val) : Bool val","title":"ne"},{"location":"http_server-CompareCaseInsensitive/#parameters_2","text":"that: CompareCaseInsensitive val","title":"Parameters"},{"location":"http_server-CompareCaseInsensitive/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-DELETE/","text":"DELETE \u00b6 [Source] primitive val DELETE is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : DELETE val^ Returns \u00b6 DELETE val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive DELETE"},{"location":"http_server-DELETE/#delete","text":"[Source] primitive val DELETE is Method val","title":"DELETE"},{"location":"http_server-DELETE/#implements","text":"Method val","title":"Implements"},{"location":"http_server-DELETE/#constructors","text":"","title":"Constructors"},{"location":"http_server-DELETE/#create","text":"[Source] new val create() : DELETE val^","title":"create"},{"location":"http_server-DELETE/#returns","text":"DELETE val^","title":"Returns"},{"location":"http_server-DELETE/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-DELETE/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-DELETE/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-DELETE/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-DELETE/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-DELETE/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-DELETE/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-DELETE/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-DELETE/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-DELETE/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-DELETE/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-GET/","text":"GET \u00b6 [Source] primitive val GET is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : GET val^ Returns \u00b6 GET val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive GET"},{"location":"http_server-GET/#get","text":"[Source] primitive val GET is Method val","title":"GET"},{"location":"http_server-GET/#implements","text":"Method val","title":"Implements"},{"location":"http_server-GET/#constructors","text":"","title":"Constructors"},{"location":"http_server-GET/#create","text":"[Source] new val create() : GET val^","title":"create"},{"location":"http_server-GET/#returns","text":"GET val^","title":"Returns"},{"location":"http_server-GET/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-GET/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-GET/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-GET/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-GET/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-GET/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-GET/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-GET/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-GET/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-GET/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-GET/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-HEAD/","text":"HEAD \u00b6 [Source] primitive val HEAD is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : HEAD val^ Returns \u00b6 HEAD val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive HEAD"},{"location":"http_server-HEAD/#head","text":"[Source] primitive val HEAD is Method val","title":"HEAD"},{"location":"http_server-HEAD/#implements","text":"Method val","title":"Implements"},{"location":"http_server-HEAD/#constructors","text":"","title":"Constructors"},{"location":"http_server-HEAD/#create","text":"[Source] new val create() : HEAD val^","title":"create"},{"location":"http_server-HEAD/#returns","text":"HEAD val^","title":"Returns"},{"location":"http_server-HEAD/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HEAD/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-HEAD/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-HEAD/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-HEAD/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-HEAD/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-HEAD/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-HEAD/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-HEAD/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-HEAD/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-HEAD/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP09/","text":"HTTP09 \u00b6 [Source] HTTP/0.9 primitive val HTTP09 is _Version val Implements \u00b6 _Version val Constructors \u00b6 create \u00b6 [Source] new val create() : HTTP09 val^ Returns \u00b6 HTTP09 val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ to_bytes \u00b6 [Source] fun box to_bytes() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( o: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val Parameters \u00b6 o: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 Bool val ne \u00b6 fun box ne( that: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val Parameters \u00b6 that: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 Bool val","title":"primitive HTTP09"},{"location":"http_server-HTTP09/#http09","text":"[Source] HTTP/0.9 primitive val HTTP09 is _Version val","title":"HTTP09"},{"location":"http_server-HTTP09/#implements","text":"_Version val","title":"Implements"},{"location":"http_server-HTTP09/#constructors","text":"","title":"Constructors"},{"location":"http_server-HTTP09/#create","text":"[Source] new val create() : HTTP09 val^","title":"create"},{"location":"http_server-HTTP09/#returns","text":"HTTP09 val^","title":"Returns"},{"location":"http_server-HTTP09/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HTTP09/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-HTTP09/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-HTTP09/#to_bytes","text":"[Source] fun box to_bytes() : Array[U8 val] val","title":"to_bytes"},{"location":"http_server-HTTP09/#returns_2","text":"Array [ U8 val] val","title":"Returns"},{"location":"http_server-HTTP09/#eq","text":"[Source] fun box eq( o: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val","title":"eq"},{"location":"http_server-HTTP09/#parameters","text":"o: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-HTTP09/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP09/#ne","text":"fun box ne( that: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val","title":"ne"},{"location":"http_server-HTTP09/#parameters_1","text":"that: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-HTTP09/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP10/","text":"HTTP10 \u00b6 [Source] HTTP/1.0 primitive val HTTP10 is _Version val Implements \u00b6 _Version val Constructors \u00b6 create \u00b6 [Source] new val create() : HTTP10 val^ Returns \u00b6 HTTP10 val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ to_bytes \u00b6 [Source] fun box to_bytes() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( o: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val Parameters \u00b6 o: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 Bool val ne \u00b6 fun box ne( that: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val Parameters \u00b6 that: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 Bool val","title":"primitive HTTP10"},{"location":"http_server-HTTP10/#http10","text":"[Source] HTTP/1.0 primitive val HTTP10 is _Version val","title":"HTTP10"},{"location":"http_server-HTTP10/#implements","text":"_Version val","title":"Implements"},{"location":"http_server-HTTP10/#constructors","text":"","title":"Constructors"},{"location":"http_server-HTTP10/#create","text":"[Source] new val create() : HTTP10 val^","title":"create"},{"location":"http_server-HTTP10/#returns","text":"HTTP10 val^","title":"Returns"},{"location":"http_server-HTTP10/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HTTP10/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-HTTP10/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-HTTP10/#to_bytes","text":"[Source] fun box to_bytes() : Array[U8 val] val","title":"to_bytes"},{"location":"http_server-HTTP10/#returns_2","text":"Array [ U8 val] val","title":"Returns"},{"location":"http_server-HTTP10/#eq","text":"[Source] fun box eq( o: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val","title":"eq"},{"location":"http_server-HTTP10/#parameters","text":"o: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-HTTP10/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP10/#ne","text":"fun box ne( that: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val","title":"ne"},{"location":"http_server-HTTP10/#parameters_1","text":"that: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-HTTP10/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP11/","text":"HTTP11 \u00b6 [Source] HTTP/1.1 primitive val HTTP11 is _Version val Implements \u00b6 _Version val Constructors \u00b6 create \u00b6 [Source] new val create() : HTTP11 val^ Returns \u00b6 HTTP11 val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ to_bytes \u00b6 [Source] fun box to_bytes() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( o: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val Parameters \u00b6 o: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 Bool val ne \u00b6 fun box ne( that: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val Parameters \u00b6 that: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 Bool val","title":"primitive HTTP11"},{"location":"http_server-HTTP11/#http11","text":"[Source] HTTP/1.1 primitive val HTTP11 is _Version val","title":"HTTP11"},{"location":"http_server-HTTP11/#implements","text":"_Version val","title":"Implements"},{"location":"http_server-HTTP11/#constructors","text":"","title":"Constructors"},{"location":"http_server-HTTP11/#create","text":"[Source] new val create() : HTTP11 val^","title":"create"},{"location":"http_server-HTTP11/#returns","text":"HTTP11 val^","title":"Returns"},{"location":"http_server-HTTP11/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HTTP11/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-HTTP11/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-HTTP11/#to_bytes","text":"[Source] fun box to_bytes() : Array[U8 val] val","title":"to_bytes"},{"location":"http_server-HTTP11/#returns_2","text":"Array [ U8 val] val","title":"Returns"},{"location":"http_server-HTTP11/#eq","text":"[Source] fun box eq( o: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val","title":"eq"},{"location":"http_server-HTTP11/#parameters","text":"o: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-HTTP11/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP11/#ne","text":"fun box ne( that: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)) : Bool val","title":"ne"},{"location":"http_server-HTTP11/#parameters_1","text":"that: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Parameters"},{"location":"http_server-HTTP11/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-HTTP11RequestHandler/","text":"HTTP11RequestHandler \u00b6 [Source] Downstream actor that is notified of parse results, be it a valid Request containing method, URL, headers and other metadata, or a specific RequestParseError . interface tag HTTP11RequestHandler","title":"interface HTTP11RequestHandler"},{"location":"http_server-HTTP11RequestHandler/#http11requesthandler","text":"[Source] Downstream actor that is notified of parse results, be it a valid Request containing method, URL, headers and other metadata, or a specific RequestParseError . interface tag HTTP11RequestHandler","title":"HTTP11RequestHandler"},{"location":"http_server-HTTP11RequestParser/","text":"HTTP11RequestParser \u00b6 [Source] class ref HTTP11RequestParser Constructors \u00b6 create \u00b6 [Source] new ref create( handler: HTTP11RequestHandler tag) : HTTP11RequestParser ref^ Parameters \u00b6 handler: HTTP11RequestHandler tag Returns \u00b6 HTTP11RequestParser ref^ Public Functions \u00b6 parse \u00b6 [Source] fun ref parse( data: Array[U8 val] val) : (NeedMore val | ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val) Parameters \u00b6 data: Array [ U8 val] val Returns \u00b6 ( NeedMore val | (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val) reset \u00b6 [Source] fun ref reset( drop_data: Bool val = false, reset_request: Bool val = false) : None val Parameters \u00b6 drop_data: Bool val = false reset_request: Bool val = false Returns \u00b6 None val","title":"class HTTP11RequestParser"},{"location":"http_server-HTTP11RequestParser/#http11requestparser","text":"[Source] class ref HTTP11RequestParser","title":"HTTP11RequestParser"},{"location":"http_server-HTTP11RequestParser/#constructors","text":"","title":"Constructors"},{"location":"http_server-HTTP11RequestParser/#create","text":"[Source] new ref create( handler: HTTP11RequestHandler tag) : HTTP11RequestParser ref^","title":"create"},{"location":"http_server-HTTP11RequestParser/#parameters","text":"handler: HTTP11RequestHandler tag","title":"Parameters"},{"location":"http_server-HTTP11RequestParser/#returns","text":"HTTP11RequestParser ref^","title":"Returns"},{"location":"http_server-HTTP11RequestParser/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HTTP11RequestParser/#parse","text":"[Source] fun ref parse( data: Array[U8 val] val) : (NeedMore val | ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val)","title":"parse"},{"location":"http_server-HTTP11RequestParser/#parameters_1","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"http_server-HTTP11RequestParser/#returns_1","text":"( NeedMore val | (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val)","title":"Returns"},{"location":"http_server-HTTP11RequestParser/#reset","text":"[Source] fun ref reset( drop_data: Bool val = false, reset_request: Bool val = false) : None val","title":"reset"},{"location":"http_server-HTTP11RequestParser/#parameters_2","text":"drop_data: Bool val = false reset_request: Bool val = false","title":"Parameters"},{"location":"http_server-HTTP11RequestParser/#returns_2","text":"None val","title":"Returns"},{"location":"http_server-Handler/","text":"Handler \u00b6 [Source] This is the interface through which HTTP requests are delivered to application code and through which HTTP responses are sent to the underlying connection. Instances of a Handler are executed in the context of the Session actor so most of them should be passing data on to a processing actor. Each Session must have a unique instance of the handler. The application code does not necessarily know when an Session is created, so the application must provide an instance of HandlerFactory that will be called at the appropriate time. Receiving Requests \u00b6 When an Request is received on an Session actor, the corresponding Handler.apply method is called with the request and a RequestID . The Request contains the information extracted from HTTP Headers and the Request Line, but it does not contain any body data. It is sent to Handler.apply before the body is fully received. If the request has a body, its raw data is sent to the Handler.chunk method together with the RequestID of the request it belongs to. Once all body data is received, Handler.finished is called with the RequestID of the request it belongs to. Now is the time to act on the full body data, if it hasn't been processed yet. The RequestID must be kept around for sending the response for this request. This way the session can ensure, all responses are sent in the same order as they have been received, which is required for HTTP pipelining. This way processing responses can be passed to other actors and processing can take arbitrary times. The Session will take care of sending the responses in the correct order. It is guaranteed that the call sequence is always: exactly once: apply(request_n, requestid_n) zero or more times: chunk(data, requestid_n) exactly once: finished(requestid_n) And so on for requestid_(n + 1) . Only after finished has been called for a RequestID , the next request will be received by the Handler instance, there will be no interleaving. So it is save to keep state for the given request in a Handler between calls to apply and finished . Failures and Cancelling \u00b6 If a Session experienced faulty requests, the Handler is notified via Handler.failed . If the underlying connection to a Session has been closed, the Handler is notified via Handler.closed . Sending Responses \u00b6 A handler is instantiated using a HandlerFactory , which passes an instance of Session to be used in constructing a handler. A Session is required to be able to send responses. See the docs for Session for ways to send responses. Example Handler: use \"http\" use \"valbytes\" class MyHandler is Handler let _session: Session var _path: String = \"\" var _body: ByteArrays = ByteArrays new create(session: Session) => _session = session fun ref apply(request: Request val, request_id: RequestID): Any => _path = request.uri().path fun ref chunk(data: ByteSeq val, request_id: RequestID) => _body = _body + data fun ref finished(request_id: RequestID) => _session.send_raw( Responses.builder() .set_status(StatusOk) .add_header(\"Content-Length\", (_body.size() + _path.size() + 13).string()) .add_header(\"Content-Type\", \"text/plain\") .finish_headers() .add_chunk(\"received \") .add_chunk((_body = ByteArrays).array()) .add_chunk(\" at \") .add_chunk(_path) .build(), request_id ) _session.send_finished(request_id) interface ref Handler Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( request: Request val, request_id: USize val) : Any tag Parameters \u00b6 request: Request val request_id: USize val Returns \u00b6 Any tag chunk \u00b6 [Source] Notification of incoming body data. The body belongs to the most recent Request delivered by an apply notification. fun ref chunk( data: (String val | Array[U8 val] val), request_id: USize val) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) request_id: USize val Returns \u00b6 None val finished \u00b6 [Source] Notification that no more body chunks are coming. Delivery of this HTTP message is complete. fun ref finished( request_id: USize val) : None val Parameters \u00b6 request_id: USize val Returns \u00b6 None val cancelled \u00b6 [Source] Notification that sending a response has been cancelled locally, e.g. by closing the server or manually cancelling a single request. fun ref cancelled( request_id: USize val) : None val Parameters \u00b6 request_id: USize val Returns \u00b6 None val failed \u00b6 [Source] Notification about failure parsing HTTP requests. fun ref failed( reason: ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val), request_id: USize val) : None val Parameters \u00b6 reason: (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) request_id: USize val Returns \u00b6 None val closed \u00b6 [Source] Notification that the underlying connection has been closed. fun ref closed() : None val Returns \u00b6 None val throttled \u00b6 [Source] Notification that the session temporarily can not accept more data. fun ref throttled() : None val Returns \u00b6 None val unthrottled \u00b6 [Source] Notification that the session can resume accepting data. fun ref unthrottled() : None val Returns \u00b6 None val","title":"interface Handler"},{"location":"http_server-Handler/#handler","text":"[Source] This is the interface through which HTTP requests are delivered to application code and through which HTTP responses are sent to the underlying connection. Instances of a Handler are executed in the context of the Session actor so most of them should be passing data on to a processing actor. Each Session must have a unique instance of the handler. The application code does not necessarily know when an Session is created, so the application must provide an instance of HandlerFactory that will be called at the appropriate time.","title":"Handler"},{"location":"http_server-Handler/#receiving-requests","text":"When an Request is received on an Session actor, the corresponding Handler.apply method is called with the request and a RequestID . The Request contains the information extracted from HTTP Headers and the Request Line, but it does not contain any body data. It is sent to Handler.apply before the body is fully received. If the request has a body, its raw data is sent to the Handler.chunk method together with the RequestID of the request it belongs to. Once all body data is received, Handler.finished is called with the RequestID of the request it belongs to. Now is the time to act on the full body data, if it hasn't been processed yet. The RequestID must be kept around for sending the response for this request. This way the session can ensure, all responses are sent in the same order as they have been received, which is required for HTTP pipelining. This way processing responses can be passed to other actors and processing can take arbitrary times. The Session will take care of sending the responses in the correct order. It is guaranteed that the call sequence is always: exactly once: apply(request_n, requestid_n) zero or more times: chunk(data, requestid_n) exactly once: finished(requestid_n) And so on for requestid_(n + 1) . Only after finished has been called for a RequestID , the next request will be received by the Handler instance, there will be no interleaving. So it is save to keep state for the given request in a Handler between calls to apply and finished .","title":"Receiving Requests"},{"location":"http_server-Handler/#failures-and-cancelling","text":"If a Session experienced faulty requests, the Handler is notified via Handler.failed . If the underlying connection to a Session has been closed, the Handler is notified via Handler.closed .","title":"Failures and Cancelling"},{"location":"http_server-Handler/#sending-responses","text":"A handler is instantiated using a HandlerFactory , which passes an instance of Session to be used in constructing a handler. A Session is required to be able to send responses. See the docs for Session for ways to send responses. Example Handler: use \"http\" use \"valbytes\" class MyHandler is Handler let _session: Session var _path: String = \"\" var _body: ByteArrays = ByteArrays new create(session: Session) => _session = session fun ref apply(request: Request val, request_id: RequestID): Any => _path = request.uri().path fun ref chunk(data: ByteSeq val, request_id: RequestID) => _body = _body + data fun ref finished(request_id: RequestID) => _session.send_raw( Responses.builder() .set_status(StatusOk) .add_header(\"Content-Length\", (_body.size() + _path.size() + 13).string()) .add_header(\"Content-Type\", \"text/plain\") .finish_headers() .add_chunk(\"received \") .add_chunk((_body = ByteArrays).array()) .add_chunk(\" at \") .add_chunk(_path) .build(), request_id ) _session.send_finished(request_id) interface ref Handler","title":"Sending Responses"},{"location":"http_server-Handler/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Handler/#apply","text":"[Source] fun ref apply( request: Request val, request_id: USize val) : Any tag","title":"apply"},{"location":"http_server-Handler/#parameters","text":"request: Request val request_id: USize val","title":"Parameters"},{"location":"http_server-Handler/#returns","text":"Any tag","title":"Returns"},{"location":"http_server-Handler/#chunk","text":"[Source] Notification of incoming body data. The body belongs to the most recent Request delivered by an apply notification. fun ref chunk( data: (String val | Array[U8 val] val), request_id: USize val) : None val","title":"chunk"},{"location":"http_server-Handler/#parameters_1","text":"data: ( String val | Array [ U8 val] val) request_id: USize val","title":"Parameters"},{"location":"http_server-Handler/#returns_1","text":"None val","title":"Returns"},{"location":"http_server-Handler/#finished","text":"[Source] Notification that no more body chunks are coming. Delivery of this HTTP message is complete. fun ref finished( request_id: USize val) : None val","title":"finished"},{"location":"http_server-Handler/#parameters_2","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-Handler/#returns_2","text":"None val","title":"Returns"},{"location":"http_server-Handler/#cancelled","text":"[Source] Notification that sending a response has been cancelled locally, e.g. by closing the server or manually cancelling a single request. fun ref cancelled( request_id: USize val) : None val","title":"cancelled"},{"location":"http_server-Handler/#parameters_3","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-Handler/#returns_3","text":"None val","title":"Returns"},{"location":"http_server-Handler/#failed","text":"[Source] Notification about failure parsing HTTP requests. fun ref failed( reason: ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val), request_id: USize val) : None val","title":"failed"},{"location":"http_server-Handler/#parameters_4","text":"reason: (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) request_id: USize val","title":"Parameters"},{"location":"http_server-Handler/#returns_4","text":"None val","title":"Returns"},{"location":"http_server-Handler/#closed","text":"[Source] Notification that the underlying connection has been closed. fun ref closed() : None val","title":"closed"},{"location":"http_server-Handler/#returns_5","text":"None val","title":"Returns"},{"location":"http_server-Handler/#throttled","text":"[Source] Notification that the session temporarily can not accept more data. fun ref throttled() : None val","title":"throttled"},{"location":"http_server-Handler/#returns_6","text":"None val","title":"Returns"},{"location":"http_server-Handler/#unthrottled","text":"[Source] Notification that the session can resume accepting data. fun ref unthrottled() : None val","title":"unthrottled"},{"location":"http_server-Handler/#returns_7","text":"None val","title":"Returns"},{"location":"http_server-HandlerFactory/","text":"HandlerFactory \u00b6 [Source] The TCP connections that underlie HTTP sessions get created within the http package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a class that implements this interface. The HandlerFactory.apply method will be called when a new Session is created, giving the application a chance to create an instance of its own Handler . This happens on both client and server ends. interface ref HandlerFactory Public Functions \u00b6 apply \u00b6 [Source] Called by the Session when it needs a new instance of the application's Handler . It is suggested that the session value be passed to the constructor for the new Handler , you will need it for sending stuff back. This part must be implemented, as there might be more paramaters that need to be passed for creating a Handler. fun box apply( session: Session tag) : Handler ref^ Parameters \u00b6 session: Session tag Returns \u00b6 Handler ref^","title":"interface HandlerFactory"},{"location":"http_server-HandlerFactory/#handlerfactory","text":"[Source] The TCP connections that underlie HTTP sessions get created within the http package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a class that implements this interface. The HandlerFactory.apply method will be called when a new Session is created, giving the application a chance to create an instance of its own Handler . This happens on both client and server ends. interface ref HandlerFactory","title":"HandlerFactory"},{"location":"http_server-HandlerFactory/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HandlerFactory/#apply","text":"[Source] Called by the Session when it needs a new instance of the application's Handler . It is suggested that the session value be passed to the constructor for the new Handler , you will need it for sending stuff back. This part must be implemented, as there might be more paramaters that need to be passed for creating a Handler. fun box apply( session: Session tag) : Handler ref^","title":"apply"},{"location":"http_server-HandlerFactory/#parameters","text":"session: Session tag","title":"Parameters"},{"location":"http_server-HandlerFactory/#returns","text":"Handler ref^","title":"Returns"},{"location":"http_server-HandlerWithoutContext/","text":"HandlerWithoutContext \u00b6 [Source] Simple Handler that can be constructed with only a Session. interface ref HandlerWithoutContext is Handler ref Implements \u00b6 Handler ref Constructors \u00b6 create \u00b6 [Source] new ref create( session: Session tag) : HandlerWithoutContext ref^ Parameters \u00b6 session: Session tag Returns \u00b6 HandlerWithoutContext ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( request: Request val, request_id: USize val) : Any tag Parameters \u00b6 request: Request val request_id: USize val Returns \u00b6 Any tag chunk \u00b6 [Source] fun ref chunk( data: (String val | Array[U8 val] val), request_id: USize val) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) request_id: USize val Returns \u00b6 None val finished \u00b6 [Source] fun ref finished( request_id: USize val) : None val Parameters \u00b6 request_id: USize val Returns \u00b6 None val cancelled \u00b6 [Source] fun ref cancelled( request_id: USize val) : None val Parameters \u00b6 request_id: USize val Returns \u00b6 None val failed \u00b6 [Source] fun ref failed( reason: ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val), request_id: USize val) : None val Parameters \u00b6 reason: (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) request_id: USize val Returns \u00b6 None val closed \u00b6 [Source] fun ref closed() : None val Returns \u00b6 None val throttled \u00b6 [Source] fun ref throttled() : None val Returns \u00b6 None val unthrottled \u00b6 [Source] fun ref unthrottled() : None val Returns \u00b6 None val","title":"interface HandlerWithoutContext"},{"location":"http_server-HandlerWithoutContext/#handlerwithoutcontext","text":"[Source] Simple Handler that can be constructed with only a Session. interface ref HandlerWithoutContext is Handler ref","title":"HandlerWithoutContext"},{"location":"http_server-HandlerWithoutContext/#implements","text":"Handler ref","title":"Implements"},{"location":"http_server-HandlerWithoutContext/#constructors","text":"","title":"Constructors"},{"location":"http_server-HandlerWithoutContext/#create","text":"[Source] new ref create( session: Session tag) : HandlerWithoutContext ref^","title":"create"},{"location":"http_server-HandlerWithoutContext/#parameters","text":"session: Session tag","title":"Parameters"},{"location":"http_server-HandlerWithoutContext/#returns","text":"HandlerWithoutContext ref^","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-HandlerWithoutContext/#apply","text":"[Source] fun ref apply( request: Request val, request_id: USize val) : Any tag","title":"apply"},{"location":"http_server-HandlerWithoutContext/#parameters_1","text":"request: Request val request_id: USize val","title":"Parameters"},{"location":"http_server-HandlerWithoutContext/#returns_1","text":"Any tag","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#chunk","text":"[Source] fun ref chunk( data: (String val | Array[U8 val] val), request_id: USize val) : None val","title":"chunk"},{"location":"http_server-HandlerWithoutContext/#parameters_2","text":"data: ( String val | Array [ U8 val] val) request_id: USize val","title":"Parameters"},{"location":"http_server-HandlerWithoutContext/#returns_2","text":"None val","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#finished","text":"[Source] fun ref finished( request_id: USize val) : None val","title":"finished"},{"location":"http_server-HandlerWithoutContext/#parameters_3","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-HandlerWithoutContext/#returns_3","text":"None val","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#cancelled","text":"[Source] fun ref cancelled( request_id: USize val) : None val","title":"cancelled"},{"location":"http_server-HandlerWithoutContext/#parameters_4","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-HandlerWithoutContext/#returns_4","text":"None val","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#failed","text":"[Source] fun ref failed( reason: ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val), request_id: USize val) : None val","title":"failed"},{"location":"http_server-HandlerWithoutContext/#parameters_5","text":"reason: (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) request_id: USize val","title":"Parameters"},{"location":"http_server-HandlerWithoutContext/#returns_5","text":"None val","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#closed","text":"[Source] fun ref closed() : None val","title":"closed"},{"location":"http_server-HandlerWithoutContext/#returns_6","text":"None val","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#throttled","text":"[Source] fun ref throttled() : None val","title":"throttled"},{"location":"http_server-HandlerWithoutContext/#returns_7","text":"None val","title":"Returns"},{"location":"http_server-HandlerWithoutContext/#unthrottled","text":"[Source] fun ref unthrottled() : None val","title":"unthrottled"},{"location":"http_server-HandlerWithoutContext/#returns_8","text":"None val","title":"Returns"},{"location":"http_server-Header/","text":"Header \u00b6 [Source] Defining a HTTP header as Tuple Strings for name and value. type Header is (String val , String val) Type Alias For \u00b6 ( String val , String val)","title":"type Header"},{"location":"http_server-Header/#header","text":"[Source] Defining a HTTP header as Tuple Strings for name and value. type Header is (String val , String val)","title":"Header"},{"location":"http_server-Header/#type-alias-for","text":"( String val , String val)","title":"Type Alias For"},{"location":"http_server-Headers/","text":"Headers \u00b6 [Source] Collection for headers based on a sorted array we use bisect to insert and get values. We compare the strings case-insensitive when sorting, inserting and getting headers. We want to use the bytes we get to build the headers as is without changing them, in order to avoid allocation. This isn't using a hashmap because getting the hash in a case-insensitive manner would require to iterate over single bytes, which isn't as fast as it could be. Also the amount of headers in a request is usually small, so the penalty of doing a binary search isn't as bad. Getting a header is case insensitive, so you don't need to care about header name casing when asking for a header. Usage \u00b6 let headers = Headers header.set(\"Connection\", \"Close\") // setting a header, possibly overwriting previous values header.add(\"Multiple\", \"1\") // adding a header, concatenating previous and this value with a comma. header.add(\"Multiple\", \"2\") // getting a header is case-insensitive match header.get(\"cOnNeCTiOn\") | let value: String => // do something with value else // not found end // iterating over headers for (name, value) in headers.values() do env.out.print(name + \": \" + value) end // remove all headers from this structure headers.clear() class ref Headers Constructors \u00b6 create \u00b6 [Source] new ref create() : Headers ref^ Returns \u00b6 Headers ref^ from_map \u00b6 [Source] new ref from_map( headers: HashMap[String val, String val, HashEq[String val] val] ref) : Headers ref^ Parameters \u00b6 headers: HashMap [ String val, String val, HashEq [ String val] val] ref Returns \u00b6 Headers ref^ from_seq \u00b6 [Source] new ref from_seq( headers: ReadSeq[(String val , String val)] box) : Headers ref^ Parameters \u00b6 headers: ReadSeq [( String val , String val)] box Returns \u00b6 Headers ref^ from_iter \u00b6 [Source] new ref from_iter( headers: Iterator[(String val , String val)] ref, size: USize val = 4) : Headers ref^ Parameters \u00b6 headers: Iterator [( String val , String val)] ref size: USize val = 4 Returns \u00b6 Headers ref^ Public Functions \u00b6 set \u00b6 [Source] if a header with name already exists, its value will be overriden with this value. fun ref set( name: String val, value: String val) : None val Parameters \u00b6 name: String val value: String val Returns \u00b6 None val add \u00b6 [Source] If a header with this name already exists, value will be appended after a separating comma. fun ref add( name: String val, value: String val) : None val Parameters \u00b6 name: String val value: String val Returns \u00b6 None val get \u00b6 [Source] fun box get( name: String val) : (String val | None val) Parameters \u00b6 name: String val Returns \u00b6 ( String val | None val) clear \u00b6 [Source] fun ref clear() : None val Returns \u00b6 None val values \u00b6 [Source] fun box values() : Iterator[(String val , String val)] ref Returns \u00b6 Iterator [( String val , String val)] ref byte_size \u00b6 [Source] size of the given headers including header-separator and crlf. fun box byte_size() : USize val Returns \u00b6 USize val","title":"class Headers"},{"location":"http_server-Headers/#headers","text":"[Source] Collection for headers based on a sorted array we use bisect to insert and get values. We compare the strings case-insensitive when sorting, inserting and getting headers. We want to use the bytes we get to build the headers as is without changing them, in order to avoid allocation. This isn't using a hashmap because getting the hash in a case-insensitive manner would require to iterate over single bytes, which isn't as fast as it could be. Also the amount of headers in a request is usually small, so the penalty of doing a binary search isn't as bad. Getting a header is case insensitive, so you don't need to care about header name casing when asking for a header.","title":"Headers"},{"location":"http_server-Headers/#usage","text":"let headers = Headers header.set(\"Connection\", \"Close\") // setting a header, possibly overwriting previous values header.add(\"Multiple\", \"1\") // adding a header, concatenating previous and this value with a comma. header.add(\"Multiple\", \"2\") // getting a header is case-insensitive match header.get(\"cOnNeCTiOn\") | let value: String => // do something with value else // not found end // iterating over headers for (name, value) in headers.values() do env.out.print(name + \": \" + value) end // remove all headers from this structure headers.clear() class ref Headers","title":"Usage"},{"location":"http_server-Headers/#constructors","text":"","title":"Constructors"},{"location":"http_server-Headers/#create","text":"[Source] new ref create() : Headers ref^","title":"create"},{"location":"http_server-Headers/#returns","text":"Headers ref^","title":"Returns"},{"location":"http_server-Headers/#from_map","text":"[Source] new ref from_map( headers: HashMap[String val, String val, HashEq[String val] val] ref) : Headers ref^","title":"from_map"},{"location":"http_server-Headers/#parameters","text":"headers: HashMap [ String val, String val, HashEq [ String val] val] ref","title":"Parameters"},{"location":"http_server-Headers/#returns_1","text":"Headers ref^","title":"Returns"},{"location":"http_server-Headers/#from_seq","text":"[Source] new ref from_seq( headers: ReadSeq[(String val , String val)] box) : Headers ref^","title":"from_seq"},{"location":"http_server-Headers/#parameters_1","text":"headers: ReadSeq [( String val , String val)] box","title":"Parameters"},{"location":"http_server-Headers/#returns_2","text":"Headers ref^","title":"Returns"},{"location":"http_server-Headers/#from_iter","text":"[Source] new ref from_iter( headers: Iterator[(String val , String val)] ref, size: USize val = 4) : Headers ref^","title":"from_iter"},{"location":"http_server-Headers/#parameters_2","text":"headers: Iterator [( String val , String val)] ref size: USize val = 4","title":"Parameters"},{"location":"http_server-Headers/#returns_3","text":"Headers ref^","title":"Returns"},{"location":"http_server-Headers/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Headers/#set","text":"[Source] if a header with name already exists, its value will be overriden with this value. fun ref set( name: String val, value: String val) : None val","title":"set"},{"location":"http_server-Headers/#parameters_3","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-Headers/#returns_4","text":"None val","title":"Returns"},{"location":"http_server-Headers/#add","text":"[Source] If a header with this name already exists, value will be appended after a separating comma. fun ref add( name: String val, value: String val) : None val","title":"add"},{"location":"http_server-Headers/#parameters_4","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-Headers/#returns_5","text":"None val","title":"Returns"},{"location":"http_server-Headers/#get","text":"[Source] fun box get( name: String val) : (String val | None val)","title":"get"},{"location":"http_server-Headers/#parameters_5","text":"name: String val","title":"Parameters"},{"location":"http_server-Headers/#returns_6","text":"( String val | None val)","title":"Returns"},{"location":"http_server-Headers/#clear","text":"[Source] fun ref clear() : None val","title":"clear"},{"location":"http_server-Headers/#returns_7","text":"None val","title":"Returns"},{"location":"http_server-Headers/#values","text":"[Source] fun box values() : Iterator[(String val , String val)] ref","title":"values"},{"location":"http_server-Headers/#returns_8","text":"Iterator [( String val , String val)] ref","title":"Returns"},{"location":"http_server-Headers/#byte_size","text":"[Source] size of the given headers including header-separator and crlf. fun box byte_size() : USize val","title":"byte_size"},{"location":"http_server-Headers/#returns_9","text":"USize val","title":"Returns"},{"location":"http_server-InvalidChunk/","text":"InvalidChunk \u00b6 [Source] primitive val InvalidChunk is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : InvalidChunk val^ Returns \u00b6 InvalidChunk val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: InvalidChunk val) : Bool val Parameters \u00b6 that: InvalidChunk val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InvalidChunk val) : Bool val Parameters \u00b6 that: InvalidChunk val Returns \u00b6 Bool val","title":"primitive InvalidChunk"},{"location":"http_server-InvalidChunk/#invalidchunk","text":"[Source] primitive val InvalidChunk is _RequestParseError val","title":"InvalidChunk"},{"location":"http_server-InvalidChunk/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-InvalidChunk/#constructors","text":"","title":"Constructors"},{"location":"http_server-InvalidChunk/#create","text":"[Source] new val create() : InvalidChunk val^","title":"create"},{"location":"http_server-InvalidChunk/#returns","text":"InvalidChunk val^","title":"Returns"},{"location":"http_server-InvalidChunk/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-InvalidChunk/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-InvalidChunk/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-InvalidChunk/#eq","text":"[Source] fun box eq( that: InvalidChunk val) : Bool val","title":"eq"},{"location":"http_server-InvalidChunk/#parameters","text":"that: InvalidChunk val","title":"Parameters"},{"location":"http_server-InvalidChunk/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidChunk/#ne","text":"[Source] fun box ne( that: InvalidChunk val) : Bool val","title":"ne"},{"location":"http_server-InvalidChunk/#parameters_1","text":"that: InvalidChunk val","title":"Parameters"},{"location":"http_server-InvalidChunk/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidContentLength/","text":"InvalidContentLength \u00b6 [Source] primitive val InvalidContentLength is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : InvalidContentLength val^ Returns \u00b6 InvalidContentLength val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: InvalidContentLength val) : Bool val Parameters \u00b6 that: InvalidContentLength val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InvalidContentLength val) : Bool val Parameters \u00b6 that: InvalidContentLength val Returns \u00b6 Bool val","title":"primitive InvalidContentLength"},{"location":"http_server-InvalidContentLength/#invalidcontentlength","text":"[Source] primitive val InvalidContentLength is _RequestParseError val","title":"InvalidContentLength"},{"location":"http_server-InvalidContentLength/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-InvalidContentLength/#constructors","text":"","title":"Constructors"},{"location":"http_server-InvalidContentLength/#create","text":"[Source] new val create() : InvalidContentLength val^","title":"create"},{"location":"http_server-InvalidContentLength/#returns","text":"InvalidContentLength val^","title":"Returns"},{"location":"http_server-InvalidContentLength/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-InvalidContentLength/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-InvalidContentLength/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-InvalidContentLength/#eq","text":"[Source] fun box eq( that: InvalidContentLength val) : Bool val","title":"eq"},{"location":"http_server-InvalidContentLength/#parameters","text":"that: InvalidContentLength val","title":"Parameters"},{"location":"http_server-InvalidContentLength/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidContentLength/#ne","text":"[Source] fun box ne( that: InvalidContentLength val) : Bool val","title":"ne"},{"location":"http_server-InvalidContentLength/#parameters_1","text":"that: InvalidContentLength val","title":"Parameters"},{"location":"http_server-InvalidContentLength/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidTransferCoding/","text":"InvalidTransferCoding \u00b6 [Source] primitive val InvalidTransferCoding is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : InvalidTransferCoding val^ Returns \u00b6 InvalidTransferCoding val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: InvalidTransferCoding val) : Bool val Parameters \u00b6 that: InvalidTransferCoding val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InvalidTransferCoding val) : Bool val Parameters \u00b6 that: InvalidTransferCoding val Returns \u00b6 Bool val","title":"primitive InvalidTransferCoding"},{"location":"http_server-InvalidTransferCoding/#invalidtransfercoding","text":"[Source] primitive val InvalidTransferCoding is _RequestParseError val","title":"InvalidTransferCoding"},{"location":"http_server-InvalidTransferCoding/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-InvalidTransferCoding/#constructors","text":"","title":"Constructors"},{"location":"http_server-InvalidTransferCoding/#create","text":"[Source] new val create() : InvalidTransferCoding val^","title":"create"},{"location":"http_server-InvalidTransferCoding/#returns","text":"InvalidTransferCoding val^","title":"Returns"},{"location":"http_server-InvalidTransferCoding/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-InvalidTransferCoding/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-InvalidTransferCoding/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-InvalidTransferCoding/#eq","text":"[Source] fun box eq( that: InvalidTransferCoding val) : Bool val","title":"eq"},{"location":"http_server-InvalidTransferCoding/#parameters","text":"that: InvalidTransferCoding val","title":"Parameters"},{"location":"http_server-InvalidTransferCoding/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidTransferCoding/#ne","text":"[Source] fun box ne( that: InvalidTransferCoding val) : Bool val","title":"ne"},{"location":"http_server-InvalidTransferCoding/#parameters_1","text":"that: InvalidTransferCoding val","title":"Parameters"},{"location":"http_server-InvalidTransferCoding/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidURI/","text":"InvalidURI \u00b6 [Source] primitive val InvalidURI is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : InvalidURI val^ Returns \u00b6 InvalidURI val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: InvalidURI val) : Bool val Parameters \u00b6 that: InvalidURI val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InvalidURI val) : Bool val Parameters \u00b6 that: InvalidURI val Returns \u00b6 Bool val","title":"primitive InvalidURI"},{"location":"http_server-InvalidURI/#invaliduri","text":"[Source] primitive val InvalidURI is _RequestParseError val","title":"InvalidURI"},{"location":"http_server-InvalidURI/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-InvalidURI/#constructors","text":"","title":"Constructors"},{"location":"http_server-InvalidURI/#create","text":"[Source] new val create() : InvalidURI val^","title":"create"},{"location":"http_server-InvalidURI/#returns","text":"InvalidURI val^","title":"Returns"},{"location":"http_server-InvalidURI/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-InvalidURI/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-InvalidURI/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-InvalidURI/#eq","text":"[Source] fun box eq( that: InvalidURI val) : Bool val","title":"eq"},{"location":"http_server-InvalidURI/#parameters","text":"that: InvalidURI val","title":"Parameters"},{"location":"http_server-InvalidURI/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidURI/#ne","text":"[Source] fun box ne( that: InvalidURI val) : Bool val","title":"ne"},{"location":"http_server-InvalidURI/#parameters_1","text":"that: InvalidURI val","title":"Parameters"},{"location":"http_server-InvalidURI/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidVersion/","text":"InvalidVersion \u00b6 [Source] primitive val InvalidVersion is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : InvalidVersion val^ Returns \u00b6 InvalidVersion val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: InvalidVersion val) : Bool val Parameters \u00b6 that: InvalidVersion val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InvalidVersion val) : Bool val Parameters \u00b6 that: InvalidVersion val Returns \u00b6 Bool val","title":"primitive InvalidVersion"},{"location":"http_server-InvalidVersion/#invalidversion","text":"[Source] primitive val InvalidVersion is _RequestParseError val","title":"InvalidVersion"},{"location":"http_server-InvalidVersion/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-InvalidVersion/#constructors","text":"","title":"Constructors"},{"location":"http_server-InvalidVersion/#create","text":"[Source] new val create() : InvalidVersion val^","title":"create"},{"location":"http_server-InvalidVersion/#returns","text":"InvalidVersion val^","title":"Returns"},{"location":"http_server-InvalidVersion/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-InvalidVersion/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-InvalidVersion/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-InvalidVersion/#eq","text":"[Source] fun box eq( that: InvalidVersion val) : Bool val","title":"eq"},{"location":"http_server-InvalidVersion/#parameters","text":"that: InvalidVersion val","title":"Parameters"},{"location":"http_server-InvalidVersion/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-InvalidVersion/#ne","text":"[Source] fun box ne( that: InvalidVersion val) : Bool val","title":"ne"},{"location":"http_server-InvalidVersion/#parameters_1","text":"that: InvalidVersion val","title":"Parameters"},{"location":"http_server-InvalidVersion/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-Method/","text":"Method \u00b6 [Source] HTTP method See: https://tools.ietf.org/html/rfc2616#section-5.1.1 interface val Method is Equatable[Method val] ref, Stringable box Implements \u00b6 Equatable [ Method val] ref Stringable box Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"interface Method"},{"location":"http_server-Method/#method","text":"[Source] HTTP method See: https://tools.ietf.org/html/rfc2616#section-5.1.1 interface val Method is Equatable[Method val] ref, Stringable box","title":"Method"},{"location":"http_server-Method/#implements","text":"Equatable [ Method val] ref Stringable box","title":"Implements"},{"location":"http_server-Method/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Method/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-Method/#returns","text":"String val","title":"Returns"},{"location":"http_server-Method/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-Method/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-Method/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-Method/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-Method/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-Method/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-Method/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-Method/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-Methods/","text":"Methods \u00b6 [Source] primitive val Methods Constructors \u00b6 create \u00b6 [Source] new val create() : Methods val^ Returns \u00b6 Methods val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( maybe_method: ReadSeq[U8 val] box) : (Method val | None val) Parameters \u00b6 maybe_method: ReadSeq [ U8 val] box Returns \u00b6 ( Method val | None val) eq \u00b6 [Source] fun box eq( that: Methods val) : Bool val Parameters \u00b6 that: Methods val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Methods val) : Bool val Parameters \u00b6 that: Methods val Returns \u00b6 Bool val","title":"primitive Methods"},{"location":"http_server-Methods/#methods","text":"[Source] primitive val Methods","title":"Methods"},{"location":"http_server-Methods/#constructors","text":"","title":"Constructors"},{"location":"http_server-Methods/#create","text":"[Source] new val create() : Methods val^","title":"create"},{"location":"http_server-Methods/#returns","text":"Methods val^","title":"Returns"},{"location":"http_server-Methods/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Methods/#parse","text":"[Source] fun box parse( maybe_method: ReadSeq[U8 val] box) : (Method val | None val)","title":"parse"},{"location":"http_server-Methods/#parameters","text":"maybe_method: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"http_server-Methods/#returns_1","text":"( Method val | None val)","title":"Returns"},{"location":"http_server-Methods/#eq","text":"[Source] fun box eq( that: Methods val) : Bool val","title":"eq"},{"location":"http_server-Methods/#parameters_1","text":"that: Methods val","title":"Parameters"},{"location":"http_server-Methods/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-Methods/#ne","text":"[Source] fun box ne( that: Methods val) : Bool val","title":"ne"},{"location":"http_server-Methods/#parameters_2","text":"that: Methods val","title":"Parameters"},{"location":"http_server-Methods/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-MimeTypes/","text":"MimeTypes \u00b6 [Source] Provide mapping from file names to MIME types. TODO load from /etc/mime.types primitive val MimeTypes Constructors \u00b6 create \u00b6 [Source] new val create() : MimeTypes val^ Returns \u00b6 MimeTypes val^ Public Functions \u00b6 apply \u00b6 [Source] Mapping is based on the file type, following the last period in the name. fun box apply( name: String val) : String val^ Parameters \u00b6 name: String val Returns \u00b6 String val^ eq \u00b6 [Source] fun box eq( that: MimeTypes val) : Bool val Parameters \u00b6 that: MimeTypes val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MimeTypes val) : Bool val Parameters \u00b6 that: MimeTypes val Returns \u00b6 Bool val","title":"primitive MimeTypes"},{"location":"http_server-MimeTypes/#mimetypes","text":"[Source] Provide mapping from file names to MIME types. TODO load from /etc/mime.types primitive val MimeTypes","title":"MimeTypes"},{"location":"http_server-MimeTypes/#constructors","text":"","title":"Constructors"},{"location":"http_server-MimeTypes/#create","text":"[Source] new val create() : MimeTypes val^","title":"create"},{"location":"http_server-MimeTypes/#returns","text":"MimeTypes val^","title":"Returns"},{"location":"http_server-MimeTypes/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-MimeTypes/#apply","text":"[Source] Mapping is based on the file type, following the last period in the name. fun box apply( name: String val) : String val^","title":"apply"},{"location":"http_server-MimeTypes/#parameters","text":"name: String val","title":"Parameters"},{"location":"http_server-MimeTypes/#returns_1","text":"String val^","title":"Returns"},{"location":"http_server-MimeTypes/#eq","text":"[Source] fun box eq( that: MimeTypes val) : Bool val","title":"eq"},{"location":"http_server-MimeTypes/#parameters_1","text":"that: MimeTypes val","title":"Parameters"},{"location":"http_server-MimeTypes/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-MimeTypes/#ne","text":"[Source] fun box ne( that: MimeTypes val) : Bool val","title":"ne"},{"location":"http_server-MimeTypes/#parameters_2","text":"that: MimeTypes val","title":"Parameters"},{"location":"http_server-MimeTypes/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-NeedMore/","text":"NeedMore \u00b6 [Source] primitive val NeedMore is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create() : NeedMore val^ Returns \u00b6 NeedMore val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: NeedMore val) : Bool val Parameters \u00b6 that: NeedMore val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: NeedMore val) : Bool val Parameters \u00b6 that: NeedMore val Returns \u00b6 Bool val","title":"primitive NeedMore"},{"location":"http_server-NeedMore/#needmore","text":"[Source] primitive val NeedMore is Stringable box","title":"NeedMore"},{"location":"http_server-NeedMore/#implements","text":"Stringable box","title":"Implements"},{"location":"http_server-NeedMore/#constructors","text":"","title":"Constructors"},{"location":"http_server-NeedMore/#create","text":"[Source] new val create() : NeedMore val^","title":"create"},{"location":"http_server-NeedMore/#returns","text":"NeedMore val^","title":"Returns"},{"location":"http_server-NeedMore/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-NeedMore/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-NeedMore/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-NeedMore/#eq","text":"[Source] fun box eq( that: NeedMore val) : Bool val","title":"eq"},{"location":"http_server-NeedMore/#parameters","text":"that: NeedMore val","title":"Parameters"},{"location":"http_server-NeedMore/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-NeedMore/#ne","text":"[Source] fun box ne( that: NeedMore val) : Bool val","title":"ne"},{"location":"http_server-NeedMore/#parameters_1","text":"that: NeedMore val","title":"Parameters"},{"location":"http_server-NeedMore/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-OPTIONS/","text":"OPTIONS \u00b6 [Source] primitive val OPTIONS is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : OPTIONS val^ Returns \u00b6 OPTIONS val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive OPTIONS"},{"location":"http_server-OPTIONS/#options","text":"[Source] primitive val OPTIONS is Method val","title":"OPTIONS"},{"location":"http_server-OPTIONS/#implements","text":"Method val","title":"Implements"},{"location":"http_server-OPTIONS/#constructors","text":"","title":"Constructors"},{"location":"http_server-OPTIONS/#create","text":"[Source] new val create() : OPTIONS val^","title":"create"},{"location":"http_server-OPTIONS/#returns","text":"OPTIONS val^","title":"Returns"},{"location":"http_server-OPTIONS/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-OPTIONS/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-OPTIONS/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-OPTIONS/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-OPTIONS/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-OPTIONS/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-OPTIONS/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-OPTIONS/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-OPTIONS/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-OPTIONS/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-OPTIONS/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-PATCH/","text":"PATCH \u00b6 [Source] primitive val PATCH is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : PATCH val^ Returns \u00b6 PATCH val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive PATCH"},{"location":"http_server-PATCH/#patch","text":"[Source] primitive val PATCH is Method val","title":"PATCH"},{"location":"http_server-PATCH/#implements","text":"Method val","title":"Implements"},{"location":"http_server-PATCH/#constructors","text":"","title":"Constructors"},{"location":"http_server-PATCH/#create","text":"[Source] new val create() : PATCH val^","title":"create"},{"location":"http_server-PATCH/#returns","text":"PATCH val^","title":"Returns"},{"location":"http_server-PATCH/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-PATCH/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-PATCH/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-PATCH/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-PATCH/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-PATCH/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-PATCH/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-PATCH/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-PATCH/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-PATCH/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-PATCH/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-POST/","text":"POST \u00b6 [Source] primitive val POST is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : POST val^ Returns \u00b6 POST val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive POST"},{"location":"http_server-POST/#post","text":"[Source] primitive val POST is Method val","title":"POST"},{"location":"http_server-POST/#implements","text":"Method val","title":"Implements"},{"location":"http_server-POST/#constructors","text":"","title":"Constructors"},{"location":"http_server-POST/#create","text":"[Source] new val create() : POST val^","title":"create"},{"location":"http_server-POST/#returns","text":"POST val^","title":"Returns"},{"location":"http_server-POST/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-POST/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-POST/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-POST/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-POST/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-POST/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-POST/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-POST/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-POST/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-POST/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-POST/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-PUT/","text":"PUT \u00b6 [Source] primitive val PUT is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : PUT val^ Returns \u00b6 PUT val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive PUT"},{"location":"http_server-PUT/#put","text":"[Source] primitive val PUT is Method val","title":"PUT"},{"location":"http_server-PUT/#implements","text":"Method val","title":"Implements"},{"location":"http_server-PUT/#constructors","text":"","title":"Constructors"},{"location":"http_server-PUT/#create","text":"[Source] new val create() : PUT val^","title":"create"},{"location":"http_server-PUT/#returns","text":"PUT val^","title":"Returns"},{"location":"http_server-PUT/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-PUT/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-PUT/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-PUT/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-PUT/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-PUT/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-PUT/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-PUT/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-PUT/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-PUT/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-PUT/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-ParseReturn/","text":"ParseReturn \u00b6 [Source] what is returned from HTTP11RequestParser.parse(...) type ParseReturn is (NeedMore val | ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val) Type Alias For \u00b6 ( NeedMore val | (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val)","title":"type ParseReturn"},{"location":"http_server-ParseReturn/#parsereturn","text":"[Source] what is returned from HTTP11RequestParser.parse(...) type ParseReturn is (NeedMore val | ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val)","title":"ParseReturn"},{"location":"http_server-ParseReturn/#type-alias-for","text":"( NeedMore val | (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) | None val)","title":"Type Alias For"},{"location":"http_server-Request/","text":"Request \u00b6 [Source] HTTP Request Method URI HTTP-Version Headers Transfer-Coding Content-Length Without body. interface val Request Public Functions \u00b6 method \u00b6 [Source] fun box method() : Method val Returns \u00b6 Method val uri \u00b6 [Source] fun box uri() : URL val Returns \u00b6 URL val version \u00b6 [Source] fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) header \u00b6 [Source] fun box header( name: String val) : (String val | None val) Parameters \u00b6 name: String val Returns \u00b6 ( String val | None val) headers \u00b6 [Source] fun box headers() : Iterator[(String val , String val)] ref Returns \u00b6 Iterator [( String val , String val)] ref transfer_coding \u00b6 [Source] fun box transfer_coding() : (Chunked val | None val) Returns \u00b6 ( Chunked val | None val) content_length \u00b6 [Source] fun box content_length() : (USize val | None val) Returns \u00b6 ( USize val | None val) has_body \u00b6 [Source] fun box has_body() : Bool val Returns \u00b6 Bool val","title":"interface Request"},{"location":"http_server-Request/#request","text":"[Source] HTTP Request Method URI HTTP-Version Headers Transfer-Coding Content-Length Without body. interface val Request","title":"Request"},{"location":"http_server-Request/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Request/#method","text":"[Source] fun box method() : Method val","title":"method"},{"location":"http_server-Request/#returns","text":"Method val","title":"Returns"},{"location":"http_server-Request/#uri","text":"[Source] fun box uri() : URL val","title":"uri"},{"location":"http_server-Request/#returns_1","text":"URL val","title":"Returns"},{"location":"http_server-Request/#version","text":"[Source] fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"version"},{"location":"http_server-Request/#returns_2","text":"(( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Returns"},{"location":"http_server-Request/#header","text":"[Source] fun box header( name: String val) : (String val | None val)","title":"header"},{"location":"http_server-Request/#parameters","text":"name: String val","title":"Parameters"},{"location":"http_server-Request/#returns_3","text":"( String val | None val)","title":"Returns"},{"location":"http_server-Request/#headers","text":"[Source] fun box headers() : Iterator[(String val , String val)] ref","title":"headers"},{"location":"http_server-Request/#returns_4","text":"Iterator [( String val , String val)] ref","title":"Returns"},{"location":"http_server-Request/#transfer_coding","text":"[Source] fun box transfer_coding() : (Chunked val | None val)","title":"transfer_coding"},{"location":"http_server-Request/#returns_5","text":"( Chunked val | None val)","title":"Returns"},{"location":"http_server-Request/#content_length","text":"[Source] fun box content_length() : (USize val | None val)","title":"content_length"},{"location":"http_server-Request/#returns_6","text":"( USize val | None val)","title":"Returns"},{"location":"http_server-Request/#has_body","text":"[Source] fun box has_body() : Bool val","title":"has_body"},{"location":"http_server-Request/#returns_7","text":"Bool val","title":"Returns"},{"location":"http_server-RequestID/","text":"RequestID \u00b6 [Source] type RequestID is USize val Type Alias For \u00b6 USize val","title":"type RequestID"},{"location":"http_server-RequestID/#requestid","text":"[Source] type RequestID is USize val","title":"RequestID"},{"location":"http_server-RequestID/#type-alias-for","text":"USize val","title":"Type Alias For"},{"location":"http_server-RequestIDs/","text":"RequestIDs \u00b6 [Source] Utilities for dealing with type RequestID in order to not assume anything about its actual implementation. primitive val RequestIDs Constructors \u00b6 create \u00b6 [Source] new val create() : RequestIDs val^ Returns \u00b6 RequestIDs val^ Public Functions \u00b6 max_value \u00b6 [Source] fun box max_value() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( id1: USize val, id2: USize val) : USize val Parameters \u00b6 id1: USize val id2: USize val Returns \u00b6 USize val max \u00b6 [Source] fun box max( id1: USize val, id2: USize val) : USize val Parameters \u00b6 id1: USize val id2: USize val Returns \u00b6 USize val next \u00b6 [Source] fun box next( id: USize val) : USize val Parameters \u00b6 id: USize val Returns \u00b6 USize val gt \u00b6 [Source] fun box gt( id1: USize val, id2: USize val) : Bool val Parameters \u00b6 id1: USize val id2: USize val Returns \u00b6 Bool val gte \u00b6 [Source] fun box gte( id1: USize val, id2: USize val) : Bool val Parameters \u00b6 id1: USize val id2: USize val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: RequestIDs val) : Bool val Parameters \u00b6 that: RequestIDs val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: RequestIDs val) : Bool val Parameters \u00b6 that: RequestIDs val Returns \u00b6 Bool val","title":"primitive RequestIDs"},{"location":"http_server-RequestIDs/#requestids","text":"[Source] Utilities for dealing with type RequestID in order to not assume anything about its actual implementation. primitive val RequestIDs","title":"RequestIDs"},{"location":"http_server-RequestIDs/#constructors","text":"","title":"Constructors"},{"location":"http_server-RequestIDs/#create","text":"[Source] new val create() : RequestIDs val^","title":"create"},{"location":"http_server-RequestIDs/#returns","text":"RequestIDs val^","title":"Returns"},{"location":"http_server-RequestIDs/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-RequestIDs/#max_value","text":"[Source] fun box max_value() : USize val","title":"max_value"},{"location":"http_server-RequestIDs/#returns_1","text":"USize val","title":"Returns"},{"location":"http_server-RequestIDs/#min","text":"[Source] fun box min( id1: USize val, id2: USize val) : USize val","title":"min"},{"location":"http_server-RequestIDs/#parameters","text":"id1: USize val id2: USize val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_2","text":"USize val","title":"Returns"},{"location":"http_server-RequestIDs/#max","text":"[Source] fun box max( id1: USize val, id2: USize val) : USize val","title":"max"},{"location":"http_server-RequestIDs/#parameters_1","text":"id1: USize val id2: USize val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_3","text":"USize val","title":"Returns"},{"location":"http_server-RequestIDs/#next","text":"[Source] fun box next( id: USize val) : USize val","title":"next"},{"location":"http_server-RequestIDs/#parameters_2","text":"id: USize val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_4","text":"USize val","title":"Returns"},{"location":"http_server-RequestIDs/#gt","text":"[Source] fun box gt( id1: USize val, id2: USize val) : Bool val","title":"gt"},{"location":"http_server-RequestIDs/#parameters_3","text":"id1: USize val id2: USize val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_5","text":"Bool val","title":"Returns"},{"location":"http_server-RequestIDs/#gte","text":"[Source] fun box gte( id1: USize val, id2: USize val) : Bool val","title":"gte"},{"location":"http_server-RequestIDs/#parameters_4","text":"id1: USize val id2: USize val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_6","text":"Bool val","title":"Returns"},{"location":"http_server-RequestIDs/#eq","text":"[Source] fun box eq( that: RequestIDs val) : Bool val","title":"eq"},{"location":"http_server-RequestIDs/#parameters_5","text":"that: RequestIDs val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_7","text":"Bool val","title":"Returns"},{"location":"http_server-RequestIDs/#ne","text":"[Source] fun box ne( that: RequestIDs val) : Bool val","title":"ne"},{"location":"http_server-RequestIDs/#parameters_6","text":"that: RequestIDs val","title":"Parameters"},{"location":"http_server-RequestIDs/#returns_8","text":"Bool val","title":"Returns"},{"location":"http_server-RequestParseError/","text":"RequestParseError \u00b6 [Source] type RequestParseError is ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) Type Alias For \u00b6 (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val)","title":"type RequestParseError"},{"location":"http_server-RequestParseError/#requestparseerror","text":"[Source] type RequestParseError is ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val)","title":"RequestParseError"},{"location":"http_server-RequestParseError/#type-alias-for","text":"(( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val)","title":"Type Alias For"},{"location":"http_server-Response/","text":"Response \u00b6 [Source] Representing a HTTP response minus the body. interface val Response is ByteSeqIter val Implements \u00b6 ByteSeqIter val Public Functions \u00b6 version \u00b6 [Source] fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Returns \u00b6 (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) status \u00b6 [Source] fun box status() : Status val Returns \u00b6 Status val header \u00b6 [Source] fun box header( name: String val) : (String val | None val) Parameters \u00b6 name: String val Returns \u00b6 ( String val | None val) headers \u00b6 [Source] fun box headers() : Iterator[(String val , String val)] ref Returns \u00b6 Iterator [( String val , String val)] ref transfer_coding \u00b6 [Source] fun box transfer_coding() : (Chunked val | None val) Returns \u00b6 ( Chunked val | None val) content_length \u00b6 [Source] fun box content_length() : (USize val | None val) Returns \u00b6 ( USize val | None val) to_bytes \u00b6 [Source] fun box to_bytes() : ByteArrays val Returns \u00b6 ByteArrays val array \u00b6 [Source] fun box array() : Array[U8 val] iso^ Returns \u00b6 Array [ U8 val] iso^ values \u00b6 fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref Returns \u00b6 Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"interface Response"},{"location":"http_server-Response/#response","text":"[Source] Representing a HTTP response minus the body. interface val Response is ByteSeqIter val","title":"Response"},{"location":"http_server-Response/#implements","text":"ByteSeqIter val","title":"Implements"},{"location":"http_server-Response/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Response/#version","text":"[Source] fun box version() : ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"version"},{"location":"http_server-Response/#returns","text":"(( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Returns"},{"location":"http_server-Response/#status","text":"[Source] fun box status() : Status val","title":"status"},{"location":"http_server-Response/#returns_1","text":"Status val","title":"Returns"},{"location":"http_server-Response/#header","text":"[Source] fun box header( name: String val) : (String val | None val)","title":"header"},{"location":"http_server-Response/#parameters","text":"name: String val","title":"Parameters"},{"location":"http_server-Response/#returns_2","text":"( String val | None val)","title":"Returns"},{"location":"http_server-Response/#headers","text":"[Source] fun box headers() : Iterator[(String val , String val)] ref","title":"headers"},{"location":"http_server-Response/#returns_3","text":"Iterator [( String val , String val)] ref","title":"Returns"},{"location":"http_server-Response/#transfer_coding","text":"[Source] fun box transfer_coding() : (Chunked val | None val)","title":"transfer_coding"},{"location":"http_server-Response/#returns_4","text":"( Chunked val | None val)","title":"Returns"},{"location":"http_server-Response/#content_length","text":"[Source] fun box content_length() : (USize val | None val)","title":"content_length"},{"location":"http_server-Response/#returns_5","text":"( USize val | None val)","title":"Returns"},{"location":"http_server-Response/#to_bytes","text":"[Source] fun box to_bytes() : ByteArrays val","title":"to_bytes"},{"location":"http_server-Response/#returns_6","text":"ByteArrays val","title":"Returns"},{"location":"http_server-Response/#array","text":"[Source] fun box array() : Array[U8 val] iso^","title":"array"},{"location":"http_server-Response/#returns_7","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"http_server-Response/#values","text":"fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref","title":"values"},{"location":"http_server-Response/#returns_8","text":"Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"Returns"},{"location":"http_server-ResponseBuilder/","text":"ResponseBuilder \u00b6 [Source] Basic interface for a ResponseBuilder that can be used with chaining method calls. It enforces a strict order of build steps by only making the next step available as a return to a function required to transition. E.g. You must call set_status(...) in order to get back a ResponseBuilderHeaders to add headers to the response. You need to call finish_headers() in order to be able to add body data with ResponseBuilderBody . You can always reset the builder to start out fresh from the beginning. Implementations may take advantage of reset() by returning itself here, allowing for object reuse. Use ResponseBuilderBody.build() to finally build the response into a ByteSeqIter , taylored for use with Session.send_raw() . Example usage: let builder: ResponseBuilder = Responses.builder() builder.set_status(StatusOK) .add_header(\"Content-Length\", \"4\") .add_header(\"Content-Type\", \"text/plain; charset=UTF-8\") .add_header(\"Server\", \"pony-http\") .finish_headers() .add_chunk(\"COOL\") .build() interface ref ResponseBuilder Public Functions \u00b6 set_status \u00b6 [Source] fun ref set_status( status: Status val) : ResponseBuilderHeaders ref Parameters \u00b6 status: Status val Returns \u00b6 ResponseBuilderHeaders ref reset \u00b6 [Source] fun ref reset() : ResponseBuilder ref Returns \u00b6 ResponseBuilder ref","title":"interface ResponseBuilder"},{"location":"http_server-ResponseBuilder/#responsebuilder","text":"[Source] Basic interface for a ResponseBuilder that can be used with chaining method calls. It enforces a strict order of build steps by only making the next step available as a return to a function required to transition. E.g. You must call set_status(...) in order to get back a ResponseBuilderHeaders to add headers to the response. You need to call finish_headers() in order to be able to add body data with ResponseBuilderBody . You can always reset the builder to start out fresh from the beginning. Implementations may take advantage of reset() by returning itself here, allowing for object reuse. Use ResponseBuilderBody.build() to finally build the response into a ByteSeqIter , taylored for use with Session.send_raw() . Example usage: let builder: ResponseBuilder = Responses.builder() builder.set_status(StatusOK) .add_header(\"Content-Length\", \"4\") .add_header(\"Content-Type\", \"text/plain; charset=UTF-8\") .add_header(\"Server\", \"pony-http\") .finish_headers() .add_chunk(\"COOL\") .build() interface ref ResponseBuilder","title":"ResponseBuilder"},{"location":"http_server-ResponseBuilder/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-ResponseBuilder/#set_status","text":"[Source] fun ref set_status( status: Status val) : ResponseBuilderHeaders ref","title":"set_status"},{"location":"http_server-ResponseBuilder/#parameters","text":"status: Status val","title":"Parameters"},{"location":"http_server-ResponseBuilder/#returns","text":"ResponseBuilderHeaders ref","title":"Returns"},{"location":"http_server-ResponseBuilder/#reset","text":"[Source] fun ref reset() : ResponseBuilder ref","title":"reset"},{"location":"http_server-ResponseBuilder/#returns_1","text":"ResponseBuilder ref","title":"Returns"},{"location":"http_server-ResponseBuilderBody/","text":"ResponseBuilderBody \u00b6 [Source] interface ref ResponseBuilderBody Public Functions \u00b6 add_chunk \u00b6 [Source] Add some body data. If Transfer-Encoding is set to Chunked in ResponseBuilderHeaders each call to this function will take care of encoding every added array here in Chunked encoding. Add an empty array to add the finishing chunk.. fun ref add_chunk( data: Array[U8 val] val) : ResponseBuilderBody ref Parameters \u00b6 data: Array [ U8 val] val Returns \u00b6 ResponseBuilderBody ref build \u00b6 [Source] Serialize the accumulated response data into a ByteSeqIter . fun ref build() : ByteSeqIter val Returns \u00b6 ByteSeqIter val reset \u00b6 [Source] Reset the builder to a fresh state, only use the returned builder for further actions. fun ref reset() : ResponseBuilder ref Returns \u00b6 ResponseBuilder ref","title":"interface ResponseBuilderBody"},{"location":"http_server-ResponseBuilderBody/#responsebuilderbody","text":"[Source] interface ref ResponseBuilderBody","title":"ResponseBuilderBody"},{"location":"http_server-ResponseBuilderBody/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-ResponseBuilderBody/#add_chunk","text":"[Source] Add some body data. If Transfer-Encoding is set to Chunked in ResponseBuilderHeaders each call to this function will take care of encoding every added array here in Chunked encoding. Add an empty array to add the finishing chunk.. fun ref add_chunk( data: Array[U8 val] val) : ResponseBuilderBody ref","title":"add_chunk"},{"location":"http_server-ResponseBuilderBody/#parameters","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"http_server-ResponseBuilderBody/#returns","text":"ResponseBuilderBody ref","title":"Returns"},{"location":"http_server-ResponseBuilderBody/#build","text":"[Source] Serialize the accumulated response data into a ByteSeqIter . fun ref build() : ByteSeqIter val","title":"build"},{"location":"http_server-ResponseBuilderBody/#returns_1","text":"ByteSeqIter val","title":"Returns"},{"location":"http_server-ResponseBuilderBody/#reset","text":"[Source] Reset the builder to a fresh state, only use the returned builder for further actions. fun ref reset() : ResponseBuilder ref","title":"reset"},{"location":"http_server-ResponseBuilderBody/#returns_2","text":"ResponseBuilder ref","title":"Returns"},{"location":"http_server-ResponseBuilderHeaders/","text":"ResponseBuilderHeaders \u00b6 [Source] interface ref ResponseBuilderHeaders Public Functions \u00b6 add_header \u00b6 [Source] fun ref add_header( name: String val, value: String val) : ResponseBuilderHeaders ref Parameters \u00b6 name: String val value: String val Returns \u00b6 ResponseBuilderHeaders ref set_transfer_encoding \u00b6 [Source] fun ref set_transfer_encoding( chunked: (Chunked val | None val)) : ResponseBuilderHeaders ref Parameters \u00b6 chunked: ( Chunked val | None val) Returns \u00b6 ResponseBuilderHeaders ref finish_headers \u00b6 [Source] fun ref finish_headers() : ResponseBuilderBody ref Returns \u00b6 ResponseBuilderBody ref reset \u00b6 [Source] fun ref reset() : ResponseBuilder ref Returns \u00b6 ResponseBuilder ref","title":"interface ResponseBuilderHeaders"},{"location":"http_server-ResponseBuilderHeaders/#responsebuilderheaders","text":"[Source] interface ref ResponseBuilderHeaders","title":"ResponseBuilderHeaders"},{"location":"http_server-ResponseBuilderHeaders/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-ResponseBuilderHeaders/#add_header","text":"[Source] fun ref add_header( name: String val, value: String val) : ResponseBuilderHeaders ref","title":"add_header"},{"location":"http_server-ResponseBuilderHeaders/#parameters","text":"name: String val value: String val","title":"Parameters"},{"location":"http_server-ResponseBuilderHeaders/#returns","text":"ResponseBuilderHeaders ref","title":"Returns"},{"location":"http_server-ResponseBuilderHeaders/#set_transfer_encoding","text":"[Source] fun ref set_transfer_encoding( chunked: (Chunked val | None val)) : ResponseBuilderHeaders ref","title":"set_transfer_encoding"},{"location":"http_server-ResponseBuilderHeaders/#parameters_1","text":"chunked: ( Chunked val | None val)","title":"Parameters"},{"location":"http_server-ResponseBuilderHeaders/#returns_1","text":"ResponseBuilderHeaders ref","title":"Returns"},{"location":"http_server-ResponseBuilderHeaders/#finish_headers","text":"[Source] fun ref finish_headers() : ResponseBuilderBody ref","title":"finish_headers"},{"location":"http_server-ResponseBuilderHeaders/#returns_2","text":"ResponseBuilderBody ref","title":"Returns"},{"location":"http_server-ResponseBuilderHeaders/#reset","text":"[Source] fun ref reset() : ResponseBuilder ref","title":"reset"},{"location":"http_server-ResponseBuilderHeaders/#returns_3","text":"ResponseBuilder ref","title":"Returns"},{"location":"http_server-Responses/","text":"Responses \u00b6 [Source] The entry-point into building Responses. primitive val Responses Constructors \u00b6 create \u00b6 [Source] new val create() : Responses val^ Returns \u00b6 Responses val^ Public Functions \u00b6 builder \u00b6 [Source] Official way to get a reusable ResponseBuilder to build your responses efficiently. fun box builder( version: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference) : ResponseBuilder ref Parameters \u00b6 version: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference Returns \u00b6 ResponseBuilder ref eq \u00b6 [Source] fun box eq( that: Responses val) : Bool val Parameters \u00b6 that: Responses val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Responses val) : Bool val Parameters \u00b6 that: Responses val Returns \u00b6 Bool val","title":"primitive Responses"},{"location":"http_server-Responses/#responses","text":"[Source] The entry-point into building Responses. primitive val Responses","title":"Responses"},{"location":"http_server-Responses/#constructors","text":"","title":"Constructors"},{"location":"http_server-Responses/#create","text":"[Source] new val create() : Responses val^","title":"create"},{"location":"http_server-Responses/#returns","text":"Responses val^","title":"Returns"},{"location":"http_server-Responses/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Responses/#builder","text":"[Source] Official way to get a reusable ResponseBuilder to build your responses efficiently. fun box builder( version: ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference) : ResponseBuilder ref","title":"builder"},{"location":"http_server-Responses/#parameters","text":"version: (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) = reference","title":"Parameters"},{"location":"http_server-Responses/#returns_1","text":"ResponseBuilder ref","title":"Returns"},{"location":"http_server-Responses/#eq","text":"[Source] fun box eq( that: Responses val) : Bool val","title":"eq"},{"location":"http_server-Responses/#parameters_1","text":"that: Responses val","title":"Parameters"},{"location":"http_server-Responses/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-Responses/#ne","text":"[Source] fun box ne( that: Responses val) : Bool val","title":"ne"},{"location":"http_server-Responses/#parameters_2","text":"that: Responses val","title":"Parameters"},{"location":"http_server-Responses/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-Server/","text":"Server \u00b6 [Source] Runs an HTTP server. Server operation \u00b6 Information flow into the Server is as follows: Server listens for incoming TCP connections. _ServerConnHandler is the notification class for new connections. It creates a _ServerConnection actor and receives all the raw data from TCP. It uses the HTTP11RequestParser to assemble complete Request objects which are passed off to the _ServerConnection . The _ServerConnection actor deals with requests and their bodies that have been parsed by the HTTP11RequestParser . This is where requests get dispatched to the caller-provided Handler. actor tag Server is _SessionRegistry tag Implements \u00b6 _SessionRegistry tag Constructors \u00b6 create \u00b6 [Source] Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: ServerNotify iso, handler: HandlerFactory val, config: ServerConfig val, sslctx: (SSLContext val | None val) = reference) : Server tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: ServerNotify iso handler: HandlerFactory val config: ServerConfig val sslctx: ( SSLContext val | None val) = reference Returns \u00b6 Server tag^ Public Behaviours \u00b6 register_session \u00b6 [Source] be register_session( conn: _ServerConnection tag) Parameters \u00b6 conn: _ServerConnection tag unregister_session \u00b6 [Source] be unregister_session( conn: _ServerConnection tag) Parameters \u00b6 conn: _ServerConnection tag set_handler \u00b6 [Source] Replace the request handler. be set_handler( handler: HandlerFactory val) Parameters \u00b6 handler: HandlerFactory val dispose \u00b6 [Source] Shut down the server gracefully. To do this we have to eliminate any source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Returns the locally bound address. fun box local_address() : NetAddress val Returns \u00b6 NetAddress val","title":"actor Server"},{"location":"http_server-Server/#server","text":"[Source] Runs an HTTP server.","title":"Server"},{"location":"http_server-Server/#server-operation","text":"Information flow into the Server is as follows: Server listens for incoming TCP connections. _ServerConnHandler is the notification class for new connections. It creates a _ServerConnection actor and receives all the raw data from TCP. It uses the HTTP11RequestParser to assemble complete Request objects which are passed off to the _ServerConnection . The _ServerConnection actor deals with requests and their bodies that have been parsed by the HTTP11RequestParser . This is where requests get dispatched to the caller-provided Handler. actor tag Server is _SessionRegistry tag","title":"Server operation"},{"location":"http_server-Server/#implements","text":"_SessionRegistry tag","title":"Implements"},{"location":"http_server-Server/#constructors","text":"","title":"Constructors"},{"location":"http_server-Server/#create","text":"[Source] Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: ServerNotify iso, handler: HandlerFactory val, config: ServerConfig val, sslctx: (SSLContext val | None val) = reference) : Server tag^","title":"create"},{"location":"http_server-Server/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: ServerNotify iso handler: HandlerFactory val config: ServerConfig val sslctx: ( SSLContext val | None val) = reference","title":"Parameters"},{"location":"http_server-Server/#returns","text":"Server tag^","title":"Returns"},{"location":"http_server-Server/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"http_server-Server/#register_session","text":"[Source] be register_session( conn: _ServerConnection tag)","title":"register_session"},{"location":"http_server-Server/#parameters_1","text":"conn: _ServerConnection tag","title":"Parameters"},{"location":"http_server-Server/#unregister_session","text":"[Source] be unregister_session( conn: _ServerConnection tag)","title":"unregister_session"},{"location":"http_server-Server/#parameters_2","text":"conn: _ServerConnection tag","title":"Parameters"},{"location":"http_server-Server/#set_handler","text":"[Source] Replace the request handler. be set_handler( handler: HandlerFactory val)","title":"set_handler"},{"location":"http_server-Server/#parameters_3","text":"handler: HandlerFactory val","title":"Parameters"},{"location":"http_server-Server/#dispose","text":"[Source] Shut down the server gracefully. To do this we have to eliminate any source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. be dispose()","title":"dispose"},{"location":"http_server-Server/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Server/#local_address","text":"[Source] Returns the locally bound address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"http_server-Server/#returns_1","text":"NetAddress val","title":"Returns"},{"location":"http_server-ServerConfig/","text":"ServerConfig \u00b6 [Source] class val ServerConfig Constructors \u00b6 create \u00b6 [Source] new val create( host': String val = \"localhost\", port': String val = \"0\", connection_timeout': USize val = 0, max_request_handling_lag': USize val = 100, max_concurrent_connections': USize val = 0, timeout_heartbeat_interval': (U64 val | None val) = reference) : ServerConfig val^ Parameters \u00b6 host': String val = \"localhost\" port': String val = \"0\" connection_timeout': USize val = 0 max_request_handling_lag': USize val = 100 max_concurrent_connections': USize val = 0 timeout_heartbeat_interval': ( U64 val | None val) = reference Returns \u00b6 ServerConfig val^ Public fields \u00b6 let host: String val \u00b6 [Source] Hostname or IP to start listening on. E.g. localhost or 127.0.0.1 A value of \"0.0.0.0\" will make the server listen on all available interfaces. Default: \"localhost\" let port: String val \u00b6 [Source] Numeric port (e.g. \"80\" ) or service name (e.g. \"http\" ) defining the port number to start listening on. Chosing \"0\" will let the server start on a random port, chosen by the OS. Default: \"0\" let connection_timeout: USize val \u00b6 [Source] Timeout in seconds after which a connection will be closed. Using 0 will make the connection never time out. Default: 0 let max_request_handling_lag: USize val \u00b6 [Source] Maximum number of requests that will be kept without a response generated before the connection is muted. Default: 100 let max_concurrent_connections: USize val \u00b6 [Source] maximum number of concurrent TCP connections. Set to 0 to accept unlimited concurrent connections. Default: 0 let timeout_heartbeat_interval: U64 val \u00b6 [Source] Interval between heartbeat calls to all tcp connection in milliseconds the server keeps track of for them in order to determine if they should time out. Default: (<connection_timeout> * 1000) / 4 Public Functions \u00b6 has_timeout \u00b6 [Source] fun box has_timeout() : Bool val Returns \u00b6 Bool val to_json \u00b6 [Source] fun box to_json() : String val Returns \u00b6 String val","title":"class ServerConfig"},{"location":"http_server-ServerConfig/#serverconfig","text":"[Source] class val ServerConfig","title":"ServerConfig"},{"location":"http_server-ServerConfig/#constructors","text":"","title":"Constructors"},{"location":"http_server-ServerConfig/#create","text":"[Source] new val create( host': String val = \"localhost\", port': String val = \"0\", connection_timeout': USize val = 0, max_request_handling_lag': USize val = 100, max_concurrent_connections': USize val = 0, timeout_heartbeat_interval': (U64 val | None val) = reference) : ServerConfig val^","title":"create"},{"location":"http_server-ServerConfig/#parameters","text":"host': String val = \"localhost\" port': String val = \"0\" connection_timeout': USize val = 0 max_request_handling_lag': USize val = 100 max_concurrent_connections': USize val = 0 timeout_heartbeat_interval': ( U64 val | None val) = reference","title":"Parameters"},{"location":"http_server-ServerConfig/#returns","text":"ServerConfig val^","title":"Returns"},{"location":"http_server-ServerConfig/#public-fields","text":"","title":"Public fields"},{"location":"http_server-ServerConfig/#let-host-string-val","text":"[Source] Hostname or IP to start listening on. E.g. localhost or 127.0.0.1 A value of \"0.0.0.0\" will make the server listen on all available interfaces. Default: \"localhost\"","title":"let host: String val"},{"location":"http_server-ServerConfig/#let-port-string-val","text":"[Source] Numeric port (e.g. \"80\" ) or service name (e.g. \"http\" ) defining the port number to start listening on. Chosing \"0\" will let the server start on a random port, chosen by the OS. Default: \"0\"","title":"let port: String val"},{"location":"http_server-ServerConfig/#let-connection_timeout-usize-val","text":"[Source] Timeout in seconds after which a connection will be closed. Using 0 will make the connection never time out. Default: 0","title":"let connection_timeout: USize val"},{"location":"http_server-ServerConfig/#let-max_request_handling_lag-usize-val","text":"[Source] Maximum number of requests that will be kept without a response generated before the connection is muted. Default: 100","title":"let max_request_handling_lag: USize val"},{"location":"http_server-ServerConfig/#let-max_concurrent_connections-usize-val","text":"[Source] maximum number of concurrent TCP connections. Set to 0 to accept unlimited concurrent connections. Default: 0","title":"let max_concurrent_connections: USize val"},{"location":"http_server-ServerConfig/#let-timeout_heartbeat_interval-u64-val","text":"[Source] Interval between heartbeat calls to all tcp connection in milliseconds the server keeps track of for them in order to determine if they should time out. Default: (<connection_timeout> * 1000) / 4","title":"let timeout_heartbeat_interval: U64 val"},{"location":"http_server-ServerConfig/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-ServerConfig/#has_timeout","text":"[Source] fun box has_timeout() : Bool val","title":"has_timeout"},{"location":"http_server-ServerConfig/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-ServerConfig/#to_json","text":"[Source] fun box to_json() : String val","title":"to_json"},{"location":"http_server-ServerConfig/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-ServerNotify/","text":"ServerNotify \u00b6 [Source] Notifications about the creation and closing of TCPConnection s within HTTP servers. interface ref ServerNotify Public Functions \u00b6 listening \u00b6 [Source] Called when we are listening. fun ref listening( server: Server ref) : None val Parameters \u00b6 server: Server ref Returns \u00b6 None val not_listening \u00b6 [Source] Called when we fail to listen. fun ref not_listening( server: Server ref) : None val Parameters \u00b6 server: Server ref Returns \u00b6 None val closed \u00b6 [Source] Called when we stop listening. fun ref closed( server: Server ref) : None val Parameters \u00b6 server: Server ref Returns \u00b6 None val","title":"interface ServerNotify"},{"location":"http_server-ServerNotify/#servernotify","text":"[Source] Notifications about the creation and closing of TCPConnection s within HTTP servers. interface ref ServerNotify","title":"ServerNotify"},{"location":"http_server-ServerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-ServerNotify/#listening","text":"[Source] Called when we are listening. fun ref listening( server: Server ref) : None val","title":"listening"},{"location":"http_server-ServerNotify/#parameters","text":"server: Server ref","title":"Parameters"},{"location":"http_server-ServerNotify/#returns","text":"None val","title":"Returns"},{"location":"http_server-ServerNotify/#not_listening","text":"[Source] Called when we fail to listen. fun ref not_listening( server: Server ref) : None val","title":"not_listening"},{"location":"http_server-ServerNotify/#parameters_1","text":"server: Server ref","title":"Parameters"},{"location":"http_server-ServerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"http_server-ServerNotify/#closed","text":"[Source] Called when we stop listening. fun ref closed( server: Server ref) : None val","title":"closed"},{"location":"http_server-ServerNotify/#parameters_2","text":"server: Server ref","title":"Parameters"},{"location":"http_server-ServerNotify/#returns_2","text":"None val","title":"Returns"},{"location":"http_server-Session/","text":"Session \u00b6 [Source] An HTTP Session is the external API to the communication link between client and server. Every request is executed as part of a HTTP Session. An HTTP Session lives as long as the underlying TCP connection and receives request data from it and writes response data to it. Receiving data and parsing this data into Request s is happening on the TCPConnection actor. The Session actor is started when a new TCPConnection is accepted, and shut down, when the connection is closed. Receiving a Request \u00b6 As part of the Request-Response handling internal to this HTTP library, a Session is instantiated that forwards requests to a Handler , to actual application code, which in turn sends Responses back to the Session instance it was instantiated with (See HandlerFactory . See Handler on how requests are received by application code. Sending a Response \u00b6 interface tag Session Public Behaviours \u00b6 send_start \u00b6 [Source] Verbose API \u00b6 Start sending a response, submitting the Response status and headers. Sending a response via the verbose API needs to be done in 2 or more steps: Session.send_start - exactly once - submit status and headers Session.send_chunk - 0 or more times - submit body Session.send_finished - exactly once - clean up resources be send_start( respone: Response val, request_id: USize val) Parameters \u00b6 respone: Response val request_id: USize val send_chunk \u00b6 [Source] Verbose API \u00b6 Send a piece of body data of the request identified by request_id . This might be the whole body or just a piece of it. Notify the Session that the body has been fully sent, by calling Session.send_finished . be send_chunk( data: (String val | Array[U8 val] val), request_id: USize val) Parameters \u00b6 data: ( String val | Array [ U8 val] val) request_id: USize val send_finished \u00b6 [Source] Verbose API \u00b6 Indicate that the response for request_id has been completed, that is, its status, headers and body have been sent. This will clean up resources on the session and might send pending pipelined responses in addition to this response. If this behaviour isnt called, the server might misbehave, especially with clients doing HTTP pipelining. be send_finished( request_id: USize val) Parameters \u00b6 request_id: USize val send_cancel \u00b6 [Source] Cancel sending an in-flight response. As the Session will be invalid afterwards, as the response might not have been sent completely, it is best to close the session afterwards using Session.dispose() . be send_cancel( request_id: USize val) Parameters \u00b6 request_id: USize val send_no_body \u00b6 [Source] Simple API \u00b6 Send a bodyless Response in one call. This call will do all the work of sending the response and cleaning up resources. No need to call Session.send_finished() anymore for this request. be send_no_body( response: Response val, request_id: USize val) Parameters \u00b6 response: Response val request_id: USize val send \u00b6 [Source] Simple API \u00b6 Send an Response with a body in one call. The body must be a ByteArrays instance. Example: // ... var bytes = ByteArrays bytes = bytes + \"first line\" + \"\\n\" bytes = bytes + \"second line\" + \"\\n\" bytes = bytes + \"third line\" session.send(response, bytes, request_id) // ... This call will do all the work of sending the response and cleaning up resources. No need to call Session.send_finished() anymore for this request. be send( response: Response val, body: ByteArrays val, request_id: USize val) Parameters \u00b6 response: Response val body: ByteArrays val request_id: USize val send_raw \u00b6 [Source] Optimized raw API \u00b6 Send raw bytes to the Session in form of a ByteSeqIter . These bytes may or may not include the response body. You can use Session.send_chunk() to send the response body piece by piece. If the session should be closed after sending this response, no matter the requested standard HTTP connection handling, set close_session to true . To be a good HTTP citizen, include a Connection: close header in the raw response, to signal to the client to also close the session. If set to false , then normal HTTP connection handling applies (request Connection header, HTTP/1.0 without Connection: keep-alive , etc.). To finish sending the response, it is required to call Session.send_finished() to wrap things up, otherwise the server might misbehave. This API uses the TCPConnection.writev method to optimize putting the given bytes out to the wire. To make this optimized path more usable, this library provides the ResponseBuilder , which builds up a response into a ByteSeqIter , thus taylored towards being used with this API. Example: class MyHandler is Handler let _session: Session new create(session: Session) => _session = session fun ref apply(request: Request val, request_id: RequestID): Any => let body = match request.content_length() | let cl: USize => \"You've sent us \" + cl.string() + \" bytes! Thank you!\" | None if request.transfer_coding() is Chunked => \"You've sent us some chunks! That's cool!\" | None => \"Dunno how much you've sent us. Probably nothing. That's alright.\" end _session.send_raw( Responses.builder() .set_status(StatusOK) .add_header(\"Content-Type\", \"text/plain; charset=UTF-8\") .add_header(\"Content-Length\", body.size().string()) .finish_headers() .add_chunk(body) .build(), request_id ) // never forget !!! _session.send_finished(request_id) be send_raw( raw: ByteSeqIter val, request_id: USize val, close_session: Bool val = false) Parameters \u00b6 raw: ByteSeqIter val request_id: USize val close_session: Bool val = false dispose \u00b6 [Source] Close the connection from this end. be dispose()","title":"interface Session"},{"location":"http_server-Session/#session","text":"[Source] An HTTP Session is the external API to the communication link between client and server. Every request is executed as part of a HTTP Session. An HTTP Session lives as long as the underlying TCP connection and receives request data from it and writes response data to it. Receiving data and parsing this data into Request s is happening on the TCPConnection actor. The Session actor is started when a new TCPConnection is accepted, and shut down, when the connection is closed.","title":"Session"},{"location":"http_server-Session/#receiving-a-request","text":"As part of the Request-Response handling internal to this HTTP library, a Session is instantiated that forwards requests to a Handler , to actual application code, which in turn sends Responses back to the Session instance it was instantiated with (See HandlerFactory . See Handler on how requests are received by application code.","title":"Receiving a Request"},{"location":"http_server-Session/#sending-a-response","text":"interface tag Session","title":"Sending a Response"},{"location":"http_server-Session/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"http_server-Session/#send_start","text":"[Source]","title":"send_start"},{"location":"http_server-Session/#verbose-api","text":"Start sending a response, submitting the Response status and headers. Sending a response via the verbose API needs to be done in 2 or more steps: Session.send_start - exactly once - submit status and headers Session.send_chunk - 0 or more times - submit body Session.send_finished - exactly once - clean up resources be send_start( respone: Response val, request_id: USize val)","title":"Verbose API"},{"location":"http_server-Session/#parameters","text":"respone: Response val request_id: USize val","title":"Parameters"},{"location":"http_server-Session/#send_chunk","text":"[Source]","title":"send_chunk"},{"location":"http_server-Session/#verbose-api_1","text":"Send a piece of body data of the request identified by request_id . This might be the whole body or just a piece of it. Notify the Session that the body has been fully sent, by calling Session.send_finished . be send_chunk( data: (String val | Array[U8 val] val), request_id: USize val)","title":"Verbose API"},{"location":"http_server-Session/#parameters_1","text":"data: ( String val | Array [ U8 val] val) request_id: USize val","title":"Parameters"},{"location":"http_server-Session/#send_finished","text":"[Source]","title":"send_finished"},{"location":"http_server-Session/#verbose-api_2","text":"Indicate that the response for request_id has been completed, that is, its status, headers and body have been sent. This will clean up resources on the session and might send pending pipelined responses in addition to this response. If this behaviour isnt called, the server might misbehave, especially with clients doing HTTP pipelining. be send_finished( request_id: USize val)","title":"Verbose API"},{"location":"http_server-Session/#parameters_2","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-Session/#send_cancel","text":"[Source] Cancel sending an in-flight response. As the Session will be invalid afterwards, as the response might not have been sent completely, it is best to close the session afterwards using Session.dispose() . be send_cancel( request_id: USize val)","title":"send_cancel"},{"location":"http_server-Session/#parameters_3","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-Session/#send_no_body","text":"[Source]","title":"send_no_body"},{"location":"http_server-Session/#simple-api","text":"Send a bodyless Response in one call. This call will do all the work of sending the response and cleaning up resources. No need to call Session.send_finished() anymore for this request. be send_no_body( response: Response val, request_id: USize val)","title":"Simple API"},{"location":"http_server-Session/#parameters_4","text":"response: Response val request_id: USize val","title":"Parameters"},{"location":"http_server-Session/#send","text":"[Source]","title":"send"},{"location":"http_server-Session/#simple-api_1","text":"Send an Response with a body in one call. The body must be a ByteArrays instance. Example: // ... var bytes = ByteArrays bytes = bytes + \"first line\" + \"\\n\" bytes = bytes + \"second line\" + \"\\n\" bytes = bytes + \"third line\" session.send(response, bytes, request_id) // ... This call will do all the work of sending the response and cleaning up resources. No need to call Session.send_finished() anymore for this request. be send( response: Response val, body: ByteArrays val, request_id: USize val)","title":"Simple API"},{"location":"http_server-Session/#parameters_5","text":"response: Response val body: ByteArrays val request_id: USize val","title":"Parameters"},{"location":"http_server-Session/#send_raw","text":"[Source]","title":"send_raw"},{"location":"http_server-Session/#optimized-raw-api","text":"Send raw bytes to the Session in form of a ByteSeqIter . These bytes may or may not include the response body. You can use Session.send_chunk() to send the response body piece by piece. If the session should be closed after sending this response, no matter the requested standard HTTP connection handling, set close_session to true . To be a good HTTP citizen, include a Connection: close header in the raw response, to signal to the client to also close the session. If set to false , then normal HTTP connection handling applies (request Connection header, HTTP/1.0 without Connection: keep-alive , etc.). To finish sending the response, it is required to call Session.send_finished() to wrap things up, otherwise the server might misbehave. This API uses the TCPConnection.writev method to optimize putting the given bytes out to the wire. To make this optimized path more usable, this library provides the ResponseBuilder , which builds up a response into a ByteSeqIter , thus taylored towards being used with this API. Example: class MyHandler is Handler let _session: Session new create(session: Session) => _session = session fun ref apply(request: Request val, request_id: RequestID): Any => let body = match request.content_length() | let cl: USize => \"You've sent us \" + cl.string() + \" bytes! Thank you!\" | None if request.transfer_coding() is Chunked => \"You've sent us some chunks! That's cool!\" | None => \"Dunno how much you've sent us. Probably nothing. That's alright.\" end _session.send_raw( Responses.builder() .set_status(StatusOK) .add_header(\"Content-Type\", \"text/plain; charset=UTF-8\") .add_header(\"Content-Length\", body.size().string()) .finish_headers() .add_chunk(body) .build(), request_id ) // never forget !!! _session.send_finished(request_id) be send_raw( raw: ByteSeqIter val, request_id: USize val, close_session: Bool val = false)","title":"Optimized raw API"},{"location":"http_server-Session/#parameters_6","text":"raw: ByteSeqIter val request_id: USize val close_session: Bool val = false","title":"Parameters"},{"location":"http_server-Session/#dispose","text":"[Source] Close the connection from this end. be dispose()","title":"dispose"},{"location":"http_server-SimpleHandlerFactory/","text":"SimpleHandlerFactory[T: HandlerWithoutContext ] \u00b6 [Source] HandlerFactory for a HandlerWithoutContext. Just create it like: let server = Server( ..., SimpleHandlerFactory[MySimpleHandler], ... ) primitive val SimpleHandlerFactory[T: HandlerWithoutContext] Constructors \u00b6 create \u00b6 [Source] new val create() : SimpleHandlerFactory[T] val^ Returns \u00b6 SimpleHandlerFactory [T] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( session: Session tag) : Handler ref^ Parameters \u00b6 session: Session tag Returns \u00b6 Handler ref^ eq \u00b6 [Source] fun box eq( that: SimpleHandlerFactory[T] val) : Bool val Parameters \u00b6 that: SimpleHandlerFactory [T] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SimpleHandlerFactory[T] val) : Bool val Parameters \u00b6 that: SimpleHandlerFactory [T] val Returns \u00b6 Bool val","title":"primitive SimpleHandlerFactory"},{"location":"http_server-SimpleHandlerFactory/#simplehandlerfactoryt-handlerwithoutcontext","text":"[Source] HandlerFactory for a HandlerWithoutContext. Just create it like: let server = Server( ..., SimpleHandlerFactory[MySimpleHandler], ... ) primitive val SimpleHandlerFactory[T: HandlerWithoutContext]","title":"SimpleHandlerFactory[T: HandlerWithoutContext]"},{"location":"http_server-SimpleHandlerFactory/#constructors","text":"","title":"Constructors"},{"location":"http_server-SimpleHandlerFactory/#create","text":"[Source] new val create() : SimpleHandlerFactory[T] val^","title":"create"},{"location":"http_server-SimpleHandlerFactory/#returns","text":"SimpleHandlerFactory [T] val^","title":"Returns"},{"location":"http_server-SimpleHandlerFactory/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-SimpleHandlerFactory/#apply","text":"[Source] fun box apply( session: Session tag) : Handler ref^","title":"apply"},{"location":"http_server-SimpleHandlerFactory/#parameters","text":"session: Session tag","title":"Parameters"},{"location":"http_server-SimpleHandlerFactory/#returns_1","text":"Handler ref^","title":"Returns"},{"location":"http_server-SimpleHandlerFactory/#eq","text":"[Source] fun box eq( that: SimpleHandlerFactory[T] val) : Bool val","title":"eq"},{"location":"http_server-SimpleHandlerFactory/#parameters_1","text":"that: SimpleHandlerFactory [T] val","title":"Parameters"},{"location":"http_server-SimpleHandlerFactory/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-SimpleHandlerFactory/#ne","text":"[Source] fun box ne( that: SimpleHandlerFactory[T] val) : Bool val","title":"ne"},{"location":"http_server-SimpleHandlerFactory/#parameters_2","text":"that: SimpleHandlerFactory [T] val","title":"Parameters"},{"location":"http_server-SimpleHandlerFactory/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-Status/","text":"Status \u00b6 [Source] HTTP status code. See: https://tools.ietf.org/html/rfc2616#section-10 interface val Status Public Functions \u00b6 apply \u00b6 [Source] Get the status code as number. fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] Get the status code as string including Status-Code and Reason-Phrase as it usually appears in the response status line: https://tools.ietf.org/html/rfc2616#section-6.1 fun box string() : String val Returns \u00b6 String val","title":"interface Status"},{"location":"http_server-Status/#status","text":"[Source] HTTP status code. See: https://tools.ietf.org/html/rfc2616#section-10 interface val Status","title":"Status"},{"location":"http_server-Status/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-Status/#apply","text":"[Source] Get the status code as number. fun box apply() : U16 val","title":"apply"},{"location":"http_server-Status/#returns","text":"U16 val","title":"Returns"},{"location":"http_server-Status/#string","text":"[Source] Get the status code as string including Status-Code and Reason-Phrase as it usually appears in the response status line: https://tools.ietf.org/html/rfc2616#section-6.1 fun box string() : String val","title":"string"},{"location":"http_server-Status/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-StatusAccepted/","text":"StatusAccepted \u00b6 [Source] primitive val StatusAccepted is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusAccepted val^ Returns \u00b6 StatusAccepted val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusAccepted val) : Bool val Parameters \u00b6 that: StatusAccepted val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusAccepted val) : Bool val Parameters \u00b6 that: StatusAccepted val Returns \u00b6 Bool val","title":"primitive StatusAccepted"},{"location":"http_server-StatusAccepted/#statusaccepted","text":"[Source] primitive val StatusAccepted is Status val","title":"StatusAccepted"},{"location":"http_server-StatusAccepted/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusAccepted/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusAccepted/#create","text":"[Source] new val create() : StatusAccepted val^","title":"create"},{"location":"http_server-StatusAccepted/#returns","text":"StatusAccepted val^","title":"Returns"},{"location":"http_server-StatusAccepted/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusAccepted/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusAccepted/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusAccepted/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusAccepted/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusAccepted/#eq","text":"[Source] fun box eq( that: StatusAccepted val) : Bool val","title":"eq"},{"location":"http_server-StatusAccepted/#parameters","text":"that: StatusAccepted val","title":"Parameters"},{"location":"http_server-StatusAccepted/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusAccepted/#ne","text":"[Source] fun box ne( that: StatusAccepted val) : Bool val","title":"ne"},{"location":"http_server-StatusAccepted/#parameters_1","text":"that: StatusAccepted val","title":"Parameters"},{"location":"http_server-StatusAccepted/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusBadGateway/","text":"StatusBadGateway \u00b6 [Source] primitive val StatusBadGateway is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusBadGateway val^ Returns \u00b6 StatusBadGateway val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusBadGateway val) : Bool val Parameters \u00b6 that: StatusBadGateway val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusBadGateway val) : Bool val Parameters \u00b6 that: StatusBadGateway val Returns \u00b6 Bool val","title":"primitive StatusBadGateway"},{"location":"http_server-StatusBadGateway/#statusbadgateway","text":"[Source] primitive val StatusBadGateway is Status val","title":"StatusBadGateway"},{"location":"http_server-StatusBadGateway/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusBadGateway/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusBadGateway/#create","text":"[Source] new val create() : StatusBadGateway val^","title":"create"},{"location":"http_server-StatusBadGateway/#returns","text":"StatusBadGateway val^","title":"Returns"},{"location":"http_server-StatusBadGateway/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusBadGateway/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusBadGateway/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusBadGateway/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusBadGateway/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusBadGateway/#eq","text":"[Source] fun box eq( that: StatusBadGateway val) : Bool val","title":"eq"},{"location":"http_server-StatusBadGateway/#parameters","text":"that: StatusBadGateway val","title":"Parameters"},{"location":"http_server-StatusBadGateway/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusBadGateway/#ne","text":"[Source] fun box ne( that: StatusBadGateway val) : Bool val","title":"ne"},{"location":"http_server-StatusBadGateway/#parameters_1","text":"that: StatusBadGateway val","title":"Parameters"},{"location":"http_server-StatusBadGateway/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusBadRequest/","text":"StatusBadRequest \u00b6 [Source] primitive val StatusBadRequest is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusBadRequest val^ Returns \u00b6 StatusBadRequest val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusBadRequest val) : Bool val Parameters \u00b6 that: StatusBadRequest val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusBadRequest val) : Bool val Parameters \u00b6 that: StatusBadRequest val Returns \u00b6 Bool val","title":"primitive StatusBadRequest"},{"location":"http_server-StatusBadRequest/#statusbadrequest","text":"[Source] primitive val StatusBadRequest is Status val","title":"StatusBadRequest"},{"location":"http_server-StatusBadRequest/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusBadRequest/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusBadRequest/#create","text":"[Source] new val create() : StatusBadRequest val^","title":"create"},{"location":"http_server-StatusBadRequest/#returns","text":"StatusBadRequest val^","title":"Returns"},{"location":"http_server-StatusBadRequest/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusBadRequest/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusBadRequest/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusBadRequest/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusBadRequest/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusBadRequest/#eq","text":"[Source] fun box eq( that: StatusBadRequest val) : Bool val","title":"eq"},{"location":"http_server-StatusBadRequest/#parameters","text":"that: StatusBadRequest val","title":"Parameters"},{"location":"http_server-StatusBadRequest/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusBadRequest/#ne","text":"[Source] fun box ne( that: StatusBadRequest val) : Bool val","title":"ne"},{"location":"http_server-StatusBadRequest/#parameters_1","text":"that: StatusBadRequest val","title":"Parameters"},{"location":"http_server-StatusBadRequest/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusConflict/","text":"StatusConflict \u00b6 [Source] primitive val StatusConflict is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusConflict val^ Returns \u00b6 StatusConflict val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusConflict val) : Bool val Parameters \u00b6 that: StatusConflict val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusConflict val) : Bool val Parameters \u00b6 that: StatusConflict val Returns \u00b6 Bool val","title":"primitive StatusConflict"},{"location":"http_server-StatusConflict/#statusconflict","text":"[Source] primitive val StatusConflict is Status val","title":"StatusConflict"},{"location":"http_server-StatusConflict/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusConflict/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusConflict/#create","text":"[Source] new val create() : StatusConflict val^","title":"create"},{"location":"http_server-StatusConflict/#returns","text":"StatusConflict val^","title":"Returns"},{"location":"http_server-StatusConflict/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusConflict/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusConflict/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusConflict/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusConflict/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusConflict/#eq","text":"[Source] fun box eq( that: StatusConflict val) : Bool val","title":"eq"},{"location":"http_server-StatusConflict/#parameters","text":"that: StatusConflict val","title":"Parameters"},{"location":"http_server-StatusConflict/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusConflict/#ne","text":"[Source] fun box ne( that: StatusConflict val) : Bool val","title":"ne"},{"location":"http_server-StatusConflict/#parameters_1","text":"that: StatusConflict val","title":"Parameters"},{"location":"http_server-StatusConflict/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusContinue/","text":"StatusContinue \u00b6 [Source] primitive val StatusContinue is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusContinue val^ Returns \u00b6 StatusContinue val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusContinue val) : Bool val Parameters \u00b6 that: StatusContinue val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusContinue val) : Bool val Parameters \u00b6 that: StatusContinue val Returns \u00b6 Bool val","title":"primitive StatusContinue"},{"location":"http_server-StatusContinue/#statuscontinue","text":"[Source] primitive val StatusContinue is Status val","title":"StatusContinue"},{"location":"http_server-StatusContinue/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusContinue/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusContinue/#create","text":"[Source] new val create() : StatusContinue val^","title":"create"},{"location":"http_server-StatusContinue/#returns","text":"StatusContinue val^","title":"Returns"},{"location":"http_server-StatusContinue/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusContinue/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusContinue/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusContinue/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusContinue/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusContinue/#eq","text":"[Source] fun box eq( that: StatusContinue val) : Bool val","title":"eq"},{"location":"http_server-StatusContinue/#parameters","text":"that: StatusContinue val","title":"Parameters"},{"location":"http_server-StatusContinue/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusContinue/#ne","text":"[Source] fun box ne( that: StatusContinue val) : Bool val","title":"ne"},{"location":"http_server-StatusContinue/#parameters_1","text":"that: StatusContinue val","title":"Parameters"},{"location":"http_server-StatusContinue/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusCreated/","text":"StatusCreated \u00b6 [Source] primitive val StatusCreated is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusCreated val^ Returns \u00b6 StatusCreated val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusCreated val) : Bool val Parameters \u00b6 that: StatusCreated val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusCreated val) : Bool val Parameters \u00b6 that: StatusCreated val Returns \u00b6 Bool val","title":"primitive StatusCreated"},{"location":"http_server-StatusCreated/#statuscreated","text":"[Source] primitive val StatusCreated is Status val","title":"StatusCreated"},{"location":"http_server-StatusCreated/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusCreated/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusCreated/#create","text":"[Source] new val create() : StatusCreated val^","title":"create"},{"location":"http_server-StatusCreated/#returns","text":"StatusCreated val^","title":"Returns"},{"location":"http_server-StatusCreated/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusCreated/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusCreated/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusCreated/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusCreated/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusCreated/#eq","text":"[Source] fun box eq( that: StatusCreated val) : Bool val","title":"eq"},{"location":"http_server-StatusCreated/#parameters","text":"that: StatusCreated val","title":"Parameters"},{"location":"http_server-StatusCreated/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusCreated/#ne","text":"[Source] fun box ne( that: StatusCreated val) : Bool val","title":"ne"},{"location":"http_server-StatusCreated/#parameters_1","text":"that: StatusCreated val","title":"Parameters"},{"location":"http_server-StatusCreated/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusExpectationFailed/","text":"StatusExpectationFailed \u00b6 [Source] primitive val StatusExpectationFailed is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusExpectationFailed val^ Returns \u00b6 StatusExpectationFailed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusExpectationFailed val) : Bool val Parameters \u00b6 that: StatusExpectationFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusExpectationFailed val) : Bool val Parameters \u00b6 that: StatusExpectationFailed val Returns \u00b6 Bool val","title":"primitive StatusExpectationFailed"},{"location":"http_server-StatusExpectationFailed/#statusexpectationfailed","text":"[Source] primitive val StatusExpectationFailed is Status val","title":"StatusExpectationFailed"},{"location":"http_server-StatusExpectationFailed/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusExpectationFailed/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusExpectationFailed/#create","text":"[Source] new val create() : StatusExpectationFailed val^","title":"create"},{"location":"http_server-StatusExpectationFailed/#returns","text":"StatusExpectationFailed val^","title":"Returns"},{"location":"http_server-StatusExpectationFailed/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusExpectationFailed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusExpectationFailed/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusExpectationFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusExpectationFailed/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusExpectationFailed/#eq","text":"[Source] fun box eq( that: StatusExpectationFailed val) : Bool val","title":"eq"},{"location":"http_server-StatusExpectationFailed/#parameters","text":"that: StatusExpectationFailed val","title":"Parameters"},{"location":"http_server-StatusExpectationFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusExpectationFailed/#ne","text":"[Source] fun box ne( that: StatusExpectationFailed val) : Bool val","title":"ne"},{"location":"http_server-StatusExpectationFailed/#parameters_1","text":"that: StatusExpectationFailed val","title":"Parameters"},{"location":"http_server-StatusExpectationFailed/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusForbidden/","text":"StatusForbidden \u00b6 [Source] primitive val StatusForbidden is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusForbidden val^ Returns \u00b6 StatusForbidden val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusForbidden val) : Bool val Parameters \u00b6 that: StatusForbidden val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusForbidden val) : Bool val Parameters \u00b6 that: StatusForbidden val Returns \u00b6 Bool val","title":"primitive StatusForbidden"},{"location":"http_server-StatusForbidden/#statusforbidden","text":"[Source] primitive val StatusForbidden is Status val","title":"StatusForbidden"},{"location":"http_server-StatusForbidden/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusForbidden/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusForbidden/#create","text":"[Source] new val create() : StatusForbidden val^","title":"create"},{"location":"http_server-StatusForbidden/#returns","text":"StatusForbidden val^","title":"Returns"},{"location":"http_server-StatusForbidden/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusForbidden/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusForbidden/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusForbidden/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusForbidden/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusForbidden/#eq","text":"[Source] fun box eq( that: StatusForbidden val) : Bool val","title":"eq"},{"location":"http_server-StatusForbidden/#parameters","text":"that: StatusForbidden val","title":"Parameters"},{"location":"http_server-StatusForbidden/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusForbidden/#ne","text":"[Source] fun box ne( that: StatusForbidden val) : Bool val","title":"ne"},{"location":"http_server-StatusForbidden/#parameters_1","text":"that: StatusForbidden val","title":"Parameters"},{"location":"http_server-StatusForbidden/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusFound/","text":"StatusFound \u00b6 [Source] primitive val StatusFound is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusFound val^ Returns \u00b6 StatusFound val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusFound val) : Bool val Parameters \u00b6 that: StatusFound val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusFound val) : Bool val Parameters \u00b6 that: StatusFound val Returns \u00b6 Bool val","title":"primitive StatusFound"},{"location":"http_server-StatusFound/#statusfound","text":"[Source] primitive val StatusFound is Status val","title":"StatusFound"},{"location":"http_server-StatusFound/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusFound/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusFound/#create","text":"[Source] new val create() : StatusFound val^","title":"create"},{"location":"http_server-StatusFound/#returns","text":"StatusFound val^","title":"Returns"},{"location":"http_server-StatusFound/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusFound/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusFound/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusFound/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusFound/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusFound/#eq","text":"[Source] fun box eq( that: StatusFound val) : Bool val","title":"eq"},{"location":"http_server-StatusFound/#parameters","text":"that: StatusFound val","title":"Parameters"},{"location":"http_server-StatusFound/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusFound/#ne","text":"[Source] fun box ne( that: StatusFound val) : Bool val","title":"ne"},{"location":"http_server-StatusFound/#parameters_1","text":"that: StatusFound val","title":"Parameters"},{"location":"http_server-StatusFound/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusGatewayTimeout/","text":"StatusGatewayTimeout \u00b6 [Source] primitive val StatusGatewayTimeout is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusGatewayTimeout val^ Returns \u00b6 StatusGatewayTimeout val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusGatewayTimeout val) : Bool val Parameters \u00b6 that: StatusGatewayTimeout val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusGatewayTimeout val) : Bool val Parameters \u00b6 that: StatusGatewayTimeout val Returns \u00b6 Bool val","title":"primitive StatusGatewayTimeout"},{"location":"http_server-StatusGatewayTimeout/#statusgatewaytimeout","text":"[Source] primitive val StatusGatewayTimeout is Status val","title":"StatusGatewayTimeout"},{"location":"http_server-StatusGatewayTimeout/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusGatewayTimeout/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusGatewayTimeout/#create","text":"[Source] new val create() : StatusGatewayTimeout val^","title":"create"},{"location":"http_server-StatusGatewayTimeout/#returns","text":"StatusGatewayTimeout val^","title":"Returns"},{"location":"http_server-StatusGatewayTimeout/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusGatewayTimeout/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusGatewayTimeout/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusGatewayTimeout/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusGatewayTimeout/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusGatewayTimeout/#eq","text":"[Source] fun box eq( that: StatusGatewayTimeout val) : Bool val","title":"eq"},{"location":"http_server-StatusGatewayTimeout/#parameters","text":"that: StatusGatewayTimeout val","title":"Parameters"},{"location":"http_server-StatusGatewayTimeout/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusGatewayTimeout/#ne","text":"[Source] fun box ne( that: StatusGatewayTimeout val) : Bool val","title":"ne"},{"location":"http_server-StatusGatewayTimeout/#parameters_1","text":"that: StatusGatewayTimeout val","title":"Parameters"},{"location":"http_server-StatusGatewayTimeout/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusGone/","text":"StatusGone \u00b6 [Source] primitive val StatusGone is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusGone val^ Returns \u00b6 StatusGone val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusGone val) : Bool val Parameters \u00b6 that: StatusGone val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusGone val) : Bool val Parameters \u00b6 that: StatusGone val Returns \u00b6 Bool val","title":"primitive StatusGone"},{"location":"http_server-StatusGone/#statusgone","text":"[Source] primitive val StatusGone is Status val","title":"StatusGone"},{"location":"http_server-StatusGone/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusGone/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusGone/#create","text":"[Source] new val create() : StatusGone val^","title":"create"},{"location":"http_server-StatusGone/#returns","text":"StatusGone val^","title":"Returns"},{"location":"http_server-StatusGone/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusGone/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusGone/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusGone/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusGone/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusGone/#eq","text":"[Source] fun box eq( that: StatusGone val) : Bool val","title":"eq"},{"location":"http_server-StatusGone/#parameters","text":"that: StatusGone val","title":"Parameters"},{"location":"http_server-StatusGone/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusGone/#ne","text":"[Source] fun box ne( that: StatusGone val) : Bool val","title":"ne"},{"location":"http_server-StatusGone/#parameters_1","text":"that: StatusGone val","title":"Parameters"},{"location":"http_server-StatusGone/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusHTTPVersionNotSupported/","text":"StatusHTTPVersionNotSupported \u00b6 [Source] primitive val StatusHTTPVersionNotSupported is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusHTTPVersionNotSupported val^ Returns \u00b6 StatusHTTPVersionNotSupported val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusHTTPVersionNotSupported val) : Bool val Parameters \u00b6 that: StatusHTTPVersionNotSupported val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusHTTPVersionNotSupported val) : Bool val Parameters \u00b6 that: StatusHTTPVersionNotSupported val Returns \u00b6 Bool val","title":"primitive StatusHTTPVersionNotSupported"},{"location":"http_server-StatusHTTPVersionNotSupported/#statushttpversionnotsupported","text":"[Source] primitive val StatusHTTPVersionNotSupported is Status val","title":"StatusHTTPVersionNotSupported"},{"location":"http_server-StatusHTTPVersionNotSupported/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusHTTPVersionNotSupported/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusHTTPVersionNotSupported/#create","text":"[Source] new val create() : StatusHTTPVersionNotSupported val^","title":"create"},{"location":"http_server-StatusHTTPVersionNotSupported/#returns","text":"StatusHTTPVersionNotSupported val^","title":"Returns"},{"location":"http_server-StatusHTTPVersionNotSupported/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusHTTPVersionNotSupported/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusHTTPVersionNotSupported/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusHTTPVersionNotSupported/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusHTTPVersionNotSupported/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusHTTPVersionNotSupported/#eq","text":"[Source] fun box eq( that: StatusHTTPVersionNotSupported val) : Bool val","title":"eq"},{"location":"http_server-StatusHTTPVersionNotSupported/#parameters","text":"that: StatusHTTPVersionNotSupported val","title":"Parameters"},{"location":"http_server-StatusHTTPVersionNotSupported/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusHTTPVersionNotSupported/#ne","text":"[Source] fun box ne( that: StatusHTTPVersionNotSupported val) : Bool val","title":"ne"},{"location":"http_server-StatusHTTPVersionNotSupported/#parameters_1","text":"that: StatusHTTPVersionNotSupported val","title":"Parameters"},{"location":"http_server-StatusHTTPVersionNotSupported/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusInternalServerError/","text":"StatusInternalServerError \u00b6 [Source] primitive val StatusInternalServerError is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusInternalServerError val^ Returns \u00b6 StatusInternalServerError val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusInternalServerError val) : Bool val Parameters \u00b6 that: StatusInternalServerError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusInternalServerError val) : Bool val Parameters \u00b6 that: StatusInternalServerError val Returns \u00b6 Bool val","title":"primitive StatusInternalServerError"},{"location":"http_server-StatusInternalServerError/#statusinternalservererror","text":"[Source] primitive val StatusInternalServerError is Status val","title":"StatusInternalServerError"},{"location":"http_server-StatusInternalServerError/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusInternalServerError/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusInternalServerError/#create","text":"[Source] new val create() : StatusInternalServerError val^","title":"create"},{"location":"http_server-StatusInternalServerError/#returns","text":"StatusInternalServerError val^","title":"Returns"},{"location":"http_server-StatusInternalServerError/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusInternalServerError/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusInternalServerError/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusInternalServerError/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusInternalServerError/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusInternalServerError/#eq","text":"[Source] fun box eq( that: StatusInternalServerError val) : Bool val","title":"eq"},{"location":"http_server-StatusInternalServerError/#parameters","text":"that: StatusInternalServerError val","title":"Parameters"},{"location":"http_server-StatusInternalServerError/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusInternalServerError/#ne","text":"[Source] fun box ne( that: StatusInternalServerError val) : Bool val","title":"ne"},{"location":"http_server-StatusInternalServerError/#parameters_1","text":"that: StatusInternalServerError val","title":"Parameters"},{"location":"http_server-StatusInternalServerError/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusLengthRequired/","text":"StatusLengthRequired \u00b6 [Source] primitive val StatusLengthRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusLengthRequired val^ Returns \u00b6 StatusLengthRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusLengthRequired val) : Bool val Parameters \u00b6 that: StatusLengthRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusLengthRequired val) : Bool val Parameters \u00b6 that: StatusLengthRequired val Returns \u00b6 Bool val","title":"primitive StatusLengthRequired"},{"location":"http_server-StatusLengthRequired/#statuslengthrequired","text":"[Source] primitive val StatusLengthRequired is Status val","title":"StatusLengthRequired"},{"location":"http_server-StatusLengthRequired/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusLengthRequired/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusLengthRequired/#create","text":"[Source] new val create() : StatusLengthRequired val^","title":"create"},{"location":"http_server-StatusLengthRequired/#returns","text":"StatusLengthRequired val^","title":"Returns"},{"location":"http_server-StatusLengthRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusLengthRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusLengthRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusLengthRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusLengthRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusLengthRequired/#eq","text":"[Source] fun box eq( that: StatusLengthRequired val) : Bool val","title":"eq"},{"location":"http_server-StatusLengthRequired/#parameters","text":"that: StatusLengthRequired val","title":"Parameters"},{"location":"http_server-StatusLengthRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusLengthRequired/#ne","text":"[Source] fun box ne( that: StatusLengthRequired val) : Bool val","title":"ne"},{"location":"http_server-StatusLengthRequired/#parameters_1","text":"that: StatusLengthRequired val","title":"Parameters"},{"location":"http_server-StatusLengthRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusMethodNotAllowed/","text":"StatusMethodNotAllowed \u00b6 [Source] primitive val StatusMethodNotAllowed is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusMethodNotAllowed val^ Returns \u00b6 StatusMethodNotAllowed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusMethodNotAllowed val) : Bool val Parameters \u00b6 that: StatusMethodNotAllowed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusMethodNotAllowed val) : Bool val Parameters \u00b6 that: StatusMethodNotAllowed val Returns \u00b6 Bool val","title":"primitive StatusMethodNotAllowed"},{"location":"http_server-StatusMethodNotAllowed/#statusmethodnotallowed","text":"[Source] primitive val StatusMethodNotAllowed is Status val","title":"StatusMethodNotAllowed"},{"location":"http_server-StatusMethodNotAllowed/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusMethodNotAllowed/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusMethodNotAllowed/#create","text":"[Source] new val create() : StatusMethodNotAllowed val^","title":"create"},{"location":"http_server-StatusMethodNotAllowed/#returns","text":"StatusMethodNotAllowed val^","title":"Returns"},{"location":"http_server-StatusMethodNotAllowed/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusMethodNotAllowed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusMethodNotAllowed/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusMethodNotAllowed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusMethodNotAllowed/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusMethodNotAllowed/#eq","text":"[Source] fun box eq( that: StatusMethodNotAllowed val) : Bool val","title":"eq"},{"location":"http_server-StatusMethodNotAllowed/#parameters","text":"that: StatusMethodNotAllowed val","title":"Parameters"},{"location":"http_server-StatusMethodNotAllowed/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusMethodNotAllowed/#ne","text":"[Source] fun box ne( that: StatusMethodNotAllowed val) : Bool val","title":"ne"},{"location":"http_server-StatusMethodNotAllowed/#parameters_1","text":"that: StatusMethodNotAllowed val","title":"Parameters"},{"location":"http_server-StatusMethodNotAllowed/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusMovedPermanently/","text":"StatusMovedPermanently \u00b6 [Source] primitive val StatusMovedPermanently is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusMovedPermanently val^ Returns \u00b6 StatusMovedPermanently val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusMovedPermanently val) : Bool val Parameters \u00b6 that: StatusMovedPermanently val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusMovedPermanently val) : Bool val Parameters \u00b6 that: StatusMovedPermanently val Returns \u00b6 Bool val","title":"primitive StatusMovedPermanently"},{"location":"http_server-StatusMovedPermanently/#statusmovedpermanently","text":"[Source] primitive val StatusMovedPermanently is Status val","title":"StatusMovedPermanently"},{"location":"http_server-StatusMovedPermanently/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusMovedPermanently/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusMovedPermanently/#create","text":"[Source] new val create() : StatusMovedPermanently val^","title":"create"},{"location":"http_server-StatusMovedPermanently/#returns","text":"StatusMovedPermanently val^","title":"Returns"},{"location":"http_server-StatusMovedPermanently/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusMovedPermanently/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusMovedPermanently/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusMovedPermanently/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusMovedPermanently/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusMovedPermanently/#eq","text":"[Source] fun box eq( that: StatusMovedPermanently val) : Bool val","title":"eq"},{"location":"http_server-StatusMovedPermanently/#parameters","text":"that: StatusMovedPermanently val","title":"Parameters"},{"location":"http_server-StatusMovedPermanently/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusMovedPermanently/#ne","text":"[Source] fun box ne( that: StatusMovedPermanently val) : Bool val","title":"ne"},{"location":"http_server-StatusMovedPermanently/#parameters_1","text":"that: StatusMovedPermanently val","title":"Parameters"},{"location":"http_server-StatusMovedPermanently/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusMultipleChoices/","text":"StatusMultipleChoices \u00b6 [Source] primitive val StatusMultipleChoices is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusMultipleChoices val^ Returns \u00b6 StatusMultipleChoices val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusMultipleChoices val) : Bool val Parameters \u00b6 that: StatusMultipleChoices val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusMultipleChoices val) : Bool val Parameters \u00b6 that: StatusMultipleChoices val Returns \u00b6 Bool val","title":"primitive StatusMultipleChoices"},{"location":"http_server-StatusMultipleChoices/#statusmultiplechoices","text":"[Source] primitive val StatusMultipleChoices is Status val","title":"StatusMultipleChoices"},{"location":"http_server-StatusMultipleChoices/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusMultipleChoices/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusMultipleChoices/#create","text":"[Source] new val create() : StatusMultipleChoices val^","title":"create"},{"location":"http_server-StatusMultipleChoices/#returns","text":"StatusMultipleChoices val^","title":"Returns"},{"location":"http_server-StatusMultipleChoices/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusMultipleChoices/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusMultipleChoices/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusMultipleChoices/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusMultipleChoices/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusMultipleChoices/#eq","text":"[Source] fun box eq( that: StatusMultipleChoices val) : Bool val","title":"eq"},{"location":"http_server-StatusMultipleChoices/#parameters","text":"that: StatusMultipleChoices val","title":"Parameters"},{"location":"http_server-StatusMultipleChoices/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusMultipleChoices/#ne","text":"[Source] fun box ne( that: StatusMultipleChoices val) : Bool val","title":"ne"},{"location":"http_server-StatusMultipleChoices/#parameters_1","text":"that: StatusMultipleChoices val","title":"Parameters"},{"location":"http_server-StatusMultipleChoices/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNetworkAuthenticationRequired/","text":"StatusNetworkAuthenticationRequired \u00b6 [Source] primitive val StatusNetworkAuthenticationRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNetworkAuthenticationRequired val^ Returns \u00b6 StatusNetworkAuthenticationRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNetworkAuthenticationRequired val) : Bool val Parameters \u00b6 that: StatusNetworkAuthenticationRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNetworkAuthenticationRequired val) : Bool val Parameters \u00b6 that: StatusNetworkAuthenticationRequired val Returns \u00b6 Bool val","title":"primitive StatusNetworkAuthenticationRequired"},{"location":"http_server-StatusNetworkAuthenticationRequired/#statusnetworkauthenticationrequired","text":"[Source] primitive val StatusNetworkAuthenticationRequired is Status val","title":"StatusNetworkAuthenticationRequired"},{"location":"http_server-StatusNetworkAuthenticationRequired/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNetworkAuthenticationRequired/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNetworkAuthenticationRequired/#create","text":"[Source] new val create() : StatusNetworkAuthenticationRequired val^","title":"create"},{"location":"http_server-StatusNetworkAuthenticationRequired/#returns","text":"StatusNetworkAuthenticationRequired val^","title":"Returns"},{"location":"http_server-StatusNetworkAuthenticationRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNetworkAuthenticationRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNetworkAuthenticationRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNetworkAuthenticationRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNetworkAuthenticationRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNetworkAuthenticationRequired/#eq","text":"[Source] fun box eq( that: StatusNetworkAuthenticationRequired val) : Bool val","title":"eq"},{"location":"http_server-StatusNetworkAuthenticationRequired/#parameters","text":"that: StatusNetworkAuthenticationRequired val","title":"Parameters"},{"location":"http_server-StatusNetworkAuthenticationRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNetworkAuthenticationRequired/#ne","text":"[Source] fun box ne( that: StatusNetworkAuthenticationRequired val) : Bool val","title":"ne"},{"location":"http_server-StatusNetworkAuthenticationRequired/#parameters_1","text":"that: StatusNetworkAuthenticationRequired val","title":"Parameters"},{"location":"http_server-StatusNetworkAuthenticationRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNoContent/","text":"StatusNoContent \u00b6 [Source] primitive val StatusNoContent is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNoContent val^ Returns \u00b6 StatusNoContent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNoContent val) : Bool val Parameters \u00b6 that: StatusNoContent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNoContent val) : Bool val Parameters \u00b6 that: StatusNoContent val Returns \u00b6 Bool val","title":"primitive StatusNoContent"},{"location":"http_server-StatusNoContent/#statusnocontent","text":"[Source] primitive val StatusNoContent is Status val","title":"StatusNoContent"},{"location":"http_server-StatusNoContent/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNoContent/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNoContent/#create","text":"[Source] new val create() : StatusNoContent val^","title":"create"},{"location":"http_server-StatusNoContent/#returns","text":"StatusNoContent val^","title":"Returns"},{"location":"http_server-StatusNoContent/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNoContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNoContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNoContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNoContent/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNoContent/#eq","text":"[Source] fun box eq( that: StatusNoContent val) : Bool val","title":"eq"},{"location":"http_server-StatusNoContent/#parameters","text":"that: StatusNoContent val","title":"Parameters"},{"location":"http_server-StatusNoContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNoContent/#ne","text":"[Source] fun box ne( that: StatusNoContent val) : Bool val","title":"ne"},{"location":"http_server-StatusNoContent/#parameters_1","text":"that: StatusNoContent val","title":"Parameters"},{"location":"http_server-StatusNoContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNonAuthoritativeInfo/","text":"StatusNonAuthoritativeInfo \u00b6 [Source] primitive val StatusNonAuthoritativeInfo is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNonAuthoritativeInfo val^ Returns \u00b6 StatusNonAuthoritativeInfo val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNonAuthoritativeInfo val) : Bool val Parameters \u00b6 that: StatusNonAuthoritativeInfo val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNonAuthoritativeInfo val) : Bool val Parameters \u00b6 that: StatusNonAuthoritativeInfo val Returns \u00b6 Bool val","title":"primitive StatusNonAuthoritativeInfo"},{"location":"http_server-StatusNonAuthoritativeInfo/#statusnonauthoritativeinfo","text":"[Source] primitive val StatusNonAuthoritativeInfo is Status val","title":"StatusNonAuthoritativeInfo"},{"location":"http_server-StatusNonAuthoritativeInfo/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNonAuthoritativeInfo/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNonAuthoritativeInfo/#create","text":"[Source] new val create() : StatusNonAuthoritativeInfo val^","title":"create"},{"location":"http_server-StatusNonAuthoritativeInfo/#returns","text":"StatusNonAuthoritativeInfo val^","title":"Returns"},{"location":"http_server-StatusNonAuthoritativeInfo/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNonAuthoritativeInfo/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNonAuthoritativeInfo/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNonAuthoritativeInfo/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNonAuthoritativeInfo/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNonAuthoritativeInfo/#eq","text":"[Source] fun box eq( that: StatusNonAuthoritativeInfo val) : Bool val","title":"eq"},{"location":"http_server-StatusNonAuthoritativeInfo/#parameters","text":"that: StatusNonAuthoritativeInfo val","title":"Parameters"},{"location":"http_server-StatusNonAuthoritativeInfo/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNonAuthoritativeInfo/#ne","text":"[Source] fun box ne( that: StatusNonAuthoritativeInfo val) : Bool val","title":"ne"},{"location":"http_server-StatusNonAuthoritativeInfo/#parameters_1","text":"that: StatusNonAuthoritativeInfo val","title":"Parameters"},{"location":"http_server-StatusNonAuthoritativeInfo/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotAcceptable/","text":"StatusNotAcceptable \u00b6 [Source] primitive val StatusNotAcceptable is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotAcceptable val^ Returns \u00b6 StatusNotAcceptable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotAcceptable val) : Bool val Parameters \u00b6 that: StatusNotAcceptable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotAcceptable val) : Bool val Parameters \u00b6 that: StatusNotAcceptable val Returns \u00b6 Bool val","title":"primitive StatusNotAcceptable"},{"location":"http_server-StatusNotAcceptable/#statusnotacceptable","text":"[Source] primitive val StatusNotAcceptable is Status val","title":"StatusNotAcceptable"},{"location":"http_server-StatusNotAcceptable/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNotAcceptable/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNotAcceptable/#create","text":"[Source] new val create() : StatusNotAcceptable val^","title":"create"},{"location":"http_server-StatusNotAcceptable/#returns","text":"StatusNotAcceptable val^","title":"Returns"},{"location":"http_server-StatusNotAcceptable/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNotAcceptable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNotAcceptable/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNotAcceptable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNotAcceptable/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNotAcceptable/#eq","text":"[Source] fun box eq( that: StatusNotAcceptable val) : Bool val","title":"eq"},{"location":"http_server-StatusNotAcceptable/#parameters","text":"that: StatusNotAcceptable val","title":"Parameters"},{"location":"http_server-StatusNotAcceptable/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotAcceptable/#ne","text":"[Source] fun box ne( that: StatusNotAcceptable val) : Bool val","title":"ne"},{"location":"http_server-StatusNotAcceptable/#parameters_1","text":"that: StatusNotAcceptable val","title":"Parameters"},{"location":"http_server-StatusNotAcceptable/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotFound/","text":"StatusNotFound \u00b6 [Source] primitive val StatusNotFound is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotFound val^ Returns \u00b6 StatusNotFound val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotFound val) : Bool val Parameters \u00b6 that: StatusNotFound val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotFound val) : Bool val Parameters \u00b6 that: StatusNotFound val Returns \u00b6 Bool val","title":"primitive StatusNotFound"},{"location":"http_server-StatusNotFound/#statusnotfound","text":"[Source] primitive val StatusNotFound is Status val","title":"StatusNotFound"},{"location":"http_server-StatusNotFound/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNotFound/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNotFound/#create","text":"[Source] new val create() : StatusNotFound val^","title":"create"},{"location":"http_server-StatusNotFound/#returns","text":"StatusNotFound val^","title":"Returns"},{"location":"http_server-StatusNotFound/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNotFound/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNotFound/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNotFound/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNotFound/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNotFound/#eq","text":"[Source] fun box eq( that: StatusNotFound val) : Bool val","title":"eq"},{"location":"http_server-StatusNotFound/#parameters","text":"that: StatusNotFound val","title":"Parameters"},{"location":"http_server-StatusNotFound/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotFound/#ne","text":"[Source] fun box ne( that: StatusNotFound val) : Bool val","title":"ne"},{"location":"http_server-StatusNotFound/#parameters_1","text":"that: StatusNotFound val","title":"Parameters"},{"location":"http_server-StatusNotFound/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotImplemented/","text":"StatusNotImplemented \u00b6 [Source] primitive val StatusNotImplemented is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotImplemented val^ Returns \u00b6 StatusNotImplemented val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotImplemented val) : Bool val Parameters \u00b6 that: StatusNotImplemented val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotImplemented val) : Bool val Parameters \u00b6 that: StatusNotImplemented val Returns \u00b6 Bool val","title":"primitive StatusNotImplemented"},{"location":"http_server-StatusNotImplemented/#statusnotimplemented","text":"[Source] primitive val StatusNotImplemented is Status val","title":"StatusNotImplemented"},{"location":"http_server-StatusNotImplemented/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNotImplemented/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNotImplemented/#create","text":"[Source] new val create() : StatusNotImplemented val^","title":"create"},{"location":"http_server-StatusNotImplemented/#returns","text":"StatusNotImplemented val^","title":"Returns"},{"location":"http_server-StatusNotImplemented/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNotImplemented/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNotImplemented/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNotImplemented/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNotImplemented/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNotImplemented/#eq","text":"[Source] fun box eq( that: StatusNotImplemented val) : Bool val","title":"eq"},{"location":"http_server-StatusNotImplemented/#parameters","text":"that: StatusNotImplemented val","title":"Parameters"},{"location":"http_server-StatusNotImplemented/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotImplemented/#ne","text":"[Source] fun box ne( that: StatusNotImplemented val) : Bool val","title":"ne"},{"location":"http_server-StatusNotImplemented/#parameters_1","text":"that: StatusNotImplemented val","title":"Parameters"},{"location":"http_server-StatusNotImplemented/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotModified/","text":"StatusNotModified \u00b6 [Source] primitive val StatusNotModified is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotModified val^ Returns \u00b6 StatusNotModified val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotModified val) : Bool val Parameters \u00b6 that: StatusNotModified val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotModified val) : Bool val Parameters \u00b6 that: StatusNotModified val Returns \u00b6 Bool val","title":"primitive StatusNotModified"},{"location":"http_server-StatusNotModified/#statusnotmodified","text":"[Source] primitive val StatusNotModified is Status val","title":"StatusNotModified"},{"location":"http_server-StatusNotModified/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusNotModified/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusNotModified/#create","text":"[Source] new val create() : StatusNotModified val^","title":"create"},{"location":"http_server-StatusNotModified/#returns","text":"StatusNotModified val^","title":"Returns"},{"location":"http_server-StatusNotModified/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusNotModified/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusNotModified/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusNotModified/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusNotModified/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusNotModified/#eq","text":"[Source] fun box eq( that: StatusNotModified val) : Bool val","title":"eq"},{"location":"http_server-StatusNotModified/#parameters","text":"that: StatusNotModified val","title":"Parameters"},{"location":"http_server-StatusNotModified/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusNotModified/#ne","text":"[Source] fun box ne( that: StatusNotModified val) : Bool val","title":"ne"},{"location":"http_server-StatusNotModified/#parameters_1","text":"that: StatusNotModified val","title":"Parameters"},{"location":"http_server-StatusNotModified/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusOK/","text":"StatusOK \u00b6 [Source] primitive val StatusOK is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusOK val^ Returns \u00b6 StatusOK val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusOK val) : Bool val Parameters \u00b6 that: StatusOK val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusOK val) : Bool val Parameters \u00b6 that: StatusOK val Returns \u00b6 Bool val","title":"primitive StatusOK"},{"location":"http_server-StatusOK/#statusok","text":"[Source] primitive val StatusOK is Status val","title":"StatusOK"},{"location":"http_server-StatusOK/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusOK/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusOK/#create","text":"[Source] new val create() : StatusOK val^","title":"create"},{"location":"http_server-StatusOK/#returns","text":"StatusOK val^","title":"Returns"},{"location":"http_server-StatusOK/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusOK/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusOK/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusOK/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusOK/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusOK/#eq","text":"[Source] fun box eq( that: StatusOK val) : Bool val","title":"eq"},{"location":"http_server-StatusOK/#parameters","text":"that: StatusOK val","title":"Parameters"},{"location":"http_server-StatusOK/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusOK/#ne","text":"[Source] fun box ne( that: StatusOK val) : Bool val","title":"ne"},{"location":"http_server-StatusOK/#parameters_1","text":"that: StatusOK val","title":"Parameters"},{"location":"http_server-StatusOK/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPartialContent/","text":"StatusPartialContent \u00b6 [Source] primitive val StatusPartialContent is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPartialContent val^ Returns \u00b6 StatusPartialContent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPartialContent val) : Bool val Parameters \u00b6 that: StatusPartialContent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPartialContent val) : Bool val Parameters \u00b6 that: StatusPartialContent val Returns \u00b6 Bool val","title":"primitive StatusPartialContent"},{"location":"http_server-StatusPartialContent/#statuspartialcontent","text":"[Source] primitive val StatusPartialContent is Status val","title":"StatusPartialContent"},{"location":"http_server-StatusPartialContent/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusPartialContent/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusPartialContent/#create","text":"[Source] new val create() : StatusPartialContent val^","title":"create"},{"location":"http_server-StatusPartialContent/#returns","text":"StatusPartialContent val^","title":"Returns"},{"location":"http_server-StatusPartialContent/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusPartialContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusPartialContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusPartialContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusPartialContent/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusPartialContent/#eq","text":"[Source] fun box eq( that: StatusPartialContent val) : Bool val","title":"eq"},{"location":"http_server-StatusPartialContent/#parameters","text":"that: StatusPartialContent val","title":"Parameters"},{"location":"http_server-StatusPartialContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPartialContent/#ne","text":"[Source] fun box ne( that: StatusPartialContent val) : Bool val","title":"ne"},{"location":"http_server-StatusPartialContent/#parameters_1","text":"that: StatusPartialContent val","title":"Parameters"},{"location":"http_server-StatusPartialContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPaymentRequired/","text":"StatusPaymentRequired \u00b6 [Source] primitive val StatusPaymentRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPaymentRequired val^ Returns \u00b6 StatusPaymentRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPaymentRequired val) : Bool val Parameters \u00b6 that: StatusPaymentRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPaymentRequired val) : Bool val Parameters \u00b6 that: StatusPaymentRequired val Returns \u00b6 Bool val","title":"primitive StatusPaymentRequired"},{"location":"http_server-StatusPaymentRequired/#statuspaymentrequired","text":"[Source] primitive val StatusPaymentRequired is Status val","title":"StatusPaymentRequired"},{"location":"http_server-StatusPaymentRequired/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusPaymentRequired/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusPaymentRequired/#create","text":"[Source] new val create() : StatusPaymentRequired val^","title":"create"},{"location":"http_server-StatusPaymentRequired/#returns","text":"StatusPaymentRequired val^","title":"Returns"},{"location":"http_server-StatusPaymentRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusPaymentRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusPaymentRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusPaymentRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusPaymentRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusPaymentRequired/#eq","text":"[Source] fun box eq( that: StatusPaymentRequired val) : Bool val","title":"eq"},{"location":"http_server-StatusPaymentRequired/#parameters","text":"that: StatusPaymentRequired val","title":"Parameters"},{"location":"http_server-StatusPaymentRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPaymentRequired/#ne","text":"[Source] fun box ne( that: StatusPaymentRequired val) : Bool val","title":"ne"},{"location":"http_server-StatusPaymentRequired/#parameters_1","text":"that: StatusPaymentRequired val","title":"Parameters"},{"location":"http_server-StatusPaymentRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPreconditionFailed/","text":"StatusPreconditionFailed \u00b6 [Source] primitive val StatusPreconditionFailed is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPreconditionFailed val^ Returns \u00b6 StatusPreconditionFailed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPreconditionFailed val) : Bool val Parameters \u00b6 that: StatusPreconditionFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPreconditionFailed val) : Bool val Parameters \u00b6 that: StatusPreconditionFailed val Returns \u00b6 Bool val","title":"primitive StatusPreconditionFailed"},{"location":"http_server-StatusPreconditionFailed/#statuspreconditionfailed","text":"[Source] primitive val StatusPreconditionFailed is Status val","title":"StatusPreconditionFailed"},{"location":"http_server-StatusPreconditionFailed/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusPreconditionFailed/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusPreconditionFailed/#create","text":"[Source] new val create() : StatusPreconditionFailed val^","title":"create"},{"location":"http_server-StatusPreconditionFailed/#returns","text":"StatusPreconditionFailed val^","title":"Returns"},{"location":"http_server-StatusPreconditionFailed/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusPreconditionFailed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusPreconditionFailed/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusPreconditionFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusPreconditionFailed/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusPreconditionFailed/#eq","text":"[Source] fun box eq( that: StatusPreconditionFailed val) : Bool val","title":"eq"},{"location":"http_server-StatusPreconditionFailed/#parameters","text":"that: StatusPreconditionFailed val","title":"Parameters"},{"location":"http_server-StatusPreconditionFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPreconditionFailed/#ne","text":"[Source] fun box ne( that: StatusPreconditionFailed val) : Bool val","title":"ne"},{"location":"http_server-StatusPreconditionFailed/#parameters_1","text":"that: StatusPreconditionFailed val","title":"Parameters"},{"location":"http_server-StatusPreconditionFailed/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPreconditionRequired/","text":"StatusPreconditionRequired \u00b6 [Source] primitive val StatusPreconditionRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPreconditionRequired val^ Returns \u00b6 StatusPreconditionRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPreconditionRequired val) : Bool val Parameters \u00b6 that: StatusPreconditionRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPreconditionRequired val) : Bool val Parameters \u00b6 that: StatusPreconditionRequired val Returns \u00b6 Bool val","title":"primitive StatusPreconditionRequired"},{"location":"http_server-StatusPreconditionRequired/#statuspreconditionrequired","text":"[Source] primitive val StatusPreconditionRequired is Status val","title":"StatusPreconditionRequired"},{"location":"http_server-StatusPreconditionRequired/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusPreconditionRequired/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusPreconditionRequired/#create","text":"[Source] new val create() : StatusPreconditionRequired val^","title":"create"},{"location":"http_server-StatusPreconditionRequired/#returns","text":"StatusPreconditionRequired val^","title":"Returns"},{"location":"http_server-StatusPreconditionRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusPreconditionRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusPreconditionRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusPreconditionRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusPreconditionRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusPreconditionRequired/#eq","text":"[Source] fun box eq( that: StatusPreconditionRequired val) : Bool val","title":"eq"},{"location":"http_server-StatusPreconditionRequired/#parameters","text":"that: StatusPreconditionRequired val","title":"Parameters"},{"location":"http_server-StatusPreconditionRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusPreconditionRequired/#ne","text":"[Source] fun box ne( that: StatusPreconditionRequired val) : Bool val","title":"ne"},{"location":"http_server-StatusPreconditionRequired/#parameters_1","text":"that: StatusPreconditionRequired val","title":"Parameters"},{"location":"http_server-StatusPreconditionRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusProxyAuthRequired/","text":"StatusProxyAuthRequired \u00b6 [Source] primitive val StatusProxyAuthRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusProxyAuthRequired val^ Returns \u00b6 StatusProxyAuthRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusProxyAuthRequired val) : Bool val Parameters \u00b6 that: StatusProxyAuthRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusProxyAuthRequired val) : Bool val Parameters \u00b6 that: StatusProxyAuthRequired val Returns \u00b6 Bool val","title":"primitive StatusProxyAuthRequired"},{"location":"http_server-StatusProxyAuthRequired/#statusproxyauthrequired","text":"[Source] primitive val StatusProxyAuthRequired is Status val","title":"StatusProxyAuthRequired"},{"location":"http_server-StatusProxyAuthRequired/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusProxyAuthRequired/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusProxyAuthRequired/#create","text":"[Source] new val create() : StatusProxyAuthRequired val^","title":"create"},{"location":"http_server-StatusProxyAuthRequired/#returns","text":"StatusProxyAuthRequired val^","title":"Returns"},{"location":"http_server-StatusProxyAuthRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusProxyAuthRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusProxyAuthRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusProxyAuthRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusProxyAuthRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusProxyAuthRequired/#eq","text":"[Source] fun box eq( that: StatusProxyAuthRequired val) : Bool val","title":"eq"},{"location":"http_server-StatusProxyAuthRequired/#parameters","text":"that: StatusProxyAuthRequired val","title":"Parameters"},{"location":"http_server-StatusProxyAuthRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusProxyAuthRequired/#ne","text":"[Source] fun box ne( that: StatusProxyAuthRequired val) : Bool val","title":"ne"},{"location":"http_server-StatusProxyAuthRequired/#parameters_1","text":"that: StatusProxyAuthRequired val","title":"Parameters"},{"location":"http_server-StatusProxyAuthRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestEntityTooLarge/","text":"StatusRequestEntityTooLarge \u00b6 [Source] primitive val StatusRequestEntityTooLarge is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestEntityTooLarge val^ Returns \u00b6 StatusRequestEntityTooLarge val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestEntityTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestEntityTooLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestEntityTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestEntityTooLarge val Returns \u00b6 Bool val","title":"primitive StatusRequestEntityTooLarge"},{"location":"http_server-StatusRequestEntityTooLarge/#statusrequestentitytoolarge","text":"[Source] primitive val StatusRequestEntityTooLarge is Status val","title":"StatusRequestEntityTooLarge"},{"location":"http_server-StatusRequestEntityTooLarge/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusRequestEntityTooLarge/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusRequestEntityTooLarge/#create","text":"[Source] new val create() : StatusRequestEntityTooLarge val^","title":"create"},{"location":"http_server-StatusRequestEntityTooLarge/#returns","text":"StatusRequestEntityTooLarge val^","title":"Returns"},{"location":"http_server-StatusRequestEntityTooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusRequestEntityTooLarge/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusRequestEntityTooLarge/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusRequestEntityTooLarge/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusRequestEntityTooLarge/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusRequestEntityTooLarge/#eq","text":"[Source] fun box eq( that: StatusRequestEntityTooLarge val) : Bool val","title":"eq"},{"location":"http_server-StatusRequestEntityTooLarge/#parameters","text":"that: StatusRequestEntityTooLarge val","title":"Parameters"},{"location":"http_server-StatusRequestEntityTooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestEntityTooLarge/#ne","text":"[Source] fun box ne( that: StatusRequestEntityTooLarge val) : Bool val","title":"ne"},{"location":"http_server-StatusRequestEntityTooLarge/#parameters_1","text":"that: StatusRequestEntityTooLarge val","title":"Parameters"},{"location":"http_server-StatusRequestEntityTooLarge/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/","text":"StatusRequestHeaderFieldsTooLarge \u00b6 [Source] primitive val StatusRequestHeaderFieldsTooLarge is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestHeaderFieldsTooLarge val^ Returns \u00b6 StatusRequestHeaderFieldsTooLarge val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestHeaderFieldsTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestHeaderFieldsTooLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestHeaderFieldsTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestHeaderFieldsTooLarge val Returns \u00b6 Bool val","title":"primitive StatusRequestHeaderFieldsTooLarge"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#statusrequestheaderfieldstoolarge","text":"[Source] primitive val StatusRequestHeaderFieldsTooLarge is Status val","title":"StatusRequestHeaderFieldsTooLarge"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#create","text":"[Source] new val create() : StatusRequestHeaderFieldsTooLarge val^","title":"create"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#returns","text":"StatusRequestHeaderFieldsTooLarge val^","title":"Returns"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#eq","text":"[Source] fun box eq( that: StatusRequestHeaderFieldsTooLarge val) : Bool val","title":"eq"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#parameters","text":"that: StatusRequestHeaderFieldsTooLarge val","title":"Parameters"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#ne","text":"[Source] fun box ne( that: StatusRequestHeaderFieldsTooLarge val) : Bool val","title":"ne"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#parameters_1","text":"that: StatusRequestHeaderFieldsTooLarge val","title":"Parameters"},{"location":"http_server-StatusRequestHeaderFieldsTooLarge/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestTimeout/","text":"StatusRequestTimeout \u00b6 [Source] primitive val StatusRequestTimeout is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestTimeout val^ Returns \u00b6 StatusRequestTimeout val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestTimeout val) : Bool val Parameters \u00b6 that: StatusRequestTimeout val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestTimeout val) : Bool val Parameters \u00b6 that: StatusRequestTimeout val Returns \u00b6 Bool val","title":"primitive StatusRequestTimeout"},{"location":"http_server-StatusRequestTimeout/#statusrequesttimeout","text":"[Source] primitive val StatusRequestTimeout is Status val","title":"StatusRequestTimeout"},{"location":"http_server-StatusRequestTimeout/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusRequestTimeout/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusRequestTimeout/#create","text":"[Source] new val create() : StatusRequestTimeout val^","title":"create"},{"location":"http_server-StatusRequestTimeout/#returns","text":"StatusRequestTimeout val^","title":"Returns"},{"location":"http_server-StatusRequestTimeout/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusRequestTimeout/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusRequestTimeout/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusRequestTimeout/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusRequestTimeout/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusRequestTimeout/#eq","text":"[Source] fun box eq( that: StatusRequestTimeout val) : Bool val","title":"eq"},{"location":"http_server-StatusRequestTimeout/#parameters","text":"that: StatusRequestTimeout val","title":"Parameters"},{"location":"http_server-StatusRequestTimeout/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestTimeout/#ne","text":"[Source] fun box ne( that: StatusRequestTimeout val) : Bool val","title":"ne"},{"location":"http_server-StatusRequestTimeout/#parameters_1","text":"that: StatusRequestTimeout val","title":"Parameters"},{"location":"http_server-StatusRequestTimeout/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestURITooLong/","text":"StatusRequestURITooLong \u00b6 [Source] primitive val StatusRequestURITooLong is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestURITooLong val^ Returns \u00b6 StatusRequestURITooLong val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestURITooLong val) : Bool val Parameters \u00b6 that: StatusRequestURITooLong val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestURITooLong val) : Bool val Parameters \u00b6 that: StatusRequestURITooLong val Returns \u00b6 Bool val","title":"primitive StatusRequestURITooLong"},{"location":"http_server-StatusRequestURITooLong/#statusrequesturitoolong","text":"[Source] primitive val StatusRequestURITooLong is Status val","title":"StatusRequestURITooLong"},{"location":"http_server-StatusRequestURITooLong/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusRequestURITooLong/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusRequestURITooLong/#create","text":"[Source] new val create() : StatusRequestURITooLong val^","title":"create"},{"location":"http_server-StatusRequestURITooLong/#returns","text":"StatusRequestURITooLong val^","title":"Returns"},{"location":"http_server-StatusRequestURITooLong/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusRequestURITooLong/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusRequestURITooLong/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusRequestURITooLong/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusRequestURITooLong/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusRequestURITooLong/#eq","text":"[Source] fun box eq( that: StatusRequestURITooLong val) : Bool val","title":"eq"},{"location":"http_server-StatusRequestURITooLong/#parameters","text":"that: StatusRequestURITooLong val","title":"Parameters"},{"location":"http_server-StatusRequestURITooLong/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestURITooLong/#ne","text":"[Source] fun box ne( that: StatusRequestURITooLong val) : Bool val","title":"ne"},{"location":"http_server-StatusRequestURITooLong/#parameters_1","text":"that: StatusRequestURITooLong val","title":"Parameters"},{"location":"http_server-StatusRequestURITooLong/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/","text":"StatusRequestedRangeNotSatisfiable \u00b6 [Source] primitive val StatusRequestedRangeNotSatisfiable is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestedRangeNotSatisfiable val^ Returns \u00b6 StatusRequestedRangeNotSatisfiable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestedRangeNotSatisfiable val) : Bool val Parameters \u00b6 that: StatusRequestedRangeNotSatisfiable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestedRangeNotSatisfiable val) : Bool val Parameters \u00b6 that: StatusRequestedRangeNotSatisfiable val Returns \u00b6 Bool val","title":"primitive StatusRequestedRangeNotSatisfiable"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#statusrequestedrangenotsatisfiable","text":"[Source] primitive val StatusRequestedRangeNotSatisfiable is Status val","title":"StatusRequestedRangeNotSatisfiable"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#create","text":"[Source] new val create() : StatusRequestedRangeNotSatisfiable val^","title":"create"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#returns","text":"StatusRequestedRangeNotSatisfiable val^","title":"Returns"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#eq","text":"[Source] fun box eq( that: StatusRequestedRangeNotSatisfiable val) : Bool val","title":"eq"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#parameters","text":"that: StatusRequestedRangeNotSatisfiable val","title":"Parameters"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#ne","text":"[Source] fun box ne( that: StatusRequestedRangeNotSatisfiable val) : Bool val","title":"ne"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#parameters_1","text":"that: StatusRequestedRangeNotSatisfiable val","title":"Parameters"},{"location":"http_server-StatusRequestedRangeNotSatisfiable/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusResetContent/","text":"StatusResetContent \u00b6 [Source] primitive val StatusResetContent is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusResetContent val^ Returns \u00b6 StatusResetContent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusResetContent val) : Bool val Parameters \u00b6 that: StatusResetContent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusResetContent val) : Bool val Parameters \u00b6 that: StatusResetContent val Returns \u00b6 Bool val","title":"primitive StatusResetContent"},{"location":"http_server-StatusResetContent/#statusresetcontent","text":"[Source] primitive val StatusResetContent is Status val","title":"StatusResetContent"},{"location":"http_server-StatusResetContent/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusResetContent/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusResetContent/#create","text":"[Source] new val create() : StatusResetContent val^","title":"create"},{"location":"http_server-StatusResetContent/#returns","text":"StatusResetContent val^","title":"Returns"},{"location":"http_server-StatusResetContent/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusResetContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusResetContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusResetContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusResetContent/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusResetContent/#eq","text":"[Source] fun box eq( that: StatusResetContent val) : Bool val","title":"eq"},{"location":"http_server-StatusResetContent/#parameters","text":"that: StatusResetContent val","title":"Parameters"},{"location":"http_server-StatusResetContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusResetContent/#ne","text":"[Source] fun box ne( that: StatusResetContent val) : Bool val","title":"ne"},{"location":"http_server-StatusResetContent/#parameters_1","text":"that: StatusResetContent val","title":"Parameters"},{"location":"http_server-StatusResetContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusSeeOther/","text":"StatusSeeOther \u00b6 [Source] primitive val StatusSeeOther is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusSeeOther val^ Returns \u00b6 StatusSeeOther val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusSeeOther val) : Bool val Parameters \u00b6 that: StatusSeeOther val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusSeeOther val) : Bool val Parameters \u00b6 that: StatusSeeOther val Returns \u00b6 Bool val","title":"primitive StatusSeeOther"},{"location":"http_server-StatusSeeOther/#statusseeother","text":"[Source] primitive val StatusSeeOther is Status val","title":"StatusSeeOther"},{"location":"http_server-StatusSeeOther/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusSeeOther/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusSeeOther/#create","text":"[Source] new val create() : StatusSeeOther val^","title":"create"},{"location":"http_server-StatusSeeOther/#returns","text":"StatusSeeOther val^","title":"Returns"},{"location":"http_server-StatusSeeOther/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusSeeOther/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusSeeOther/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusSeeOther/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusSeeOther/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusSeeOther/#eq","text":"[Source] fun box eq( that: StatusSeeOther val) : Bool val","title":"eq"},{"location":"http_server-StatusSeeOther/#parameters","text":"that: StatusSeeOther val","title":"Parameters"},{"location":"http_server-StatusSeeOther/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusSeeOther/#ne","text":"[Source] fun box ne( that: StatusSeeOther val) : Bool val","title":"ne"},{"location":"http_server-StatusSeeOther/#parameters_1","text":"that: StatusSeeOther val","title":"Parameters"},{"location":"http_server-StatusSeeOther/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusServiceUnavailable/","text":"StatusServiceUnavailable \u00b6 [Source] primitive val StatusServiceUnavailable is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusServiceUnavailable val^ Returns \u00b6 StatusServiceUnavailable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusServiceUnavailable val) : Bool val Parameters \u00b6 that: StatusServiceUnavailable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusServiceUnavailable val) : Bool val Parameters \u00b6 that: StatusServiceUnavailable val Returns \u00b6 Bool val","title":"primitive StatusServiceUnavailable"},{"location":"http_server-StatusServiceUnavailable/#statusserviceunavailable","text":"[Source] primitive val StatusServiceUnavailable is Status val","title":"StatusServiceUnavailable"},{"location":"http_server-StatusServiceUnavailable/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusServiceUnavailable/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusServiceUnavailable/#create","text":"[Source] new val create() : StatusServiceUnavailable val^","title":"create"},{"location":"http_server-StatusServiceUnavailable/#returns","text":"StatusServiceUnavailable val^","title":"Returns"},{"location":"http_server-StatusServiceUnavailable/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusServiceUnavailable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusServiceUnavailable/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusServiceUnavailable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusServiceUnavailable/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusServiceUnavailable/#eq","text":"[Source] fun box eq( that: StatusServiceUnavailable val) : Bool val","title":"eq"},{"location":"http_server-StatusServiceUnavailable/#parameters","text":"that: StatusServiceUnavailable val","title":"Parameters"},{"location":"http_server-StatusServiceUnavailable/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusServiceUnavailable/#ne","text":"[Source] fun box ne( that: StatusServiceUnavailable val) : Bool val","title":"ne"},{"location":"http_server-StatusServiceUnavailable/#parameters_1","text":"that: StatusServiceUnavailable val","title":"Parameters"},{"location":"http_server-StatusServiceUnavailable/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusSwitchingProtocols/","text":"StatusSwitchingProtocols \u00b6 [Source] primitive val StatusSwitchingProtocols is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusSwitchingProtocols val^ Returns \u00b6 StatusSwitchingProtocols val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusSwitchingProtocols val) : Bool val Parameters \u00b6 that: StatusSwitchingProtocols val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusSwitchingProtocols val) : Bool val Parameters \u00b6 that: StatusSwitchingProtocols val Returns \u00b6 Bool val","title":"primitive StatusSwitchingProtocols"},{"location":"http_server-StatusSwitchingProtocols/#statusswitchingprotocols","text":"[Source] primitive val StatusSwitchingProtocols is Status val","title":"StatusSwitchingProtocols"},{"location":"http_server-StatusSwitchingProtocols/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusSwitchingProtocols/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusSwitchingProtocols/#create","text":"[Source] new val create() : StatusSwitchingProtocols val^","title":"create"},{"location":"http_server-StatusSwitchingProtocols/#returns","text":"StatusSwitchingProtocols val^","title":"Returns"},{"location":"http_server-StatusSwitchingProtocols/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusSwitchingProtocols/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusSwitchingProtocols/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusSwitchingProtocols/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusSwitchingProtocols/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusSwitchingProtocols/#eq","text":"[Source] fun box eq( that: StatusSwitchingProtocols val) : Bool val","title":"eq"},{"location":"http_server-StatusSwitchingProtocols/#parameters","text":"that: StatusSwitchingProtocols val","title":"Parameters"},{"location":"http_server-StatusSwitchingProtocols/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusSwitchingProtocols/#ne","text":"[Source] fun box ne( that: StatusSwitchingProtocols val) : Bool val","title":"ne"},{"location":"http_server-StatusSwitchingProtocols/#parameters_1","text":"that: StatusSwitchingProtocols val","title":"Parameters"},{"location":"http_server-StatusSwitchingProtocols/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusTeapot/","text":"StatusTeapot \u00b6 [Source] primitive val StatusTeapot is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusTeapot val^ Returns \u00b6 StatusTeapot val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusTeapot val) : Bool val Parameters \u00b6 that: StatusTeapot val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusTeapot val) : Bool val Parameters \u00b6 that: StatusTeapot val Returns \u00b6 Bool val","title":"primitive StatusTeapot"},{"location":"http_server-StatusTeapot/#statusteapot","text":"[Source] primitive val StatusTeapot is Status val","title":"StatusTeapot"},{"location":"http_server-StatusTeapot/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusTeapot/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusTeapot/#create","text":"[Source] new val create() : StatusTeapot val^","title":"create"},{"location":"http_server-StatusTeapot/#returns","text":"StatusTeapot val^","title":"Returns"},{"location":"http_server-StatusTeapot/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusTeapot/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusTeapot/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusTeapot/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusTeapot/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusTeapot/#eq","text":"[Source] fun box eq( that: StatusTeapot val) : Bool val","title":"eq"},{"location":"http_server-StatusTeapot/#parameters","text":"that: StatusTeapot val","title":"Parameters"},{"location":"http_server-StatusTeapot/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusTeapot/#ne","text":"[Source] fun box ne( that: StatusTeapot val) : Bool val","title":"ne"},{"location":"http_server-StatusTeapot/#parameters_1","text":"that: StatusTeapot val","title":"Parameters"},{"location":"http_server-StatusTeapot/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusTemporaryRedirect/","text":"StatusTemporaryRedirect \u00b6 [Source] primitive val StatusTemporaryRedirect is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusTemporaryRedirect val^ Returns \u00b6 StatusTemporaryRedirect val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusTemporaryRedirect val) : Bool val Parameters \u00b6 that: StatusTemporaryRedirect val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusTemporaryRedirect val) : Bool val Parameters \u00b6 that: StatusTemporaryRedirect val Returns \u00b6 Bool val","title":"primitive StatusTemporaryRedirect"},{"location":"http_server-StatusTemporaryRedirect/#statustemporaryredirect","text":"[Source] primitive val StatusTemporaryRedirect is Status val","title":"StatusTemporaryRedirect"},{"location":"http_server-StatusTemporaryRedirect/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusTemporaryRedirect/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusTemporaryRedirect/#create","text":"[Source] new val create() : StatusTemporaryRedirect val^","title":"create"},{"location":"http_server-StatusTemporaryRedirect/#returns","text":"StatusTemporaryRedirect val^","title":"Returns"},{"location":"http_server-StatusTemporaryRedirect/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusTemporaryRedirect/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusTemporaryRedirect/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusTemporaryRedirect/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusTemporaryRedirect/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusTemporaryRedirect/#eq","text":"[Source] fun box eq( that: StatusTemporaryRedirect val) : Bool val","title":"eq"},{"location":"http_server-StatusTemporaryRedirect/#parameters","text":"that: StatusTemporaryRedirect val","title":"Parameters"},{"location":"http_server-StatusTemporaryRedirect/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusTemporaryRedirect/#ne","text":"[Source] fun box ne( that: StatusTemporaryRedirect val) : Bool val","title":"ne"},{"location":"http_server-StatusTemporaryRedirect/#parameters_1","text":"that: StatusTemporaryRedirect val","title":"Parameters"},{"location":"http_server-StatusTemporaryRedirect/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusTooManyRequests/","text":"StatusTooManyRequests \u00b6 [Source] primitive val StatusTooManyRequests is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusTooManyRequests val^ Returns \u00b6 StatusTooManyRequests val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusTooManyRequests val) : Bool val Parameters \u00b6 that: StatusTooManyRequests val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusTooManyRequests val) : Bool val Parameters \u00b6 that: StatusTooManyRequests val Returns \u00b6 Bool val","title":"primitive StatusTooManyRequests"},{"location":"http_server-StatusTooManyRequests/#statustoomanyrequests","text":"[Source] primitive val StatusTooManyRequests is Status val","title":"StatusTooManyRequests"},{"location":"http_server-StatusTooManyRequests/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusTooManyRequests/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusTooManyRequests/#create","text":"[Source] new val create() : StatusTooManyRequests val^","title":"create"},{"location":"http_server-StatusTooManyRequests/#returns","text":"StatusTooManyRequests val^","title":"Returns"},{"location":"http_server-StatusTooManyRequests/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusTooManyRequests/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusTooManyRequests/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusTooManyRequests/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusTooManyRequests/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusTooManyRequests/#eq","text":"[Source] fun box eq( that: StatusTooManyRequests val) : Bool val","title":"eq"},{"location":"http_server-StatusTooManyRequests/#parameters","text":"that: StatusTooManyRequests val","title":"Parameters"},{"location":"http_server-StatusTooManyRequests/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusTooManyRequests/#ne","text":"[Source] fun box ne( that: StatusTooManyRequests val) : Bool val","title":"ne"},{"location":"http_server-StatusTooManyRequests/#parameters_1","text":"that: StatusTooManyRequests val","title":"Parameters"},{"location":"http_server-StatusTooManyRequests/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUnauthorized/","text":"StatusUnauthorized \u00b6 [Source] primitive val StatusUnauthorized is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUnauthorized val^ Returns \u00b6 StatusUnauthorized val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUnauthorized val) : Bool val Parameters \u00b6 that: StatusUnauthorized val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUnauthorized val) : Bool val Parameters \u00b6 that: StatusUnauthorized val Returns \u00b6 Bool val","title":"primitive StatusUnauthorized"},{"location":"http_server-StatusUnauthorized/#statusunauthorized","text":"[Source] primitive val StatusUnauthorized is Status val","title":"StatusUnauthorized"},{"location":"http_server-StatusUnauthorized/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusUnauthorized/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusUnauthorized/#create","text":"[Source] new val create() : StatusUnauthorized val^","title":"create"},{"location":"http_server-StatusUnauthorized/#returns","text":"StatusUnauthorized val^","title":"Returns"},{"location":"http_server-StatusUnauthorized/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusUnauthorized/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusUnauthorized/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusUnauthorized/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusUnauthorized/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusUnauthorized/#eq","text":"[Source] fun box eq( that: StatusUnauthorized val) : Bool val","title":"eq"},{"location":"http_server-StatusUnauthorized/#parameters","text":"that: StatusUnauthorized val","title":"Parameters"},{"location":"http_server-StatusUnauthorized/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUnauthorized/#ne","text":"[Source] fun box ne( that: StatusUnauthorized val) : Bool val","title":"ne"},{"location":"http_server-StatusUnauthorized/#parameters_1","text":"that: StatusUnauthorized val","title":"Parameters"},{"location":"http_server-StatusUnauthorized/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUnavailableForLegalReasons/","text":"StatusUnavailableForLegalReasons \u00b6 [Source] primitive val StatusUnavailableForLegalReasons is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUnavailableForLegalReasons val^ Returns \u00b6 StatusUnavailableForLegalReasons val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUnavailableForLegalReasons val) : Bool val Parameters \u00b6 that: StatusUnavailableForLegalReasons val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUnavailableForLegalReasons val) : Bool val Parameters \u00b6 that: StatusUnavailableForLegalReasons val Returns \u00b6 Bool val","title":"primitive StatusUnavailableForLegalReasons"},{"location":"http_server-StatusUnavailableForLegalReasons/#statusunavailableforlegalreasons","text":"[Source] primitive val StatusUnavailableForLegalReasons is Status val","title":"StatusUnavailableForLegalReasons"},{"location":"http_server-StatusUnavailableForLegalReasons/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusUnavailableForLegalReasons/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusUnavailableForLegalReasons/#create","text":"[Source] new val create() : StatusUnavailableForLegalReasons val^","title":"create"},{"location":"http_server-StatusUnavailableForLegalReasons/#returns","text":"StatusUnavailableForLegalReasons val^","title":"Returns"},{"location":"http_server-StatusUnavailableForLegalReasons/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusUnavailableForLegalReasons/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusUnavailableForLegalReasons/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusUnavailableForLegalReasons/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusUnavailableForLegalReasons/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusUnavailableForLegalReasons/#eq","text":"[Source] fun box eq( that: StatusUnavailableForLegalReasons val) : Bool val","title":"eq"},{"location":"http_server-StatusUnavailableForLegalReasons/#parameters","text":"that: StatusUnavailableForLegalReasons val","title":"Parameters"},{"location":"http_server-StatusUnavailableForLegalReasons/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUnavailableForLegalReasons/#ne","text":"[Source] fun box ne( that: StatusUnavailableForLegalReasons val) : Bool val","title":"ne"},{"location":"http_server-StatusUnavailableForLegalReasons/#parameters_1","text":"that: StatusUnavailableForLegalReasons val","title":"Parameters"},{"location":"http_server-StatusUnavailableForLegalReasons/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUnsupportedMediaType/","text":"StatusUnsupportedMediaType \u00b6 [Source] primitive val StatusUnsupportedMediaType is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUnsupportedMediaType val^ Returns \u00b6 StatusUnsupportedMediaType val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUnsupportedMediaType val) : Bool val Parameters \u00b6 that: StatusUnsupportedMediaType val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUnsupportedMediaType val) : Bool val Parameters \u00b6 that: StatusUnsupportedMediaType val Returns \u00b6 Bool val","title":"primitive StatusUnsupportedMediaType"},{"location":"http_server-StatusUnsupportedMediaType/#statusunsupportedmediatype","text":"[Source] primitive val StatusUnsupportedMediaType is Status val","title":"StatusUnsupportedMediaType"},{"location":"http_server-StatusUnsupportedMediaType/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusUnsupportedMediaType/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusUnsupportedMediaType/#create","text":"[Source] new val create() : StatusUnsupportedMediaType val^","title":"create"},{"location":"http_server-StatusUnsupportedMediaType/#returns","text":"StatusUnsupportedMediaType val^","title":"Returns"},{"location":"http_server-StatusUnsupportedMediaType/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusUnsupportedMediaType/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusUnsupportedMediaType/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusUnsupportedMediaType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusUnsupportedMediaType/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusUnsupportedMediaType/#eq","text":"[Source] fun box eq( that: StatusUnsupportedMediaType val) : Bool val","title":"eq"},{"location":"http_server-StatusUnsupportedMediaType/#parameters","text":"that: StatusUnsupportedMediaType val","title":"Parameters"},{"location":"http_server-StatusUnsupportedMediaType/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUnsupportedMediaType/#ne","text":"[Source] fun box ne( that: StatusUnsupportedMediaType val) : Bool val","title":"ne"},{"location":"http_server-StatusUnsupportedMediaType/#parameters_1","text":"that: StatusUnsupportedMediaType val","title":"Parameters"},{"location":"http_server-StatusUnsupportedMediaType/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUseProxy/","text":"StatusUseProxy \u00b6 [Source] primitive val StatusUseProxy is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUseProxy val^ Returns \u00b6 StatusUseProxy val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUseProxy val) : Bool val Parameters \u00b6 that: StatusUseProxy val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUseProxy val) : Bool val Parameters \u00b6 that: StatusUseProxy val Returns \u00b6 Bool val","title":"primitive StatusUseProxy"},{"location":"http_server-StatusUseProxy/#statususeproxy","text":"[Source] primitive val StatusUseProxy is Status val","title":"StatusUseProxy"},{"location":"http_server-StatusUseProxy/#implements","text":"Status val","title":"Implements"},{"location":"http_server-StatusUseProxy/#constructors","text":"","title":"Constructors"},{"location":"http_server-StatusUseProxy/#create","text":"[Source] new val create() : StatusUseProxy val^","title":"create"},{"location":"http_server-StatusUseProxy/#returns","text":"StatusUseProxy val^","title":"Returns"},{"location":"http_server-StatusUseProxy/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-StatusUseProxy/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http_server-StatusUseProxy/#returns_1","text":"U16 val","title":"Returns"},{"location":"http_server-StatusUseProxy/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http_server-StatusUseProxy/#returns_2","text":"String val","title":"Returns"},{"location":"http_server-StatusUseProxy/#eq","text":"[Source] fun box eq( that: StatusUseProxy val) : Bool val","title":"eq"},{"location":"http_server-StatusUseProxy/#parameters","text":"that: StatusUseProxy val","title":"Parameters"},{"location":"http_server-StatusUseProxy/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-StatusUseProxy/#ne","text":"[Source] fun box ne( that: StatusUseProxy val) : Bool val","title":"ne"},{"location":"http_server-StatusUseProxy/#parameters_1","text":"that: StatusUseProxy val","title":"Parameters"},{"location":"http_server-StatusUseProxy/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-SyncHandler/","text":"SyncHandler \u00b6 [Source] Use this handler, when you want to handle your requests without accessing other actors. interface ref SyncHandler Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( request: Request val, body: (ByteArrays val | None val)) : ByteSeqIter val ? Parameters \u00b6 request: Request val body: ( ByteArrays val | None val) Returns \u00b6 ByteSeqIter val ? error_response \u00b6 [Source] fun box error_response( request: Request val) : (ByteSeqIter val | None val) Parameters \u00b6 request: Request val Returns \u00b6 ( ByteSeqIter val | None val)","title":"interface SyncHandler"},{"location":"http_server-SyncHandler/#synchandler","text":"[Source] Use this handler, when you want to handle your requests without accessing other actors. interface ref SyncHandler","title":"SyncHandler"},{"location":"http_server-SyncHandler/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-SyncHandler/#apply","text":"[Source] fun ref apply( request: Request val, body: (ByteArrays val | None val)) : ByteSeqIter val ?","title":"apply"},{"location":"http_server-SyncHandler/#parameters","text":"request: Request val body: ( ByteArrays val | None val)","title":"Parameters"},{"location":"http_server-SyncHandler/#returns","text":"ByteSeqIter val ?","title":"Returns"},{"location":"http_server-SyncHandler/#error_response","text":"[Source] fun box error_response( request: Request val) : (ByteSeqIter val | None val)","title":"error_response"},{"location":"http_server-SyncHandler/#parameters_1","text":"request: Request val","title":"Parameters"},{"location":"http_server-SyncHandler/#returns_1","text":"( ByteSeqIter val | None val)","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/","text":"SyncHandlerWrapper \u00b6 [Source] class ref SyncHandlerWrapper is Handler ref Implements \u00b6 Handler ref Constructors \u00b6 create \u00b6 [Source] new ref create( session: Session tag, handler: SyncHandler ref) : SyncHandlerWrapper ref^ Parameters \u00b6 session: Session tag handler: SyncHandler ref Returns \u00b6 SyncHandlerWrapper ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( request: Request val, request_id: USize val) : None val Parameters \u00b6 request: Request val request_id: USize val Returns \u00b6 None val chunk \u00b6 [Source] fun ref chunk( data: (String val | Array[U8 val] val), request_id: USize val) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) request_id: USize val Returns \u00b6 None val finished \u00b6 [Source] fun ref finished( request_id: USize val) : None val Parameters \u00b6 request_id: USize val Returns \u00b6 None val cancelled \u00b6 fun ref cancelled( request_id: USize val) : None val Parameters \u00b6 request_id: USize val Returns \u00b6 None val failed \u00b6 fun ref failed( reason: ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val), request_id: USize val) : None val Parameters \u00b6 reason: (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) request_id: USize val Returns \u00b6 None val closed \u00b6 fun ref closed() : None val Returns \u00b6 None val throttled \u00b6 fun ref throttled() : None val Returns \u00b6 None val unthrottled \u00b6 fun ref unthrottled() : None val Returns \u00b6 None val","title":"class SyncHandlerWrapper"},{"location":"http_server-SyncHandlerWrapper/#synchandlerwrapper","text":"[Source] class ref SyncHandlerWrapper is Handler ref","title":"SyncHandlerWrapper"},{"location":"http_server-SyncHandlerWrapper/#implements","text":"Handler ref","title":"Implements"},{"location":"http_server-SyncHandlerWrapper/#constructors","text":"","title":"Constructors"},{"location":"http_server-SyncHandlerWrapper/#create","text":"[Source] new ref create( session: Session tag, handler: SyncHandler ref) : SyncHandlerWrapper ref^","title":"create"},{"location":"http_server-SyncHandlerWrapper/#parameters","text":"session: Session tag handler: SyncHandler ref","title":"Parameters"},{"location":"http_server-SyncHandlerWrapper/#returns","text":"SyncHandlerWrapper ref^","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-SyncHandlerWrapper/#apply","text":"[Source] fun ref apply( request: Request val, request_id: USize val) : None val","title":"apply"},{"location":"http_server-SyncHandlerWrapper/#parameters_1","text":"request: Request val request_id: USize val","title":"Parameters"},{"location":"http_server-SyncHandlerWrapper/#returns_1","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#chunk","text":"[Source] fun ref chunk( data: (String val | Array[U8 val] val), request_id: USize val) : None val","title":"chunk"},{"location":"http_server-SyncHandlerWrapper/#parameters_2","text":"data: ( String val | Array [ U8 val] val) request_id: USize val","title":"Parameters"},{"location":"http_server-SyncHandlerWrapper/#returns_2","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#finished","text":"[Source] fun ref finished( request_id: USize val) : None val","title":"finished"},{"location":"http_server-SyncHandlerWrapper/#parameters_3","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-SyncHandlerWrapper/#returns_3","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#cancelled","text":"fun ref cancelled( request_id: USize val) : None val","title":"cancelled"},{"location":"http_server-SyncHandlerWrapper/#parameters_4","text":"request_id: USize val","title":"Parameters"},{"location":"http_server-SyncHandlerWrapper/#returns_4","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#failed","text":"fun ref failed( reason: ((TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val), request_id: USize val) : None val","title":"failed"},{"location":"http_server-SyncHandlerWrapper/#parameters_5","text":"reason: (( TooLarge val | UnknownMethod val | InvalidURI val | InvalidVersion val | InvalidContentLength val | InvalidTransferCoding val | InvalidChunk val) & _RequestParseError val) request_id: USize val","title":"Parameters"},{"location":"http_server-SyncHandlerWrapper/#returns_5","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#closed","text":"fun ref closed() : None val","title":"closed"},{"location":"http_server-SyncHandlerWrapper/#returns_6","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#throttled","text":"fun ref throttled() : None val","title":"throttled"},{"location":"http_server-SyncHandlerWrapper/#returns_7","text":"None val","title":"Returns"},{"location":"http_server-SyncHandlerWrapper/#unthrottled","text":"fun ref unthrottled() : None val","title":"unthrottled"},{"location":"http_server-SyncHandlerWrapper/#returns_8","text":"None val","title":"Returns"},{"location":"http_server-TRACE/","text":"TRACE \u00b6 [Source] primitive val TRACE is Method val Implements \u00b6 Method val Constructors \u00b6 create \u00b6 [Source] new val create() : TRACE val^ Returns \u00b6 TRACE val^ Public Functions \u00b6 repr \u00b6 [Source] fun box repr() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( o: Method val) : Bool val Parameters \u00b6 o: Method val Returns \u00b6 Bool val ne \u00b6 fun box ne( that: Method val) : Bool val Parameters \u00b6 that: Method val Returns \u00b6 Bool val","title":"primitive TRACE"},{"location":"http_server-TRACE/#trace","text":"[Source] primitive val TRACE is Method val","title":"TRACE"},{"location":"http_server-TRACE/#implements","text":"Method val","title":"Implements"},{"location":"http_server-TRACE/#constructors","text":"","title":"Constructors"},{"location":"http_server-TRACE/#create","text":"[Source] new val create() : TRACE val^","title":"create"},{"location":"http_server-TRACE/#returns","text":"TRACE val^","title":"Returns"},{"location":"http_server-TRACE/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-TRACE/#repr","text":"[Source] fun box repr() : String val","title":"repr"},{"location":"http_server-TRACE/#returns_1","text":"String val","title":"Returns"},{"location":"http_server-TRACE/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-TRACE/#returns_2","text":"String iso^","title":"Returns"},{"location":"http_server-TRACE/#eq","text":"[Source] fun box eq( o: Method val) : Bool val","title":"eq"},{"location":"http_server-TRACE/#parameters","text":"o: Method val","title":"Parameters"},{"location":"http_server-TRACE/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-TRACE/#ne","text":"fun box ne( that: Method val) : Bool val","title":"ne"},{"location":"http_server-TRACE/#parameters_1","text":"that: Method val","title":"Parameters"},{"location":"http_server-TRACE/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-TooLarge/","text":"TooLarge \u00b6 [Source] primitive val TooLarge is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : TooLarge val^ Returns \u00b6 TooLarge val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: TooLarge val) : Bool val Parameters \u00b6 that: TooLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TooLarge val) : Bool val Parameters \u00b6 that: TooLarge val Returns \u00b6 Bool val","title":"primitive TooLarge"},{"location":"http_server-TooLarge/#toolarge","text":"[Source] primitive val TooLarge is _RequestParseError val","title":"TooLarge"},{"location":"http_server-TooLarge/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-TooLarge/#constructors","text":"","title":"Constructors"},{"location":"http_server-TooLarge/#create","text":"[Source] new val create() : TooLarge val^","title":"create"},{"location":"http_server-TooLarge/#returns","text":"TooLarge val^","title":"Returns"},{"location":"http_server-TooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-TooLarge/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-TooLarge/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-TooLarge/#eq","text":"[Source] fun box eq( that: TooLarge val) : Bool val","title":"eq"},{"location":"http_server-TooLarge/#parameters","text":"that: TooLarge val","title":"Parameters"},{"location":"http_server-TooLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-TooLarge/#ne","text":"[Source] fun box ne( that: TooLarge val) : Bool val","title":"ne"},{"location":"http_server-TooLarge/#parameters_1","text":"that: TooLarge val","title":"Parameters"},{"location":"http_server-TooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-URL/","text":"URL \u00b6 [Source] Holds the components of a URL. These are always stored as valid, URL-encoded values. class val URL Constructors \u00b6 create \u00b6 [Source] Create an empty URL. new val create() : URL val^ Returns \u00b6 URL val^ build \u00b6 [Source] Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. new val build( from: String val, percent_encoded: Bool val = true) : URL val^ ? Parameters \u00b6 from: String val percent_encoded: Bool val = true Returns \u00b6 URL val^ ? valid \u00b6 [Source] Parse the URL string into its components. If it isn't URL encoded, raise an error. new val valid( from: String val) : URL val^ ? Parameters \u00b6 from: String val Returns \u00b6 URL val^ ? Public fields \u00b6 var scheme: String val \u00b6 [Source] URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also RFC 3986 . var user: String val \u00b6 [Source] URL user as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide user information, this will be the empty string. See also RFC 3986 . var password: String val \u00b6 [Source] URL password as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a password, this will be the empty string. See also RFC 3986 . var host: String val \u00b6 [Source] URL host as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a host, this will be the empty string. See also RFC 3986 . var port: U16 val \u00b6 [Source] URL port as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a port, this will be the empty string. See also RFC 3986 . var path: String val \u00b6 [Source] URL path component. If the URL does not provide a path component, this will be the empty string. See also RFC 3986 . var query: String val \u00b6 [Source] URL query component. If the URL does not provide a query component, this will be the empty string. See also RFC 3986 . var fragment: String val \u00b6 [Source] Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also RFC 3986 . Public Functions \u00b6 is_valid \u00b6 [Source] Return true if all elements are correctly URL encoded. fun box is_valid() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] Combine the components into a string. fun box string() : String iso^ Returns \u00b6 String iso^ join \u00b6 [Source] Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. fun val join( that: URL val) : URL val Parameters \u00b6 that: URL val Returns \u00b6 URL val default_port \u00b6 [Source] Report the default port for our scheme. Returns 0 for unrecognised schemes. fun box default_port() : U16 val Returns \u00b6 U16 val","title":"class URL"},{"location":"http_server-URL/#url","text":"[Source] Holds the components of a URL. These are always stored as valid, URL-encoded values. class val URL","title":"URL"},{"location":"http_server-URL/#constructors","text":"","title":"Constructors"},{"location":"http_server-URL/#create","text":"[Source] Create an empty URL. new val create() : URL val^","title":"create"},{"location":"http_server-URL/#returns","text":"URL val^","title":"Returns"},{"location":"http_server-URL/#build","text":"[Source] Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. new val build( from: String val, percent_encoded: Bool val = true) : URL val^ ?","title":"build"},{"location":"http_server-URL/#parameters","text":"from: String val percent_encoded: Bool val = true","title":"Parameters"},{"location":"http_server-URL/#returns_1","text":"URL val^ ?","title":"Returns"},{"location":"http_server-URL/#valid","text":"[Source] Parse the URL string into its components. If it isn't URL encoded, raise an error. new val valid( from: String val) : URL val^ ?","title":"valid"},{"location":"http_server-URL/#parameters_1","text":"from: String val","title":"Parameters"},{"location":"http_server-URL/#returns_2","text":"URL val^ ?","title":"Returns"},{"location":"http_server-URL/#public-fields","text":"","title":"Public fields"},{"location":"http_server-URL/#var-scheme-string-val","text":"[Source] URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also RFC 3986 .","title":"var scheme: String val"},{"location":"http_server-URL/#var-user-string-val","text":"[Source] URL user as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide user information, this will be the empty string. See also RFC 3986 .","title":"var user: String val"},{"location":"http_server-URL/#var-password-string-val","text":"[Source] URL password as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a password, this will be the empty string. See also RFC 3986 .","title":"var password: String val"},{"location":"http_server-URL/#var-host-string-val","text":"[Source] URL host as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a host, this will be the empty string. See also RFC 3986 .","title":"var host: String val"},{"location":"http_server-URL/#var-port-u16-val","text":"[Source] URL port as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a port, this will be the empty string. See also RFC 3986 .","title":"var port: U16 val"},{"location":"http_server-URL/#var-path-string-val","text":"[Source] URL path component. If the URL does not provide a path component, this will be the empty string. See also RFC 3986 .","title":"var path: String val"},{"location":"http_server-URL/#var-query-string-val","text":"[Source] URL query component. If the URL does not provide a query component, this will be the empty string. See also RFC 3986 .","title":"var query: String val"},{"location":"http_server-URL/#var-fragment-string-val","text":"[Source] Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also RFC 3986 .","title":"var fragment: String val"},{"location":"http_server-URL/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URL/#is_valid","text":"[Source] Return true if all elements are correctly URL encoded. fun box is_valid() : Bool val","title":"is_valid"},{"location":"http_server-URL/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-URL/#string","text":"[Source] Combine the components into a string. fun box string() : String iso^","title":"string"},{"location":"http_server-URL/#returns_4","text":"String iso^","title":"Returns"},{"location":"http_server-URL/#join","text":"[Source] Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. fun val join( that: URL val) : URL val","title":"join"},{"location":"http_server-URL/#parameters_2","text":"that: URL val","title":"Parameters"},{"location":"http_server-URL/#returns_5","text":"URL val","title":"Returns"},{"location":"http_server-URL/#default_port","text":"[Source] Report the default port for our scheme. Returns 0 for unrecognised schemes. fun box default_port() : U16 val","title":"default_port"},{"location":"http_server-URL/#returns_6","text":"U16 val","title":"Returns"},{"location":"http_server-URLEncode/","text":"URLEncode \u00b6 [Source] Functions for checking, encoding, and decoding parts of URLs. primitive val URLEncode Constructors \u00b6 create \u00b6 [Source] new val create() : URLEncode val^ Returns \u00b6 URLEncode val^ Public Functions \u00b6 encode \u00b6 [Source] URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true => given string is already at least partially encoded, so '%'s indicate an encoded character. false => given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. fun box encode( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val), percent_encoded: Bool val = true) : String val ? Parameters \u00b6 from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) percent_encoded: Bool val = true Returns \u00b6 String val ? decode \u00b6 [Source] URL decode a string. Raise an error on invalid URL encoded. fun box decode( from: String val) : String val ? Parameters \u00b6 from: String val Returns \u00b6 String val ? check_scheme \u00b6 [Source] Check that the given string is a valid scheme. fun box check_scheme( scheme: String val) : Bool val Parameters \u00b6 scheme: String val Returns \u00b6 Bool val check \u00b6 [Source] Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. fun box check( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val Parameters \u00b6 from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: URLEncode val) : Bool val Parameters \u00b6 that: URLEncode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLEncode val) : Bool val Parameters \u00b6 that: URLEncode val Returns \u00b6 Bool val","title":"primitive URLEncode"},{"location":"http_server-URLEncode/#urlencode","text":"[Source] Functions for checking, encoding, and decoding parts of URLs. primitive val URLEncode","title":"URLEncode"},{"location":"http_server-URLEncode/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLEncode/#create","text":"[Source] new val create() : URLEncode val^","title":"create"},{"location":"http_server-URLEncode/#returns","text":"URLEncode val^","title":"Returns"},{"location":"http_server-URLEncode/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLEncode/#encode","text":"[Source] URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true => given string is already at least partially encoded, so '%'s indicate an encoded character. false => given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. fun box encode( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val), percent_encoded: Bool val = true) : String val ?","title":"encode"},{"location":"http_server-URLEncode/#parameters","text":"from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) percent_encoded: Bool val = true","title":"Parameters"},{"location":"http_server-URLEncode/#returns_1","text":"String val ?","title":"Returns"},{"location":"http_server-URLEncode/#decode","text":"[Source] URL decode a string. Raise an error on invalid URL encoded. fun box decode( from: String val) : String val ?","title":"decode"},{"location":"http_server-URLEncode/#parameters_1","text":"from: String val","title":"Parameters"},{"location":"http_server-URLEncode/#returns_2","text":"String val ?","title":"Returns"},{"location":"http_server-URLEncode/#check_scheme","text":"[Source] Check that the given string is a valid scheme. fun box check_scheme( scheme: String val) : Bool val","title":"check_scheme"},{"location":"http_server-URLEncode/#parameters_2","text":"scheme: String val","title":"Parameters"},{"location":"http_server-URLEncode/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-URLEncode/#check","text":"[Source] Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. fun box check( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val","title":"check"},{"location":"http_server-URLEncode/#parameters_3","text":"from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Parameters"},{"location":"http_server-URLEncode/#returns_4","text":"Bool val","title":"Returns"},{"location":"http_server-URLEncode/#eq","text":"[Source] fun box eq( that: URLEncode val) : Bool val","title":"eq"},{"location":"http_server-URLEncode/#parameters_4","text":"that: URLEncode val","title":"Parameters"},{"location":"http_server-URLEncode/#returns_5","text":"Bool val","title":"Returns"},{"location":"http_server-URLEncode/#ne","text":"[Source] fun box ne( that: URLEncode val) : Bool val","title":"ne"},{"location":"http_server-URLEncode/#parameters_5","text":"that: URLEncode val","title":"Parameters"},{"location":"http_server-URLEncode/#returns_6","text":"Bool val","title":"Returns"},{"location":"http_server-URLPart/","text":"URLPart \u00b6 [Source] type URLPart is (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Type Alias For \u00b6 ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"type URLPart"},{"location":"http_server-URLPart/#urlpart","text":"[Source] type URLPart is (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"URLPart"},{"location":"http_server-URLPart/#type-alias-for","text":"( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Type Alias For"},{"location":"http_server-URLPartFragment/","text":"URLPartFragment \u00b6 [Source] primitive val URLPartFragment Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartFragment val^ Returns \u00b6 URLPartFragment val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartFragment val) : Bool val Parameters \u00b6 that: URLPartFragment val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartFragment val) : Bool val Parameters \u00b6 that: URLPartFragment val Returns \u00b6 Bool val","title":"primitive URLPartFragment"},{"location":"http_server-URLPartFragment/#urlpartfragment","text":"[Source] primitive val URLPartFragment","title":"URLPartFragment"},{"location":"http_server-URLPartFragment/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLPartFragment/#create","text":"[Source] new val create() : URLPartFragment val^","title":"create"},{"location":"http_server-URLPartFragment/#returns","text":"URLPartFragment val^","title":"Returns"},{"location":"http_server-URLPartFragment/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLPartFragment/#eq","text":"[Source] fun box eq( that: URLPartFragment val) : Bool val","title":"eq"},{"location":"http_server-URLPartFragment/#parameters","text":"that: URLPartFragment val","title":"Parameters"},{"location":"http_server-URLPartFragment/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartFragment/#ne","text":"[Source] fun box ne( that: URLPartFragment val) : Bool val","title":"ne"},{"location":"http_server-URLPartFragment/#parameters_1","text":"that: URLPartFragment val","title":"Parameters"},{"location":"http_server-URLPartFragment/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartHost/","text":"URLPartHost \u00b6 [Source] primitive val URLPartHost Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartHost val^ Returns \u00b6 URLPartHost val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartHost val) : Bool val Parameters \u00b6 that: URLPartHost val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartHost val) : Bool val Parameters \u00b6 that: URLPartHost val Returns \u00b6 Bool val","title":"primitive URLPartHost"},{"location":"http_server-URLPartHost/#urlparthost","text":"[Source] primitive val URLPartHost","title":"URLPartHost"},{"location":"http_server-URLPartHost/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLPartHost/#create","text":"[Source] new val create() : URLPartHost val^","title":"create"},{"location":"http_server-URLPartHost/#returns","text":"URLPartHost val^","title":"Returns"},{"location":"http_server-URLPartHost/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLPartHost/#eq","text":"[Source] fun box eq( that: URLPartHost val) : Bool val","title":"eq"},{"location":"http_server-URLPartHost/#parameters","text":"that: URLPartHost val","title":"Parameters"},{"location":"http_server-URLPartHost/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartHost/#ne","text":"[Source] fun box ne( that: URLPartHost val) : Bool val","title":"ne"},{"location":"http_server-URLPartHost/#parameters_1","text":"that: URLPartHost val","title":"Parameters"},{"location":"http_server-URLPartHost/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartPassword/","text":"URLPartPassword \u00b6 [Source] primitive val URLPartPassword Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartPassword val^ Returns \u00b6 URLPartPassword val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartPassword val) : Bool val Parameters \u00b6 that: URLPartPassword val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartPassword val) : Bool val Parameters \u00b6 that: URLPartPassword val Returns \u00b6 Bool val","title":"primitive URLPartPassword"},{"location":"http_server-URLPartPassword/#urlpartpassword","text":"[Source] primitive val URLPartPassword","title":"URLPartPassword"},{"location":"http_server-URLPartPassword/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLPartPassword/#create","text":"[Source] new val create() : URLPartPassword val^","title":"create"},{"location":"http_server-URLPartPassword/#returns","text":"URLPartPassword val^","title":"Returns"},{"location":"http_server-URLPartPassword/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLPartPassword/#eq","text":"[Source] fun box eq( that: URLPartPassword val) : Bool val","title":"eq"},{"location":"http_server-URLPartPassword/#parameters","text":"that: URLPartPassword val","title":"Parameters"},{"location":"http_server-URLPartPassword/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartPassword/#ne","text":"[Source] fun box ne( that: URLPartPassword val) : Bool val","title":"ne"},{"location":"http_server-URLPartPassword/#parameters_1","text":"that: URLPartPassword val","title":"Parameters"},{"location":"http_server-URLPartPassword/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartPath/","text":"URLPartPath \u00b6 [Source] primitive val URLPartPath Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartPath val^ Returns \u00b6 URLPartPath val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartPath val) : Bool val Parameters \u00b6 that: URLPartPath val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartPath val) : Bool val Parameters \u00b6 that: URLPartPath val Returns \u00b6 Bool val","title":"primitive URLPartPath"},{"location":"http_server-URLPartPath/#urlpartpath","text":"[Source] primitive val URLPartPath","title":"URLPartPath"},{"location":"http_server-URLPartPath/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLPartPath/#create","text":"[Source] new val create() : URLPartPath val^","title":"create"},{"location":"http_server-URLPartPath/#returns","text":"URLPartPath val^","title":"Returns"},{"location":"http_server-URLPartPath/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLPartPath/#eq","text":"[Source] fun box eq( that: URLPartPath val) : Bool val","title":"eq"},{"location":"http_server-URLPartPath/#parameters","text":"that: URLPartPath val","title":"Parameters"},{"location":"http_server-URLPartPath/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartPath/#ne","text":"[Source] fun box ne( that: URLPartPath val) : Bool val","title":"ne"},{"location":"http_server-URLPartPath/#parameters_1","text":"that: URLPartPath val","title":"Parameters"},{"location":"http_server-URLPartPath/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartQuery/","text":"URLPartQuery \u00b6 [Source] primitive val URLPartQuery Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartQuery val^ Returns \u00b6 URLPartQuery val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartQuery val) : Bool val Parameters \u00b6 that: URLPartQuery val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartQuery val) : Bool val Parameters \u00b6 that: URLPartQuery val Returns \u00b6 Bool val","title":"primitive URLPartQuery"},{"location":"http_server-URLPartQuery/#urlpartquery","text":"[Source] primitive val URLPartQuery","title":"URLPartQuery"},{"location":"http_server-URLPartQuery/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLPartQuery/#create","text":"[Source] new val create() : URLPartQuery val^","title":"create"},{"location":"http_server-URLPartQuery/#returns","text":"URLPartQuery val^","title":"Returns"},{"location":"http_server-URLPartQuery/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLPartQuery/#eq","text":"[Source] fun box eq( that: URLPartQuery val) : Bool val","title":"eq"},{"location":"http_server-URLPartQuery/#parameters","text":"that: URLPartQuery val","title":"Parameters"},{"location":"http_server-URLPartQuery/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartQuery/#ne","text":"[Source] fun box ne( that: URLPartQuery val) : Bool val","title":"ne"},{"location":"http_server-URLPartQuery/#parameters_1","text":"that: URLPartQuery val","title":"Parameters"},{"location":"http_server-URLPartQuery/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartUser/","text":"URLPartUser \u00b6 [Source] primitive val URLPartUser Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartUser val^ Returns \u00b6 URLPartUser val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartUser val) : Bool val Parameters \u00b6 that: URLPartUser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartUser val) : Bool val Parameters \u00b6 that: URLPartUser val Returns \u00b6 Bool val","title":"primitive URLPartUser"},{"location":"http_server-URLPartUser/#urlpartuser","text":"[Source] primitive val URLPartUser","title":"URLPartUser"},{"location":"http_server-URLPartUser/#constructors","text":"","title":"Constructors"},{"location":"http_server-URLPartUser/#create","text":"[Source] new val create() : URLPartUser val^","title":"create"},{"location":"http_server-URLPartUser/#returns","text":"URLPartUser val^","title":"Returns"},{"location":"http_server-URLPartUser/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-URLPartUser/#eq","text":"[Source] fun box eq( that: URLPartUser val) : Bool val","title":"eq"},{"location":"http_server-URLPartUser/#parameters","text":"that: URLPartUser val","title":"Parameters"},{"location":"http_server-URLPartUser/#returns_1","text":"Bool val","title":"Returns"},{"location":"http_server-URLPartUser/#ne","text":"[Source] fun box ne( that: URLPartUser val) : Bool val","title":"ne"},{"location":"http_server-URLPartUser/#parameters_1","text":"that: URLPartUser val","title":"Parameters"},{"location":"http_server-URLPartUser/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-UnknownMethod/","text":"UnknownMethod \u00b6 [Source] primitive val UnknownMethod is _RequestParseError val Implements \u00b6 _RequestParseError val Constructors \u00b6 create \u00b6 [Source] new val create() : UnknownMethod val^ Returns \u00b6 UnknownMethod val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: UnknownMethod val) : Bool val Parameters \u00b6 that: UnknownMethod val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: UnknownMethod val) : Bool val Parameters \u00b6 that: UnknownMethod val Returns \u00b6 Bool val","title":"primitive UnknownMethod"},{"location":"http_server-UnknownMethod/#unknownmethod","text":"[Source] primitive val UnknownMethod is _RequestParseError val","title":"UnknownMethod"},{"location":"http_server-UnknownMethod/#implements","text":"_RequestParseError val","title":"Implements"},{"location":"http_server-UnknownMethod/#constructors","text":"","title":"Constructors"},{"location":"http_server-UnknownMethod/#create","text":"[Source] new val create() : UnknownMethod val^","title":"create"},{"location":"http_server-UnknownMethod/#returns","text":"UnknownMethod val^","title":"Returns"},{"location":"http_server-UnknownMethod/#public-functions","text":"","title":"Public Functions"},{"location":"http_server-UnknownMethod/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"http_server-UnknownMethod/#returns_1","text":"String iso^","title":"Returns"},{"location":"http_server-UnknownMethod/#eq","text":"[Source] fun box eq( that: UnknownMethod val) : Bool val","title":"eq"},{"location":"http_server-UnknownMethod/#parameters","text":"that: UnknownMethod val","title":"Parameters"},{"location":"http_server-UnknownMethod/#returns_2","text":"Bool val","title":"Returns"},{"location":"http_server-UnknownMethod/#ne","text":"[Source] fun box ne( that: UnknownMethod val) : Bool val","title":"ne"},{"location":"http_server-UnknownMethod/#parameters_1","text":"that: UnknownMethod val","title":"Parameters"},{"location":"http_server-UnknownMethod/#returns_3","text":"Bool val","title":"Returns"},{"location":"http_server-Version/","text":"Version \u00b6 [Source] union of supported HTTP Versions See: https://tools.ietf.org/html/rfc2616#section-3.1 type Version is ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val) Type Alias For \u00b6 (( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"type Version"},{"location":"http_server-Version/#version","text":"[Source] union of supported HTTP Versions See: https://tools.ietf.org/html/rfc2616#section-3.1 type Version is ((HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Version"},{"location":"http_server-Version/#type-alias-for","text":"(( HTTP09 val | HTTP10 val | HTTP11 val) & _Version val)","title":"Type Alias For"},{"location":"src/http_server/handler/","text":"interface Handler \"\"\" This is the interface through which HTTP requests are delivered *to* application code and through which HTTP responses are sent to the underlying connection. Instances of a Handler are executed in the context of the `Session` actor so most of them should be passing data on to a processing actor. Each `Session` must have a unique instance of the handler. The application code does not necessarily know when an `Session` is created, so the application must provide an instance of `HandlerFactory` that will be called at the appropriate time. ### Receiving Requests When an [Request](http_server-Request.md) is received on an [Session](http_server-Session.md) actor, the corresponding [Handler.apply](http_server-Handler.md#apply) method is called with the request and a [RequestID](http_server-RequestID). The [Request](http_server-Request.md) contains the information extracted from HTTP Headers and the Request Line, but it does not contain any body data. It is sent to [Handler.apply](http_server-Handler.md#apply) before the body is fully received. If the request has a body, its raw data is sent to the [Handler.chunk](http_server-Handler.md#chunk) method together with the [RequestID](http_server-RequestID.md) of the request it belongs to. Once all body data is received, [Handler.finished](http_server-Handler.md#finished) is called with the [RequestID](http_server-RequestID.md) of the request it belongs to. Now is the time to act on the full body data, if it hasn't been processed yet. The [RequestID](http_server-Requestid.md) must be kept around for sending the response for this request. This way the session can ensure, all responses are sent in the same order as they have been received, which is required for HTTP pipelining. This way processing responses can be passed to other actors and processing can take arbitrary times. The [Session](http_server-Session.md) will take care of sending the responses in the correct order. It is guaranteed that the call sequence is always: - exactly once: `apply(request_n, requestid_n)` - zero or more times: `chunk(data, requestid_n)` - exactly once: `finished(requestid_n)` And so on for `requestid_(n + 1)`. Only after `finished` has been called for a `RequestID`, the next request will be received by the Handler instance, there will be no interleaving. So it is save to keep state for the given request in a Handler between calls to `apply` and `finished`. #### Failures and Cancelling If a [Session](http_server-Session.md) experienced faulty requests, the [Handler](http_server-Handler.md) is notified via [Handler.failed](http_server-Handler.md#failed). If the underlying connection to a [Session](http_server-Session.md) has been closed, the [Handler](http_server-Handler.md) is notified via [Handler.closed](http_server-Handler.md#closed). ### Sending Responses A handler is instantiated using a [HandlerFactory](http_server-HandlerFactory.md), which passes an instance of [Session](http_server-Session.md) to be used in constructing a handler. A Session is required to be able to send responses. See the docs for [Session](http_server-Session.md) for ways to send responses. Example Handler: ```pony use \"http\" use \"valbytes\" class MyHandler is Handler let _session: Session var _path: String = \"\" var _body: ByteArrays = ByteArrays new create(session: Session) => _session = session fun ref apply(request: Request val, request_id: RequestID): Any => _path = request.uri().path fun ref chunk(data: ByteSeq val, request_id: RequestID) => _body = _body + data fun ref finished(request_id: RequestID) => _session.send_raw( Responses.builder() .set_status(StatusOk) .add_header(\"Content-Length\", (_body.size() + _path.size() + 13).string()) .add_header(\"Content-Type\", \"text/plain\") .finish_headers() .add_chunk(\"received \") .add_chunk((_body = ByteArrays).array()) .add_chunk(\" at \") .add_chunk(_path) .build(), request_id ) _session.send_finished(request_id) ``` \"\"\" fun ref apply(request: Request val, request_id: RequestID): Any => \"\"\" Notification of an incoming message. Only one HTTP message will be processed at a time, and that starts with a call to this method. \"\"\" fun ref chunk(data: ByteSeq val, request_id: RequestID) => \"\"\" Notification of incoming body data. The body belongs to the most recent `Request` delivered by an `apply` notification. \"\"\" fun ref finished(request_id: RequestID) => \"\"\" Notification that no more body chunks are coming. Delivery of this HTTP message is complete. \"\"\" fun ref cancelled(request_id: RequestID) => \"\"\" Notification that sending a response has been cancelled locally, e.g. by closing the server or manually cancelling a single request. \"\"\" fun ref failed(reason: RequestParseError, request_id: RequestID) => \"\"\" Notification about failure parsing HTTP requests. \"\"\" fun ref closed() => \"\"\" Notification that the underlying connection has been closed. \"\"\" fun ref throttled() => \"\"\" Notification that the session temporarily can not accept more data. \"\"\" fun ref unthrottled() => \"\"\" Notification that the session can resume accepting data. \"\"\" interface HandlerFactory \"\"\" The TCP connections that underlie HTTP sessions get created within the `http` package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a `class` that implements this interface. The `HandlerFactory.apply` method will be called when a new `Session` is created, giving the application a chance to create an instance of its own `Handler`. This happens on both client and server ends. \"\"\" fun apply(session: Session): Handler ref^ \"\"\" Called by the [Session](http_server-Session.md) when it needs a new instance of the application's [Handler](http_server-Handler.md). It is suggested that the `session` value be passed to the constructor for the new [Handler](http_server-Handler.md), you will need it for sending stuff back. This part must be implemented, as there might be more paramaters that need to be passed for creating a Handler. \"\"\" interface HandlerWithoutContext is Handler \"\"\" Simple [Handler](http_server-Handler.md) that can be constructed with only a Session. \"\"\" new create(session: Session) primitive SimpleHandlerFactory[T: HandlerWithoutContext] \"\"\" HandlerFactory for a HandlerWithoutContext. Just create it like: ```pony let server = Server( ..., SimpleHandlerFactory[MySimpleHandler], ... ) ``` \"\"\" fun apply(session: Session): Handler ref^ => T.create(session)","title":"Handler"},{"location":"src/http_server/headers/","text":"use \"collections\" type Header is (String, String) \"\"\" Defining a HTTP header as Tuple Strings for name and value. \"\"\" class Headers \"\"\" Collection for headers based on a sorted array we use bisect to insert and get values. We compare the strings case-insensitive when sorting, inserting and getting headers. We want to use the bytes we get to build the headers as is without changing them, in order to avoid allocation. This isn't using a hashmap because getting the hash in a case-insensitive manner would require to iterate over single bytes, which isn't as fast as it could be. Also the amount of headers in a request is usually small, so the penalty of doing a binary search isn't as bad. Getting a header is case insensitive, so you don't need to care about header name casing when asking for a header. ### Usage ```pony let headers = Headers header.set(\"Connection\", \"Close\") // setting a header, possibly overwriting previous values header.add(\"Multiple\", \"1\") // adding a header, concatenating previous and this value with a comma. header.add(\"Multiple\", \"2\") // getting a header is case-insensitive match header.get(\"cOnNeCTiOn\") | let value: String => // do something with value else // not found end // iterating over headers for (name, value) in headers.values() do env.out.print(name + \": \" + value) end // remove all headers from this structure headers.clear() ``` \"\"\" // avoid reallocating new strings just because header names are case // insensitive. // handle insensitivity during add and get // - TODO: find a way to do this with hashmap var _hl: Array[Header] new ref create() => _hl = _hl.create(4) new ref from_map(headers: Map[String, String]) => _hl = _hl.create(headers.size()) for header in headers.pairs() do add(header._1, header._2) end new ref from_seq(headers: ReadSeq[Header]) => _hl = _hl.create(headers.size()) for header in headers.values() do add(header._1, header._2) end new ref from_iter(headers: Iterator[Header], size: USize = 4) => _hl = _hl.create(size) for header in headers do add(header._1, header._2) end fun ref set(name: String, value: String) => \"\"\" if a header with name already exists, its value will be overriden with this value. \"\"\" // binary search try var i = USize(0) var l = USize(0) var r = _hl.size() while l < r do i = (l + r).fld(2) let header = _hl(i)? match _compare(header._1, name) | Less => l = i + 1 | Equal => _hl(i)? = (name, value) return else r = i end end _hl.insert(l, (name, value))? end fun ref add(name: String, value: String) => \"\"\" If a header with this name already exists, value will be appended after a separating comma. \"\"\" // binary search try var i = USize(0) var l = USize(0) var r = _hl.size() while l < r do i = (l + r).fld(2) let header = _hl(i)? match _compare(header._1, name) | Less => l = i + 1 | Equal => let old_value = header._2 let new_value = recover iso String(old_value.size() + 1 + value.size()) end new_value.>append(old_value) .>append(\",\") .>append(value) _hl(i)? = (header._1, consume new_value) return else r = i end end _hl.insert(l, (name, value))? end fun get(name: String): (String | None) => // binary search var l = USize(0) var r = _hl.size() var i = USize(0) try while l < r do i = (l + r).fld(2) let header = _hl(i)? match _compare(header._1, name) | Less => l = i + 1 | Equal => return header._2 | Greater => r = i end end end None fun ref clear() => _hl.clear() fun values(): Iterator[Header] => _hl.values() fun byte_size(): USize => \"\"\" size of the given headers including header-separator and crlf. \"\"\" var s = USize(0) for (k, v) in _hl.values() do s + k.size() + 2 + v.size() + 2 end s fun _compare(left: String, right: String): Compare => \"\"\" Less: left sorts lexicographically smaller than right Equal: same size, same content Greater: left sorts lexicographically higher than right _compare(\"A\", \"B\") ==> Less _compare(\"AA\", \"A\") ==> Greater _compare(\"A\", \"AA\") ==> Less _compare(\"\", \"\") ==> Equal \"\"\" let ls = left.size() let rs = right.size() let min = ls.min(rs) var i = USize(0) while i < min do try let lc = _lower(left(i)?) let rc = _lower(right(i)?) if lc < rc then return Less elseif rc < lc then return Greater end else Less // should not happen, size checked end i = i + 1 end // all characters equal up to min size if ls > min then // left side is longer, so considered greater Greater elseif rs > min then // right side is longer, so considered greater Less else // both sides equal size and content Equal end fun _lower(c: U8): U8 => if (c >= 0x41) and (c <= 0x5A) then c + 0x20 else c end","title":"Headers"},{"location":"src/http_server/method/","text":"interface val Method is (Equatable[Method] & Stringable) \"\"\" HTTP method See: https://tools.ietf.org/html/rfc2616#section-5.1.1 \"\"\" fun repr(): String val fun string(): String iso^ fun eq(o: Method): Bool primitive CONNECT is Method fun repr(): String val => \"CONNECT\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive GET is Method fun repr(): String val => \"GET\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive DELETE is Method fun repr(): String => \"DELETE\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive HEAD is Method fun repr(): String => \"HEAD\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive OPTIONS is Method fun repr(): String => \"OPTIONS\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive PATCH is Method fun repr(): String => \"PATCH\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive POST is Method fun repr(): String => \"POST\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive PUT is Method fun repr(): String => \"PUT\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive TRACE is Method fun repr(): String => \"TRACE\" fun string(): String iso^ => repr().clone() fun eq(o: Method): Bool => o is this primitive Methods fun parse(maybe_method: ReadSeq[U8]): (Method | None) => if _Equality.readseqs(maybe_method, GET.repr()) then GET elseif _Equality.readseqs(maybe_method, PUT.repr()) then PUT elseif _Equality.readseqs(maybe_method, PATCH.repr()) then PUT elseif _Equality.readseqs(maybe_method, POST.repr()) then POST elseif _Equality.readseqs(maybe_method, HEAD.repr()) then HEAD elseif _Equality.readseqs(maybe_method, DELETE.repr()) then DELETE elseif _Equality.readseqs(maybe_method, CONNECT.repr()) then CONNECT elseif _Equality.readseqs(maybe_method, OPTIONS.repr()) then OPTIONS elseif _Equality.readseqs(maybe_method, TRACE.repr()) then TRACE end primitive _Equality fun readseqs(left: ReadSeq[U8], right: ReadSeq[U8]): Bool => let size = left.size() if size != right.size() then false else var ri: USize = 0 try // TODO: vectorize if possible while ri < size do if left(ri)? != right(ri)? then return false end ri = ri + 1 end true else false end end","title":"Method"},{"location":"src/http_server/mimetypes/","text":"primitive MimeTypes \"\"\" Provide mapping from file names to MIME types. TODO load from /etc/mime.types \"\"\" fun apply(name: String): String val^ => \"\"\" Mapping is based on the file type, following the last period in the name. \"\"\" try // This will fail if no period is found. let dotpos = (name.rfind(\".\", -1, 0)? + 1).usize() match name.trim(dotpos).lower() | \"html\" => \"text/html\" | \"jpg\" => \"image/jpeg\" | \"jpeg\" => \"image/jpeg\" | \"png\" => \"image/png\" | \"css\" => \"text/css\" | \"ico\" => \"image/x-icon\" | \"js\" => \"application/javascript\" | \"mp3\" => \"audio/mpeg3\" | \"m3u\" => \"audio/mpegurl\" | \"ogg\" => \"audio/ogg\" | \"doc\" => \"application/msword\" | \"gif\" => \"image/gif\" | \"txt\" => \"text/plain\" | \"wav\" => \"audio/wav\" else \"application/octet-stream\" // None of the above end else \"application/octet-stream\" // No filetype end","title":"Mimetypes"},{"location":"src/http_server/request/","text":"interface val _Version is (Equatable[Version] & Stringable) fun to_bytes(): Array[U8] val primitive HTTP11 is _Version \"\"\" HTTP/1.1 \"\"\" fun string(): String iso^ => recover iso String(8).>append(\"HTTP/1.1\") end fun to_bytes(): Array[U8] val => [as U8: 'H'; 'T'; 'T'; 'P'; '/'; '1'; '.'; '1'] fun eq(o: Version): Bool => o is this primitive HTTP10 is _Version \"\"\" HTTP/1.0 \"\"\" fun string(): String iso^ => recover iso String(8).>append(\"HTTP/1.0\") end fun to_bytes(): Array[U8] val => [as U8: 'H'; 'T'; 'T'; 'P'; '/'; '1'; '.'; '0'] fun eq(o: Version): Bool => o is this primitive HTTP09 is _Version \"\"\" HTTP/0.9 \"\"\" fun string(): String iso^ => recover iso String(8).>append(\"HTTP/0.9\") end fun to_bytes(): Array[U8] val => [as U8: 'H'; 'T'; 'T'; 'P'; '/'; '0'; '.'; '9'] fun eq(o: Version): Bool => o is this type Version is ((HTTP09 | HTTP10 | HTTP11) & _Version) \"\"\" union of supported HTTP Versions See: https://tools.ietf.org/html/rfc2616#section-3.1 \"\"\" interface val Request \"\"\" HTTP Request * Method * URI * HTTP-Version * Headers * Transfer-Coding * Content-Length Without body. \"\"\" fun method(): Method fun uri(): URL fun version(): Version fun header(name: String): (String | None) fun headers(): Iterator[Header] fun transfer_coding(): (Chunked | None) fun content_length(): (USize | None) fun has_body(): Bool class val BuildableRequest is Request \"\"\" A HTTP Request that is created with `trn` refcap in order to be mutable, and then, when done, be consumed into a `val` reference. This is the way, the `HTTP11RequestParser` is handling this class and so should you. \"\"\" var _method: Method var _uri: URL var _version: Version embed _headers: Headers = _headers.create() var _transfer_coding: (Chunked | None) var _content_length: (USize | None) new trn create( method': Method = GET, uri': URL = URL, version': Version = HTTP11, transfer_coding': (Chunked | None) = None, content_length': (USize | None) = None) => _method = method' _uri = uri' _version = version' _transfer_coding = transfer_coding' _content_length = content_length' fun method(): Method => \"\"\" The Request Method. See: https://tools.ietf.org/html/rfc2616#section-5.1.1 \"\"\" _method fun ref set_method(method': Method): BuildableRequest ref => _method = method' this fun uri(): URL => \"\"\" The request URI See: https://tools.ietf.org/html/rfc2616#section-5.1.2 \"\"\" _uri fun ref set_uri(uri': URL): BuildableRequest ref => _uri = uri' this fun version(): Version => \"\"\" The HTTP version as given on the Request Line. See: https://tools.ietf.org/html/rfc2616#section-3.1 and https://tools.ietf.org/html/rfc2616#section-5.1 \"\"\" _version fun ref set_version(v: Version): BuildableRequest ref => _version = v this fun header(name: String): (String | None) => \"\"\" Case insensitive lookup of header value in this request. Returns `None` if no header with name exists in this request. \"\"\" _headers.get(name) fun headers(): Iterator[Header] => _headers.values() fun ref add_header(name: String, value: String): BuildableRequest ref => \"\"\" Add a header with name and value to this request. If a header with this name already exists, the given value will be appended to it, with a separating comma. \"\"\" // TODO: check for special headers like Transfer-Coding _headers.add(name, value) this fun ref set_header(name: String, value: String): BuildableRequest ref => \"\"\" Set a header in this request to the given value. If a header with this name already exists, the previous value will be overwritten. \"\"\" _headers.set(name, value) this fun ref clear_headers(): BuildableRequest ref => \"\"\" Remove all previously set headers from this request. \"\"\" _headers.clear() this fun transfer_coding(): (Chunked | None) => \"\"\" If `Chunked` the request body is encoded with Chunked Transfer-Encoding: See: https://tools.ietf.org/html/rfc2616#section-3.6.1 If `None`, no Transfer-Encoding is applied. A Content-Encoding might be applied to the body. \"\"\" _transfer_coding fun ref set_transfer_coding(te: (Chunked | None)): BuildableRequest ref => _transfer_coding = te this fun content_length(): (USize | None) => \"\"\" The content-length of the body of the request, counted in number of bytes. If the content-length is `None`, the request either has no content-length set or it's transfer-encoding is `Chunked`: https://tools.ietf.org/html/rfc2616#section-3.6.1 \"\"\" _content_length fun ref set_content_length(cl: USize): BuildableRequest ref => _content_length = cl this fun has_body(): Bool => \"\"\" Returns `true` if either we have Chunked Transfer-Encoding or a given Content-Length. In those cases we can expect a body. \"\"\" (transfer_coding() is Chunked) or match content_length() | let x: USize if x > 0 => true else false end","title":"Request"},{"location":"src/http_server/request_ids/","text":"type RequestID is USize primitive RequestIDs \"\"\" Utilities for dealing with type RequestID in order to not assume anything about its actual implementation. \"\"\" fun max_value(): RequestID => USize.max_value() fun min(id1: RequestID, id2: RequestID): RequestID => id1.min(id2) fun max(id1: RequestID, id2: RequestID): RequestID => id1.max(id2) fun next(id: RequestID): RequestID => id + 1 fun gt(id1: RequestID, id2: RequestID): Bool => id1 > id2 fun gte(id1: RequestID, id2: RequestID): Bool => id1 >= id2","title":"Request ids"},{"location":"src/http_server/request_parser/","text":"use \"valbytes\" use \"debug\" primitive TooLarge is _RequestParseError fun string(): String iso^ => \"TooLarge\".clone() primitive UnknownMethod is _RequestParseError fun string(): String iso^ => \"UnknownMethod\".clone() primitive InvalidURI is _RequestParseError fun string(): String iso^ => \"InvalidURI\".clone() primitive InvalidVersion is _RequestParseError fun string(): String iso^ => \"InvalidVersion\".clone() primitive InvalidContentLength is _RequestParseError fun string(): String iso^ => \"InvalidContentLength\".clone() primitive InvalidTransferCoding is _RequestParseError fun string(): String iso^ => \"InvalidTransferCoding\".clone() primitive InvalidChunk is _RequestParseError fun string(): String iso^ => \"InvalidChunk\".clone() interface val _RequestParseError is Stringable type RequestParseError is (( TooLarge | UnknownMethod | InvalidURI | InvalidVersion | InvalidContentLength | InvalidTransferCoding | InvalidChunk ) & _RequestParseError) primitive NeedMore is Stringable fun string(): String iso^ => \"NeedMore\".clone() type ParseReturn is (NeedMore | RequestParseError | None) \"\"\"what is returned from `HTTP11RequestParser.parse(...)`\"\"\" primitive _ExpectRequestLine primitive _ExpectHeaders primitive _ExpectBody primitive _ExpectChunkStart primitive _ExpectChunk primitive _ExpectChunkEnd type _ParserState is ( _ExpectRequestLine | _ExpectHeaders | _ExpectBody | _ExpectChunkStart | _ExpectChunk | _ExpectChunkEnd) primitive Chunked interface tag HTTP11RequestHandler \"\"\" Downstream actor that is notified of parse results, be it a valid `Request` containing method, URL, headers and other metadata, or a specific `RequestParseError`. \"\"\" be _receive_start(request: Request val, request_id: RequestID) \"\"\" Receive parsed Request \"\"\" be _receive_chunk(data: Array[U8] val, request_id: RequestID) be _receive_finished(request_id: RequestID) be _receive_failed(parse_error: RequestParseError, request_id: RequestID) class HTTP11RequestParser let _max_request_line_size: USize = 8192 // TODO make configurable let _max_headers_size: USize = 8192 // TODO make configurable let _max_chunk_size_line_length: USize = 128 // TODO: make configurable let _handler: HTTP11RequestHandler var _state: _ParserState = _ExpectRequestLine var _buffer: ByteArrays = ByteArrays.create() var _request_counter: RequestID = 0 var _current_request: BuildableRequest trn = BuildableRequest.create() var _expected_body_length: USize = 0 var _persistent_connection: Bool = true var _transfer_coding: (Chunked | None) = None new create(handler: HTTP11RequestHandler) => _handler = handler fun ref parse(data: Array[U8] val): ParseReturn => _buffer = _buffer + (consume data) let ret = match _state | _ExpectRequestLine => _parse_request_line() | _ExpectHeaders => _parse_headers() | _ExpectBody => _parse_body() | _ExpectChunkStart => _parse_chunk_start() | _ExpectChunk => _parse_chunk() | _ExpectChunkEnd => _parse_chunk_end() end // signal errors to result receiver match ret | let rpe: RequestParseError => _handler._receive_failed(rpe, _request_counter) reset(where reset_request = true) // TODO: drop data here? end ret fun _skip_whitespace(start: USize = 0): USize => _buffer.skip_while(_HTTP11Parsing~is_whitespace(), start) fun _skip_horizontal_space(start: USize = 0): USize => _buffer.skip_while(_HTTP11Parsing~is_horizontal_space(), start) fun _request_line_exhausted(): (TooLarge | NeedMore) => if _buffer.size() > _max_request_line_size then TooLarge else NeedMore end fun _chunk_size_line_exhausted(): (InvalidChunk | NeedMore) => if _buffer.size() > _max_chunk_size_line_length then InvalidChunk else NeedMore end fun _chunk_trailers_exhausted(): (InvalidChunk | NeedMore) => if _buffer.size() > _max_headers_size then InvalidChunk else NeedMore end fun _headers_exhausted(): (TooLarge | NeedMore) => if _buffer.size() > _max_headers_size then TooLarge else NeedMore end fun ref _parse_request_line(): ParseReturn => let start = _skip_whitespace(0) if start == USize.max_value() then return _request_line_exhausted() end match _buffer.find(\" \", start) | (true, let method_end_idx: USize) => let raw_method = _buffer.string(start, method_end_idx) let method = Methods.parse(raw_method) match method | None => return UnknownMethod | let m: Method => _current_request.set_method(m) end let uri_start = _skip_horizontal_space(method_end_idx + 1) if uri_start == USize.max_value() then return _request_line_exhausted() end match _buffer.find(\" \", uri_start) | (true, let url_end_idx: USize) => let raw_uri = _buffer.string(uri_start, url_end_idx) let uri = try URL.valid(raw_uri)? else return InvalidURI end _current_request.set_uri(uri) let version_start = _skip_horizontal_space(url_end_idx + 1) if version_start == USize.max_value() then return _request_line_exhausted() end if (_buffer.size() - version_start) >= 8 then try if (_buffer(version_start)? == 'H') and (_buffer(version_start + 1)? == 'T') and (_buffer(version_start + 2)? == 'T') and (_buffer(version_start + 3)? == 'P') and (_buffer(version_start + 4)? == '/') and (_buffer(version_start + 5)? == '1') and (_buffer(version_start + 6)? == '.') then var http_minor_version = _buffer(version_start + 7)? let http_version = match http_minor_version | '1' => HTTP11 | '0' => HTTP10 else // invalid http minor version return InvalidVersion end _current_request.set_version(http_version) // expect CRLF if (_buffer(version_start + 8)? != '\\r') and (_buffer(version_start + 9)? != '\\n') then return InvalidVersion end // trim the buffer _buffer = _buffer.drop(version_start + 10) _state = _ExpectHeaders _parse_headers() else // invalid http version string return InvalidVersion end else _request_line_exhausted() end else // not enough space for http version _request_line_exhausted() end else // no whitespace after uri found _request_line_exhausted() end else // no whitespace after method found _request_line_exhausted() end fun ref _parse_headers(): ParseReturn => var header_start: USize = 0 // we expect the buffer to be cut off after the request line var eoh: Bool = false while not eoh do match _parse_header(header_start) | (let name: String, let value: String, let hend: USize) => _handle_special_headers(name, value) _current_request.add_header(name, value) header_start = hend | let hend: USize => // EOH header_start = hend eoh = true // break | NeedMore => return NeedMore end end // EOH // drop headers after reaching EOH _buffer = _buffer.drop(header_start) // send request downstream _send_request() _state = _ExpectBody _parse_body() fun ref _send_request() => // send it down to the handler _handler._receive_start( // resetting the request here already, to pass down a trn _current_request = BuildableRequest.create(), _request_counter ) fun ref _handle_special_headers(name: String, value: String): ParseReturn => if CompareCaseInsensitive(name, \"content-length\") then let cl = try value.usize()? else return InvalidContentLength end _current_request.set_content_length(cl) _expected_body_length = cl elseif CompareCaseInsensitive(name, \"transfer-encoding\") then try value.find(\"chunked\")? _transfer_coding = Chunked _current_request.set_transfer_coding(Chunked) else return InvalidTransferCoding end elseif CompareCaseInsensitive(name, \"connection\") then _persistent_connection = if value == \"close\" then false else true end end None fun ref _parse_header(start: USize): ((String, String, USize) | NeedMore | RequestParseError | USize) => match _buffer.find(\"\\r\\n\", start) | (true, let header_line_end: USize) => if header_line_end == start then // we reached end of headers return header_line_end + 2 end match _buffer.find(\":\", start, header_line_end) | (true, let header_name_end: USize) => let header_name = _buffer.string(start, header_name_end) let header_value_start = _skip_horizontal_space(header_name_end + 1) try (let header_value, let header_end) = if (_buffer.size() > (header_line_end + 3)) and _HTTP11Parsing.is_horizontal_space(_buffer(header_line_end + 3)?) then // we have a header spanning multiple lines let multi_line_value: String trn = recover trn String((header_line_end - header_value_start) * 2) end multi_line_value.append(_buffer.string(header_value_start, header_line_end)) var hend: USize = header_line_end var line_start = hend + 3 while (_buffer.size() > (line_start)) and _HTTP11Parsing.is_horizontal_space(_buffer(line_start)?) do let line_value_start = _skip_horizontal_space(line_start) match _buffer.find(\"\\r\\n\", line_value_start) | (true, let line_end: USize) => multi_line_value.append(_buffer.string(line_value_start, line_end)) hend = line_end line_start = hend + 3 else return _headers_exhausted() end end (consume multi_line_value, hend) else // single line header, simple processing, in best case no // additional allocation (_buffer.string(header_value_start, header_line_end), header_line_end) end (header_name, header_value, header_end + 2) else // should never happen, guarded _buffer.apply calls return _headers_exhausted() end else // no ':' found _headers_exhausted() end else // no CRLF found _headers_exhausted() end fun ref _parse_body(): ParseReturn => match _transfer_coding | Chunked => _state = _ExpectChunkStart _parse_chunk_start() else if _expected_body_length > 0 then let available = _expected_body_length.min(_buffer.size()) if available > 0 then let data = _buffer.trim(0, available) _buffer = _buffer.drop(data.size()) _expected_body_length = _expected_body_length - data.size() _handler._receive_chunk(data, _request_counter) end end if _expected_body_length == 0 then _handler._receive_finished(_request_counter) reset() if _buffer.size() > 0 then _parse_request_line() end else NeedMore end end fun ref _parse_chunk_start(): ParseReturn => match _buffer.find(\"\\r\\n\", 0) | (true, let chunk_start_line_end: USize) => let chunk_length_end = match _buffer.find(\";\", 0, chunk_start_line_end) | (true, let cle: USize) => // we found some chunk extensions // don't care, YOLO cle else chunk_start_line_end end let chunk_length_str = _buffer.string(0, chunk_length_end) _buffer = _buffer.drop(chunk_start_line_end + 2) try match chunk_length_str.read_int[USize](0, 16)? | (0, 0) => return InvalidChunk // chunk-size is not a hex number | (0, _) => // last chunk _state = _ExpectChunkEnd _parse_chunk_end() | (let chunk_length: USize, _) => Debug(\"chunk-length: \" + chunk_length.string()) // set valid chunk length _expected_body_length = chunk_length _state = _ExpectChunk _parse_chunk() end else return InvalidChunk // HEX chunk-size integer out of range end else _chunk_size_line_exhausted() // no CRLF found end fun ref _parse_chunk_end(): ParseReturn => \"\"\" handle possible trailer headers (by skipping them) and verify the finishing CRLF. \"\"\" // search for CRLF ending chunked request match _buffer.find(\"\\r\\n\", 0) | (true, 0) => // immediate CRLF --> no trailers _buffer = _buffer.drop(2) // skip final CRLF | (true, let line_end: USize) => // data before CRLF --> trailers match _buffer.find(\"\\r\\n\\r\\n\", line_end) | (true, let trailer_end: USize) => // skip trailers and final CRLF _buffer = _buffer.drop(trailer_end + 4) else return _chunk_trailers_exhausted() // trailer line too long or we need more end else return _chunk_trailers_exhausted() // trailer line too long or we need more end // we got a final CRLF for this chunked request _handler._receive_finished(_request_counter) reset() if _buffer.size() > 0 then _parse_request_line() end fun ref _parse_chunk(): ParseReturn => \"\"\" This will not be called for the last-chunk with length 0. See _parse_chunk_start. \"\"\" if _expected_body_length > 0 then let available = _expected_body_length.min(_buffer.size()) if available > 0 then let data = _buffer.trim(0, available) _buffer = _buffer.drop(data.size()) _expected_body_length = _expected_body_length - data.size() //Debug(\"send chunk of size \" + data.size().string()) _handler._receive_chunk(data, _request_counter) end end if _expected_body_length == 0 then // end of chunk, expect CRLF, otherwise fail try if (_buffer(0)? == '\\r') and (_buffer(1)? == '\\n') then _buffer = _buffer.drop(2) else return InvalidChunk // no CRLF after chunk end else return NeedMore // not enough data for reading a CRLF end // expect next chunk _state = _ExpectChunkStart _parse_chunk_start() else NeedMore end fun ref reset( drop_data: Bool = false, reset_request: Bool = false) => if reset_request then _current_request = BuildableRequest.create() end _request_counter = _request_counter + 1 _state = _ExpectRequestLine _expected_body_length = 0 _persistent_connection = true _transfer_coding = None if drop_data then _buffer = ByteArrays.create() end // TODO: handle closed event primitive _HTTP11Parsing \"\"\" Common stuff for parsing HTTP/1.1 \"\"\" fun tag is_whitespace(ch: U8): Bool => (ch == 0x09) or (ch == 0x0a) or (ch == 0x0d) or (ch == 0x20) fun tag is_horizontal_space(ch: U8): Bool => (ch == 0x09) or (ch == 0x20) primitive CompareCaseInsensitive fun _lower(c: U8): U8 => if (c >= 0x41) and (c <= 0x5A) then c + 0x20 else c end fun apply(left: String, right: String): Bool => \"\"\" Returns true if both strings compare equal when compared case insensitively \"\"\" if left.size() != right.size() then false else var i: USize = 0 while i < left.size() do try if _lower(left(i)?) != _lower(right(i)?) then return false end else return false end i = i + 1 end true end","title":"Request parser"},{"location":"src/http_server/response/","text":"use \"valbytes\" use \"format\" interface val Response is ByteSeqIter \"\"\" Representing a HTTP response minus the body. \"\"\" fun version(): Version fun status(): Status fun header(name: String): (String | None) fun headers(): Iterator[Header] fun transfer_coding(): (Chunked | None) fun content_length(): (USize | None) fun to_bytes(): ByteArrays fun array(): Array[U8] iso^ primitive Responses // TODO: better naming \"\"\" The entry-point into building Responses. \"\"\" fun builder(version: Version = HTTP11): ResponseBuilder => \"\"\" Official way to get a reusable [ResponseBuilder](http_server-ResponseBuilder.md) to build your responses efficiently. \"\"\" _FullResponseBuilder._create(version) interface ResponseBuilder \"\"\" Basic interface for a ResponseBuilder that can be used with chaining method calls. It enforces a strict order of build steps by only making the next step available as a return to a function required to transition. E.g. You must call `set_status(...)` in order to get back a [ResponseBuilderHeaders](http_server-ResponseBuilderHeaders.md) to add headers to the response. You need to call `finish_headers()` in order to be able to add body data with [ResponseBuilderBody](http_server-ResponseBuilderBody.md). You can always reset the builder to start out fresh from the beginning. Implementations may take advantage of `reset()` by returning itself here, allowing for object reuse. Use [ResponseBuilderBody.build()](http_server-ResponseBuilderBody.md#build) to finally build the response into a [ByteSeqIter](builtin-ByteSeqIter.md), taylored for use with [Session.send_raw()](http_server-Session.md#send_raw). Example usage: ```pony let builder: ResponseBuilder = Responses.builder() builder.set_status(StatusOK) .add_header(\"Content-Length\", \"4\") .add_header(\"Content-Type\", \"text/plain; charset=UTF-8\") .add_header(\"Server\", \"pony-http\") .finish_headers() .add_chunk(\"COOL\") .build() ``` \"\"\" fun ref set_status(status: Status): ResponseBuilderHeaders fun ref reset(): ResponseBuilder interface ResponseBuilderHeaders fun ref add_header(name: String, value: String): ResponseBuilderHeaders fun ref set_transfer_encoding(chunked: (Chunked | None)): ResponseBuilderHeaders fun ref finish_headers(): ResponseBuilderBody fun ref reset(): ResponseBuilder interface ResponseBuilderBody fun ref add_chunk(data: Array[U8] val): ResponseBuilderBody \"\"\" Add some body data. If Transfer-Encoding is set to [Chunked](http_server-Chunked.md) in [ResponseBuilderHeaders](http_server-ResponseBuilderHeaders.md) each call to this function will take care of encoding every added array here in Chunked encoding. Add an empty array to add the finishing chunk.. \"\"\" fun ref build(): ByteSeqIter \"\"\" Serialize the accumulated response data into a [ByteSeqIter](builtin-ByteSeqIter.md). \"\"\" fun ref reset(): ResponseBuilder \"\"\" Reset the builder to a fresh state, only use the returned builder for further actions. \"\"\" class iso _FullResponseBuilder \"\"\" Efficient HTTP response builder backed by a byte array to which we only append. Will write multiple chunks into separate arrays only if they exceed 65535 bytes (arbitrary choice). Otherwise appends to the same array, in order to not bog up writev calls with tiny arrays, which makes it very much inefficient. Keep your arrays decently sized at all times! This instance is `iso`, so you can safely send it around amongst your actors. \"\"\" let _version: Version let _empty_placeholder: Array[U8] val = recover val _empty_placeholder.create(0) end let _crlf: Array[U8] val = [as U8: '\\r'; '\\n'] let _header_sep: Array[U8] val = [as U8: ':'; ' '] var _array: Array[U8] iso var _chunks: Array[Array[U8] val] iso var _transfer_coding: (Chunked | None) var _needs_reset: Bool = false new iso _create(version: Version = HTTP11) => _version = version _array = (recover iso Array[U8].create(128) end) .>append(_version.to_bytes()) .>append(\" \") _chunks = (recover iso Array[Array[U8] val](1) end) .>push(_empty_placeholder) _transfer_coding = None fun ref reset(): ResponseBuilder => if _needs_reset then _array = (recover iso Array[U8].create(128) end) .>append(_version.to_bytes()) .>append(\" \") _chunks = (recover iso Array[Array[U8] val](1) end) .>push(_empty_placeholder) _transfer_coding = None end _needs_reset = false this fun ref set_status(status: Status): ResponseBuilderHeaders => _array.>append(status.string()) .>append(_crlf) _needs_reset = true this fun ref finish_headers(): ResponseBuilderBody => _array.append(_crlf) _needs_reset = true this fun ref add_header(name: String, value: String): ResponseBuilderHeaders => _array .>append(name) .>append(_header_sep) .>append(value) .>append(_crlf) _needs_reset = true this fun ref _set_transfer_coding(chunked: (Chunked | None)) => _transfer_coding = chunked fun ref set_transfer_encoding(chunked: (Chunked | None)): ResponseBuilderHeaders => \"\"\" this will also add the Transfer-Encoding header if set to `Chunked`. \"\"\" match chunked | Chunked => add_header(\"Transfer-Encoding\", \"chunked\") end _set_transfer_coding(chunked) _needs_reset = true this fun ref add_chunk(data: Array[U8] val): ResponseBuilderBody => \"\"\" content-length needs to be set before this happens. In case of chunked transfer-encoding this will be encoded into proper chunks. \"\"\" if (data.size() < 65535) and (_chunks.size() == 1) then // we can only append to the response array if we have no chunk yet added // to chunks (1 means 0 as we always put a placeholder) if _transfer_coding is Chunked then _array .>append( (recover val Format.int[USize](data.size() where fmt = FormatHexBare).>append(_crlf) end).array()) .>append(data) .append(_crlf) else _array.append(data) end else if _transfer_coding is Chunked then _chunks .>push( (recover val Format.int[USize](data.size() where fmt = FormatHexBare).>append(_crlf) end).array()) .>push(data) .push(_crlf) else _chunks.push(data) end end _needs_reset = true this fun ref build(): ByteSeqIter => \"\"\" This will not add the final chunk Do this manually by calling: ```pony builder.add_chunk(recover val Array[U8](0) end) ``` \"\"\" let response = (_array = (recover iso Array[U8].create(128) end) .>append(_version.to_bytes()) .>append(\" \")) try // should never fail. is always initialized with empty_placeholder at // index 0 _chunks(0)? = consume response end let byteseqs = (_chunks = (recover iso Array[Array[U8] val](1) end) .>push(_empty_placeholder)) _transfer_coding = None _needs_reset = false consume byteseqs // TODO: make internal state a ByteArrays instance and only keep track of // indices pointing to values class val BuildableResponse is (Response & ByteSeqIter) \"\"\" Build your own HTTP Responses (minus the body) and turn them into immutable things to send around. This class can be serialized in the following ways: * to Array[U8]: BuildableResponse.array() * to ByteArrays: BuildableResponse.to_bytes() or by using it as a ByteSeqIter. This class exists if you want to use the verbose API of [Session](http_server-Session.md) and brings lots of convenience, like getters and setters for all common properties. If you are looking for a more efficient way to build responses, use a [ResponseBuilder](http_server-ResponseBuilder.md) as it is returned from [Responses.builder()](http_server-Responses.md#builder), this class is not introspectable and only allows adding properties the way they are put on the serialized form in the request. E.g. you must first set the status and then the headers, not the other way around. But it makes for a more efficient API. \"\"\" var _version: Version var _status: Status embed _headers: Headers = _headers.create() var _transfer_coding: (Chunked | None) var _content_length: (USize | None) = None new trn create( status': Status = StatusOK, version': Version = HTTP11, transfer_coding': (Chunked | None) = None, content_length': (USize | None) = None) => _status = status' _version = version' _transfer_coding = transfer_coding' set_content_length(content_length') fun version(): Version => _version fun ref set_version(v: Version): BuildableResponse ref => _version = v this fun status(): Status => _status fun ref set_status(s: Status): BuildableResponse ref => _status = s this fun header(name: String): (String | None) => _headers.get(name) fun headers(): Iterator[Header] => _headers.values() fun ref add_header(name: String, value: String): BuildableResponse ref => _headers.add(name, value) this fun ref set_header(name: String, value: String): BuildableResponse ref => _headers.set(name, value) this fun ref clear_headers(): BuildableResponse ref => _headers.clear() this fun transfer_coding(): (Chunked | None) => _transfer_coding fun ref set_transfer_coding(c: (Chunked | None)): BuildableResponse ref => _transfer_coding = c this fun content_length(): (USize | None) => _content_length fun ref set_content_length(cl: (USize | None)): BuildableResponse ref => _content_length = cl match cl | let clu: USize => set_header(\"Content-Length\", cl.string()) // | None => // TODO: drop header end this fun array(): Array[U8] iso^ => let sp: Array[U8] val = [as U8: ' '] let crlf: Array[U8] val = [as U8: '\\r'; '\\n'] let header_sep: Array[U8] val = [as U8: ':'; ' '] let version_bytes = _version.to_bytes() let status_bytes = _status.string() let header_size = _headers.byte_size() let arr = recover iso Array[U8]( version_bytes.size() + 1 + status_bytes.size() + 2 + header_size + 2) end arr.>append(version_bytes) .>append(sp) .>append(status_bytes) .append(crlf) for (hname, hvalue) in headers() do arr.>append(hname) .>append(header_sep) .>append(_format_multiline(hvalue)) .>append(crlf) end arr.append(crlf) consume arr fun to_bytes(): ByteArrays => let sp: Array[U8] val = [as U8: ' '] let crlf: Array[U8] val = [as U8: '\\r'; '\\n'] let header_sep: Array[U8] val = [as U8: ':'; ' '] var acc = ByteArrays(version().to_bytes(), sp) + status().string() + crlf for (hname, hvalue) in headers() do acc = acc + hname + header_sep + _format_multiline(hvalue) + crlf end (acc + crlf) fun values(): Iterator[this->ByteSeq box] => \"\"\" Make this a very inefficient ByteSeqIter. Rather use `array()` if you care about performance. \"\"\" to_bytes().arrays().values() fun tag _format_multiline(header_value: String): String => // TODO header_value","title":"Response"},{"location":"src/http_server/server/","text":"use \"collections\" use \"net\" use \"net_ssl\" use \"time\" use \"debug\" interface tag _SessionRegistry be register_session(conn: _ServerConnection) be unregister_session(conn: _ServerConnection) actor Server is _SessionRegistry \"\"\" Runs an HTTP server. ### Server operation Information flow into the Server is as follows: 1. `Server` listens for incoming TCP connections. 2. `_ServerConnHandler` is the notification class for new connections. It creates a `_ServerConnection` actor and receives all the raw data from TCP. It uses the `HTTP11RequestParser` to assemble complete `Request` objects which are passed off to the `_ServerConnection`. 3. The `_ServerConnection` actor deals with requests and their bodies that have been parsed by the `HTTP11RequestParser`. This is where requests get dispatched to the caller-provided Handler. \"\"\" let _notify: ServerNotify var _handler_maker: HandlerFactory val let _config: ServerConfig let _sslctx: (SSLContext | None) let _listen: TCPListener var _address: NetAddress let _sessions: SetIs[_ServerConnection tag] = SetIs[_ServerConnection tag] let _timers: Timers = Timers var _timer: (Timer tag | None) = None new create( auth: TCPListenerAuth, notify: ServerNotify iso, handler: HandlerFactory val, config: ServerConfig, sslctx: (SSLContext | None) = None) => \"\"\" Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. \"\"\" _notify = consume notify _handler_maker = handler _config = config _sslctx = sslctx Debug(\"starting server with config:\\n\" + config.to_json()) _listen = TCPListener(auth, _ServerListener(this, config, sslctx, _handler_maker), config.host, config.port, config.max_concurrent_connections) _address = recover NetAddress end be register_session(conn: _ServerConnection) => _sessions.set(conn) // only start a timer if we have a connection-timeout configured if _config.has_timeout() then match _timer | None => let that: Server tag = this let timeout_interval = _config.timeout_heartbeat_interval let t = Timer( object iso is TimerNotify fun ref apply(timer': Timer, count: U64): Bool => that._start_heartbeat() true end, Nanos.from_millis(timeout_interval), Nanos.from_millis(timeout_interval)) _timer = t _timers(consume t) end end be _start_heartbeat() => // iterate through _sessions and ping all connections let current_seconds = Time.seconds() // seconds resolution is fine for session in _sessions.values() do session._heartbeat(current_seconds) end be unregister_session(conn: _ServerConnection) => _sessions.unset(conn) be set_handler(handler: HandlerFactory val) => \"\"\" Replace the request handler. \"\"\" _handler_maker = handler _listen.set_notify( _ServerListener(this, _config, _sslctx, _handler_maker)) be dispose() => \"\"\" Shut down the server gracefully. To do this we have to eliminate any source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. \"\"\" _listen.dispose() _timers.dispose() for conn in _sessions.values() do conn.dispose() end fun local_address(): NetAddress => \"\"\" Returns the locally bound address. \"\"\" _address be _listening(address: NetAddress) => \"\"\" Called when we are listening. \"\"\" _address = address _notify.listening(this) be _not_listening() => \"\"\" Called when we fail to listen. \"\"\" _notify.not_listening(this) be _closed() => \"\"\" Called when we stop listening. \"\"\" _notify.closed(this)","title":"Server"},{"location":"src/http_server/server_config/","text":"use \"time\" use \"json\" class val ServerConfig let host: String \"\"\" Hostname or IP to start listening on. E.g. `localhost` or `127.0.0.1` A value of `\"0.0.0.0\"` will make the server listen on all available interfaces. Default: `\"localhost\"` \"\"\" let port: String \"\"\" Numeric port (e.g. `\"80\"`) or service name (e.g. `\"http\"`) defining the port number to start listening on. Chosing `\"0\"` will let the server start on a random port, chosen by the OS. Default: `\"0\"` \"\"\" let connection_timeout: USize \"\"\" Timeout in seconds after which a connection will be closed. Using `0` will make the connection never time out. Default: `0` \"\"\" let max_request_handling_lag: USize \"\"\" Maximum number of requests that will be kept without a response generated before the connection is muted. Default: `100` \"\"\" let max_concurrent_connections: USize \"\"\" maximum number of concurrent TCP connections. Set to `0` to accept unlimited concurrent connections. Default: `0` \"\"\" let timeout_heartbeat_interval: U64 \"\"\" Interval between heartbeat calls to all tcp connection in milliseconds the server keeps track of for them in order to determine if they should time out. Default: `(<connection_timeout> * 1000) / 4` \"\"\" new val create( host': String = \"localhost\", port': String = \"0\", connection_timeout': USize = 0, max_request_handling_lag': USize = 100, max_concurrent_connections': USize = 0, timeout_heartbeat_interval': (U64 | None) = None ) => host = host' port = port' connection_timeout = connection_timeout' max_request_handling_lag = max_request_handling_lag' max_concurrent_connections = max_concurrent_connections' timeout_heartbeat_interval = match timeout_heartbeat_interval' | None => // use a quarter of the actual configured timeout // but at minimum 1 second ((connection_timeout.u64() * 1000) / 4).max(1) | let interval: U64 => interval end fun box has_timeout(): Bool => connection_timeout > 0 fun box to_json(): String => let doc = JsonDoc let obj = JsonObject obj.data(\"host\") = host obj.data(\"port\") = port obj.data(\"connection_timeout\") = connection_timeout.i64() obj.data(\"max_request_handling_lag\") = max_request_handling_lag.i64() obj.data(\"max_concurrent_connections\") = max_concurrent_connections.i64() obj.data(\"timeout_heartbeat_interval\") = timeout_heartbeat_interval.i64() doc.data = obj doc.string(where indent = \" \", pretty_print = true)","title":"Server config"},{"location":"src/http_server/server_notify/","text":"interface ServerNotify \"\"\" Notifications about the creation and closing of `TCPConnection`s within HTTP servers. \"\"\" fun ref listening(server: Server ref) => \"\"\" Called when we are listening. \"\"\" None fun ref not_listening(server: Server ref) => \"\"\" Called when we fail to listen. \"\"\" None fun ref closed(server: Server ref) => \"\"\" Called when we stop listening. \"\"\" None","title":"Server notify"},{"location":"src/http_server/session/","text":"use \"valbytes\" interface tag Session \"\"\" An HTTP Session is the external API to the communication link between client and server. Every request is executed as part of a HTTP Session. An HTTP Session lives as long as the underlying TCP connection and receives request data from it and writes response data to it. Receiving data and parsing this data into [Request](http_server-Request.md)s is happening on the TCPConnection actor. The [Session](http_server-Session.md) actor is started when a new TCPConnection is accepted, and shut down, when the connection is closed. ### Receiving a Request As part of the Request-Response handling internal to this HTTP library, a Session is instantiated that forwards requests to a [Handler](http_server-Handler.md), to actual application code, which in turn sends Responses back to the Session instance it was instantiated with (See [HandlerFactory](http_server-HandlerFactory.md). See [Handler](http_server-Handler.md) on how requests are received by application code. ### Sending a Response \"\"\" //////////////////////// // API THAT CALLS YOU // //////////////////////// be _receive_start(request: Request val, request_id: RequestID) => \"\"\" Start receiving a request. This will be called when all headers of an incoming request have been parsed. [Request](http_server-Request.md) contains all information extracted from these parts. The [RequestID](http_server-RequestID.md) is passed in order for the Session implementation to maintain the correct request order in case of HTTP pipelining. Response handling can happen asynchronously at arbitrary times, so the RequestID helps us to get the responses back into the right order, no matter how they are received from the application. \"\"\" None be _receive_chunk(data: Array[U8] val, request_id: RequestID) => \"\"\" Receive a chunk of body data for the request identified by `request_id`. The body is split up into arbitrarily sized data chunks, whose size is determined by the underlying protocol mechanisms, not the actual body size. \"\"\" None be _receive_finished(request_id: RequestID) => \"\"\" Indicate that the current inbound request, including the body, has been fully received. \"\"\" None be _receive_failed(parse_error: RequestParseError, request_id: RequestID) => \"\"\" Nofitcation if the request parser failed to parse incoming data as Request. Ignored by default. \"\"\" None /////////////////////// // API THAT YOU CALL // /////////////////////// // verbose api be send_start(respone: Response val, request_id: RequestID) => \"\"\" ### Verbose API Start sending a response, submitting the Response status and headers. Sending a response via the verbose API needs to be done in 2 or more steps: * Session.send_start - exactly once - submit status and headers * Session.send_chunk - 0 or more times - submit body * Session.send_finished - exactly once - clean up resources \"\"\" None be send_chunk(data: ByteSeq val, request_id: RequestID) => \"\"\" ### Verbose API Send a piece of body data of the request identified by `request_id`. This might be the whole body or just a piece of it. Notify the Session that the body has been fully sent, by calling `Session.send_finished`. \"\"\" None be send_finished(request_id: RequestID) => \"\"\" ### Verbose API Indicate that the response for `request_id` has been completed, that is, its status, headers and body have been sent. This will clean up resources on the session and might send pending pipelined responses in addition to this response. If this behaviour isnt called, the server might misbehave, especially with clients doing HTTP pipelining. \"\"\" None be send_cancel(request_id: RequestID) => \"\"\" Cancel sending an in-flight response. As the Session will be invalid afterwards, as the response might not have been sent completely, it is best to close the session afterwards using `Session.dispose()`. \"\"\" None // simple api be send_no_body(response: Response val, request_id: RequestID) => \"\"\" ### Simple API Send a bodyless Response in one call. This call will do all the work of sending the response and cleaning up resources. No need to call `Session.send_finished()` anymore for this request. \"\"\" None be send(response: Response val, body: ByteArrays, request_id: RequestID) => \"\"\" ### Simple API Send an Response with a body in one call. The body must be a [ByteArrays](valbytes-ByteArrays.md) instance. Example: ```pony // ... var bytes = ByteArrays bytes = bytes + \"first line\" + \"\\n\" bytes = bytes + \"second line\" + \"\\n\" bytes = bytes + \"third line\" session.send(response, bytes, request_id) // ... ``` This call will do all the work of sending the response and cleaning up resources. No need to call `Session.send_finished()` anymore for this request. \"\"\" None // optimized raw api be send_raw(raw: ByteSeqIter, request_id: RequestID, close_session: Bool = false) => \"\"\" ### Optimized raw API Send raw bytes to the Session in form of a [ByteSeqIter](builtin-ByteSeqIter.md). These bytes may or may not include the response body. You can use `Session.send_chunk()` to send the response body piece by piece. If the session should be closed after sending this response, no matter the requested standard HTTP connection handling, set `close_session` to `true`. To be a good HTTP citizen, include a `Connection: close` header in the raw response, to signal to the client to also close the session. If set to `false`, then normal HTTP connection handling applies (request `Connection` header, HTTP/1.0 without `Connection: keep-alive`, etc.). To finish sending the response, it is required to call `Session.send_finished()` to wrap things up, otherwise the server might misbehave. This API uses the [TCPConnection.writev](net-TCPConnection.md#writev) method to optimize putting the given bytes out to the wire. To make this optimized path more usable, this library provides the [ResponseBuilder](http_server-ResponseBuilder.md), which builds up a response into a [ByteSeqIter](builtin-ByteSeqIter.md), thus taylored towards being used with this API. Example: ```pony class MyHandler is Handler let _session: Session new create(session: Session) => _session = session fun ref apply(request: Request val, request_id: RequestID): Any => let body = match request.content_length() | let cl: USize => \"You've sent us \" + cl.string() + \" bytes! Thank you!\" | None if request.transfer_coding() is Chunked => \"You've sent us some chunks! That's cool!\" | None => \"Dunno how much you've sent us. Probably nothing. That's alright.\" end _session.send_raw( Responses.builder() .set_status(StatusOK) .add_header(\"Content-Type\", \"text/plain; charset=UTF-8\") .add_header(\"Content-Length\", body.size().string()) .finish_headers() .add_chunk(body) .build(), request_id ) // never forget !!! _session.send_finished(request_id) ``` \"\"\" None be dispose() => \"\"\" Close the connection from this end. \"\"\" None be _mute() => \"\"\" Stop delivering *incoming* data to the handler. This may not be effective instantly. \"\"\" None be _unmute() => \"\"\" Resume delivering incoming data to the handler. \"\"\" None","title":"Session"},{"location":"src/http_server/status/","text":"interface val Status \"\"\" HTTP status code. See: https://tools.ietf.org/html/rfc2616#section-10 \"\"\" fun apply(): U16 \"\"\" Get the status code as number. \"\"\" fun string(): String \"\"\" Get the status code as string including Status-Code and Reason-Phrase as it usually appears in the response status line: https://tools.ietf.org/html/rfc2616#section-6.1 \"\"\" primitive StatusContinue is Status fun apply(): U16 => 100 fun string(): String => \"100 Continue\" primitive StatusSwitchingProtocols is Status fun apply(): U16 => 101 fun string(): String => \"101 Switching Protocols\" primitive StatusOK is Status fun apply(): U16 => 200 fun string(): String => \"200 OK\" primitive StatusCreated is Status fun apply(): U16 => 201 fun string(): String => \"201 Created\" primitive StatusAccepted is Status fun apply(): U16 => 202 fun string(): String => \"202 Accepted\" primitive StatusNonAuthoritativeInfo is Status fun apply(): U16 => 203 fun string(): String => \"203 Non-Authoritative Information\" primitive StatusNoContent is Status fun apply(): U16 => 204 fun string(): String => \"204 No Content\" primitive StatusResetContent is Status fun apply(): U16 => 205 fun string(): String => \"205 Reset Content\" primitive StatusPartialContent is Status fun apply(): U16 => 206 fun string(): String => \"206 Partial Content\" primitive StatusMultipleChoices is Status fun apply(): U16 => 300 fun string(): String => \"300 Multiple Choices\" primitive StatusMovedPermanently is Status fun apply(): U16 => 301 fun string(): String => \"301 Moved Permanently\" primitive StatusFound is Status fun apply(): U16 => 302 fun string(): String => \"302 Found\" primitive StatusSeeOther is Status fun apply(): U16 => 303 fun string(): String => \"303 See Other\" primitive StatusNotModified is Status fun apply(): U16 => 304 fun string(): String => \"304 Not Modified\" primitive StatusUseProxy is Status fun apply(): U16 => 305 fun string(): String => \"305 Use Proxy\" primitive StatusTemporaryRedirect is Status fun apply(): U16 => 307 fun string(): String => \"307 Temporary Redirect\" primitive StatusBadRequest is Status fun apply(): U16 => 400 fun string(): String => \"400 Bad Request\" primitive StatusUnauthorized is Status fun apply(): U16 => 401 fun string(): String => \"401 Unauthorized\" primitive StatusPaymentRequired is Status fun apply(): U16 => 402 fun string(): String => \"402 Payment Required\" primitive StatusForbidden is Status fun apply(): U16 => 403 fun string(): String => \"403 Forbidden\" primitive StatusNotFound is Status fun apply(): U16 => 404 fun string(): String => \"404 Not Found\" primitive StatusMethodNotAllowed is Status fun apply(): U16 => 405 fun string(): String => \"405 Method Not Allowed\" primitive StatusNotAcceptable is Status fun apply(): U16 => 406 fun string(): String => \"406 Not Acceptable\" primitive StatusProxyAuthRequired is Status fun apply(): U16 => 407 fun string(): String => \"407 Proxy Authentication Required\" primitive StatusRequestTimeout is Status fun apply(): U16 => 408 fun string(): String => \"408 Request Timeout\" primitive StatusConflict is Status fun apply(): U16 => 409 fun string(): String => \"409 Conflict\" primitive StatusGone is Status fun apply(): U16 => 410 fun string(): String => \"410 Gone\" primitive StatusLengthRequired is Status fun apply(): U16 => 411 fun string(): String => \"411 Length Required\" primitive StatusPreconditionFailed is Status fun apply(): U16 => 412 fun string(): String => \"412 Precondition Failed\" primitive StatusRequestEntityTooLarge is Status fun apply(): U16 => 413 fun string(): String => \"413 Request Entity Too Large\" primitive StatusRequestURITooLong is Status fun apply(): U16 => 414 fun string(): String => \"414 Request URI Too Long\" primitive StatusUnsupportedMediaType is Status fun apply(): U16 => 415 fun string(): String => \"415 Unsupported Media Type\" primitive StatusRequestedRangeNotSatisfiable is Status fun apply(): U16 => 416 fun string(): String => \"416 Requested Range Not Satisfiable\" primitive StatusExpectationFailed is Status fun apply(): U16 => 417 fun string(): String => \"417 Expectation Failed\" primitive StatusTeapot is Status fun apply(): U16 => 418 fun string(): String => \"418 I'm a teapot\" primitive StatusPreconditionRequired is Status fun apply(): U16 => 428 fun string(): String => \"428 Precondition Required\" primitive StatusTooManyRequests is Status fun apply(): U16 => 429 fun string(): String => \"429 Too Many Requests\" primitive StatusRequestHeaderFieldsTooLarge is Status fun apply(): U16 => 431 fun string(): String => \"431 Request Header Fields Too Large\" primitive StatusUnavailableForLegalReasons is Status fun apply(): U16 => 451 fun string(): String => \"451 Unavailable For Legal Reasons\" primitive StatusInternalServerError is Status fun apply(): U16 => 500 fun string(): String => \"500 Internal Server Error\" primitive StatusNotImplemented is Status fun apply(): U16 => 501 fun string(): String => \"501 Not Implemented\" primitive StatusBadGateway is Status fun apply(): U16 => 502 fun string(): String => \"502 Bad Gateway\" primitive StatusServiceUnavailable is Status fun apply(): U16 => 503 fun string(): String => \"503 Service Unavailable\" primitive StatusGatewayTimeout is Status fun apply(): U16 => 504 fun string(): String => \"504 Gateway Timeout\" primitive StatusHTTPVersionNotSupported is Status fun apply(): U16 => 505 fun string(): String => \"505 HTTP Version Not Supported\" primitive StatusNetworkAuthenticationRequired is Status fun apply(): U16 => 511 fun string(): String => \"511 Network Authentication Required\"","title":"Status"},{"location":"src/http_server/sync_handler/","text":"use \"valbytes\" use \"debug\" interface SyncHandler \"\"\" Use this handler, when you want to handle your requests without accessing other actors. \"\"\" fun ref apply(request: Request val, body: (ByteArrays | None)): ByteSeqIter ? fun error_response(request: Request): (ByteSeqIter | None) => None class SyncHandlerWrapper is Handler let _session: Session let _handler: SyncHandler var _request_id: (RequestID | None) = None var _request: Request = BuildableRequest.create() var _body_buffer: ByteArrays = ByteArrays var _sent: Bool = false new create(session: Session, handler: SyncHandler) => _handler = handler _session = session fun ref apply(request: Request val, request_id: RequestID) => _request_id = request_id _request = request _sent = false if not request.has_body() then _sent = true let res = _run_handler(request, None) _session.send_raw(res, request_id) end fun ref _run_handler(request: Request, body: (ByteArrays | None) = None): ByteSeqIter => try _handler(request, None)? else // create 500 response match _handler.error_response(request) | let bsi: ByteSeqIter => bsi | None => // default 500 response let message = \"Internal Server Error\" Responses .builder(request.version()) .set_status(StatusInternalServerError) .add_header(\"Content-Length\", message.size().string()) .add_header(\"Content-Type\", \"text/plain\") .finish_headers() .add_chunk(message.array()) .build() end end fun ref chunk(data: ByteSeq val, request_id: RequestID) => _body_buffer = _body_buffer + data fun ref finished(request_id: RequestID) => if not _sent then // resetting _body_buffer let res = _run_handler(_request, _body_buffer = ByteArrays) _session.send_raw(res, request_id) end _session.send_finished(request_id)","title":"Sync handler"},{"location":"src/http_server/url/","text":"class val URL \"\"\" Holds the components of a URL. These are always stored as valid, URL-encoded values. \"\"\" var scheme: String = \"\" \"\"\" URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.1). \"\"\" var user: String = \"\" \"\"\" URL user as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide user information, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1). \"\"\" var password: String = \"\" \"\"\" URL password as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide a password, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1). \"\"\" var host: String = \"\" \"\"\" URL host as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide a host, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.2). \"\"\" var port: U16 = 0 \"\"\" URL port as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide a port, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.3). \"\"\" var path: String = \"\" \"\"\" URL path component. If the URL does not provide a path component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.3). \"\"\" var query: String = \"\" \"\"\" URL query component. If the URL does not provide a query component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.4). \"\"\" var fragment: String = \"\" \"\"\" Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.5). \"\"\" new val create() => \"\"\" Create an empty URL. \"\"\" None new val build(from: String, percent_encoded: Bool = true) ? => \"\"\" Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. \"\"\" _parse(from)? if not URLEncode.check_scheme(scheme) then error end user = URLEncode.encode(user, URLPartUser, percent_encoded)? password = URLEncode.encode(password, URLPartPassword, percent_encoded)? host = URLEncode.encode(host, URLPartHost, percent_encoded)? path = URLEncode.encode(path, URLPartPath, percent_encoded)? query = URLEncode.encode(query, URLPartQuery, percent_encoded)? fragment = URLEncode.encode(fragment, URLPartFragment, percent_encoded)? new val valid(from: String) ? => \"\"\" Parse the URL string into its components. If it isn't URL encoded, raise an error. \"\"\" _parse(from)? if not is_valid() then error end fun is_valid(): Bool => \"\"\" Return true if all elements are correctly URL encoded. \"\"\" URLEncode.check_scheme(scheme) and URLEncode.check(user, URLPartUser) and URLEncode.check(password, URLPartPassword) and URLEncode.check(host, URLPartHost) and URLEncode.check(path, URLPartPath) and URLEncode.check(query, URLPartQuery) and URLEncode.check(fragment, URLPartFragment) fun string(): String iso^ => \"\"\" Combine the components into a string. \"\"\" let len = scheme.size() + 3 + user.size() + 1 + password.size() + 1 + host.size() + 6 + path.size() + 1 + query.size() + 1 + fragment.size() let s = recover String(len) end if scheme.size() > 0 then s.append(scheme) s.append(\":\") end if (user.size() > 0) or (host.size() > 0) then s.append(\"//\") end if user.size() > 0 then s.append(user) if password.size() > 0 then s.append(\":\") s.append(password) end s.append(\"@\") end if host.size() > 0 then s.append(host) // Do not output port if it's the scheme default. if port != default_port() then s.append(\":\") s.append(port.string()) end end s.append(path) if query.size() > 0 then s.append(\"?\") s.append(query) end if fragment.size() > 0 then s.append(\"#\") s.append(fragment) end consume s fun val join(that: URL): URL => \"\"\" Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. \"\"\" // TODO: this fun default_port(): U16 => \"\"\" Report the default port for our scheme. Returns 0 for unrecognised schemes. \"\"\" match scheme | \"http\" => 80 | \"https\" => 443 else 0 end fun ref _parse(from: String) ? => \"\"\" Parse the given string as a URL. Raises an error on invalid port number. \"\"\" (var offset, scheme) = _parse_scheme(from) (offset, let authority) = _parse_part(from, \"//\", \"/?#\", offset) (offset, path) = _parse_part(from, \"\", \"?#\", offset) (offset, query) = _parse_part(from, \"?\", \"#\", offset) (offset, fragment) = _parse_part(from, \"#\", \"\", offset) if path.size() == 0 then // An empty path is a root path. path = \"/\" end (var userinfo, var hostport) = _split(authority, '@') if hostport.size() == 0 then // No '@' found, hostport is whole of authority. hostport = userinfo = \"\" end (user, password) = _split(userinfo, ':') (host, var port_str) = _parse_hostport(hostport) port = if port_str.size() > 0 then port_str.u16()? else default_port() end fun _parse_scheme(from: String): (/*offset*/ISize, /*scheme*/String) => \"\"\" Find the scheme, if any, at the start of the given string. The offset of the part following the scheme is returned. \"\"\" // We have a scheme only if we have a ':' before any of \"/?#\". try var i = USize(0) while i < from.size() do let c = from(i)? if c == ':' then // Scheme found. return ((i + 1).isize(), from.substring(0, i.isize())) end if (c == '/') or (c == '?') or (c == '#') then // No scheme. return (0, \"\") end i = i + 1 end end // End of string reached without finding any relevant terminators. (0, \"\") fun _parse_part( from: String, prefix: String, terminators: String, offset: ISize) : (/*offset*/ISize, /*part*/String) => \"\"\" Attempt to parse the specified part out of the given string. Only attempt the parse if the given prefix is found first. Pass \"\" if no prefix is needed. The part ends when any one of the given terminator characters is found, or the end of the input is reached. The offset of the terminator is returned, if one is found. \"\"\" if (prefix.size() > 0) and (not from.at(prefix, offset)) then // Prefix not found. return (offset, \"\") end let start = offset + prefix.size().isize() try var i = start.usize() while i < from.size() do let c = from(i)? var j = USize(0) while j < terminators.size() do if terminators(j)? == c then // Terminator found. return (i.isize(), from.substring(start, i.isize())) end j = j + 1 end i = i + 1 end end // No terminator found, take whole string. (from.size().isize(), from.substring(start)) fun _split(src: String, separator: U8): (String, String) => \"\"\" Split the given string in 2 around the first instance of the specified separator. If the string does not contain the separator then the first resulting string is the whole src and the second is empty. \"\"\" try var i = USize(0) while i < src.size() do if src(i)? == separator then // Separator found. return (src.substring(0, i.isize()), src.substring((i + 1).isize())) end i = i + 1 end end // Separator not found. (src, \"\") fun _parse_hostport(hostport: String): (/*host*/String, /*port*/String) => \"\"\" Split the given \"host and port\" string into the host and port parts. \"\"\" try if (hostport.size() == 0) or (hostport(0)? != '[') then // This is not an IPv6 format host, just split at the first ':'. return _split(hostport, ':') end // This is an IPv6 format host, need to find the ']' var i = USize(0) var terminator = U8(']') while i < hostport.size() do if hostport(i)? == terminator then if terminator == ':' then // ':' found, now we can separate the host and port return (hostport.substring(0, i.isize()), hostport.substring((i + 1).isize())) end // ']' found, now find ':' terminator = ':' end i = i + 1 end end // ':' not found, we have no port. (hostport, \"\")","title":"Url"},{"location":"src/http_server/url_encode/","text":"primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart is ( URLPartUser | URLPartPassword | URLPartHost | URLPartPath | URLPartQuery | URLPartFragment ) primitive URLEncode \"\"\" Functions for checking, encoding, and decoding parts of URLs. \"\"\" fun encode(from: String, part: URLPart, percent_encoded: Bool = true) : String ? => \"\"\" URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true => given string is already at least partially encoded, so '%'s indicate an encoded character. false => given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. \"\"\" if _is_host_ipv6(from, part)? then return from end let out = recover String(from.size()) end var i = USize(0) while i < from.size() do var c = from(i)? var should_encode = false if (c == '%') and percent_encoded then // Treat % as an encoded character. // _unhex() will throw on bad / missing hex digit. c = (_unhex(from(i + 1)?)? << 4) or _unhex(from(i + 2)?)? should_encode = not _normal_decode(c, part) i = i + 3 else // Not an encoded character. should_encode = not _is_char_legal(c, part) i = i + 1 end if should_encode then out.push('%') out.push(_hex(c >> 4)?) out.push(_hex(c and 0xF)?) else out.push(c) end end out fun decode(from: String): String ? => \"\"\" URL decode a string. Raise an error on invalid URL encoded. \"\"\" let out = recover String(from.size()) end var i = USize(0) while i < from.size() do let c = from(i)? if c == '%' then // _unhex() will throw on bad / missing hex digit. let value = (_unhex(from(i + 1)?)? << 4) or _unhex(from(i + 2)?)? out.push(value) i = i + 3 elseif c == '+' then out.push(' ') i = i + 1 else out.push(c) i = i + 1 end end out fun check_scheme(scheme: String): Bool => \"\"\" Check that the given string is a valid scheme. \"\"\" try var i = USize(0) while i < scheme.size() do let c = scheme(i)? if ((c < 'a') or (c > 'z')) and ((c < 'A') or (c > 'Z')) and ((c < '0') or (c > '9')) and (c != '-') and (c != '+') and (c != '.') then return false end i = i + 1 end end true fun check(from: String, part: URLPart): Bool => \"\"\" Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. \"\"\" try if _is_host_ipv6(from, part)? then return true end else return false end try var i = USize(0) while i < from.size() do let c = from(i)? if c == '%' then // Character is encoded. // _unhex() will throw on bad / missing hex digit. _unhex(from(i + 1)?)? _unhex(from(i + 2)?)? i = i + 3 elseif _is_char_legal(c, part) then i = i + 1 else return false end end true else false end fun _is_char_legal(value: U8, part: URLPart): Bool => \"\"\" Determine whether the given character is legal to appear in the specified URL part. \"\"\" // The unreserved and sub-delim characters are always allowed. if ((value >= 'a') and (value <= 'z')) or ((value >= 'A') and (value <= 'Z')) or ((value >= '0') and (value <= '9')) or (value == '-') or (value == '.') or (value == '_') or (value == '~') or (value == '!') or (value == '$') or (value == '&') or (value == '\\'') or (value == '(') or (value == ')') or (value == '*') or (value == '+') or (value == ',') or (value == ';') or (value == '=') then return true end // Which general delims are allowed depends on the part. match part | URLPartPassword => (value == ':') | URLPartPath => (value == ':') or (value == '@') or (value == '/') | URLPartQuery => (value == ':') or (value == '@') or (value == '/') or (value == '?') | URLPartFragment => (value == ':') or (value == '@') or (value == '/') or (value == '?') else false end fun _normal_decode(value: U8, part: URLPart): Bool => \"\"\" Determine whether the given character should be decoded to give normal form. Some characters, such as sub-delims, are valid to have either in encoded or unencoded form. These should be left as they are when normalising. This will return false for such characters. \"\"\" // The unreserved characters should always be decoded. if ((value >= 'a') and (value <= 'z')) or ((value >= 'A') and (value <= 'Z')) or ((value >= '0') and (value <= '9')) or (value == '-') or (value == '_') or (value == '.') or (value == '~') then return true end // Which general delims to decode depends on the part. match part | URLPartPassword => (value == ':') | URLPartPath => (value == ':') or (value == '@') or (value == '/') | URLPartQuery => (value == ':') or (value == '@') or (value == '/') or (value == '?') | URLPartFragment => (value == ':') or (value == '@') or (value == '/') or (value == '?') else false end fun _is_host_ipv6(host: String, part: URLPart): Bool ? => \"\"\" Check whether the given string is a valid IPv6 format host. Returns: true if string is a valid IPv6 format host. false if string is not an IPv6 foramt host at all. Raises an error if string is an invalid IPv6 format host. \"\"\" try if (part isnt URLPartHost) or (host.size() == 0) or (host(0)? != '[') then return false end end // We are an IPv6 format host, ie a host starting with a '['. var i = USize(1) while i < (host.size() - 1) do let c = host(i)? // Only hex digits, ':' and '.' and allowed. if ((c < 'a') or (c > 'f')) and ((c < 'A') or (c > 'F')) and ((c < '0') or (c > '9')) and (c != ':') and (c != '.') then error end i = i + 1 end // Must end with a ']'. if host(host.size() - 1)? != ']' then error end true fun _hex(value: U8): U8 ? => \"\"\" Turn 4 bits into a hex value. \"\"\" if value < 10 then value + '0' elseif value < 16 then (value + 'A') - 10 else error end fun _unhex(value: U8): U8 ? => \"\"\" Turn a hex value into 4 bits. \"\"\" if (value >= '0') and (value <= '9') then value - '0' elseif (value >= 'A') and (value <= 'F') then (value - 'A') + 10 elseif (value >= 'a') and (value <= 'f') then (value - 'a') + 10 else error end","title":"Url encode"}]}